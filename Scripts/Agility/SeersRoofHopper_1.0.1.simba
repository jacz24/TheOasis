program SeersRoofHopper_V1_0_1;
{$DEFINE SRL_USE_REMOTEINPUT}
{$I SRL-F/OSR.simba}

Const
(* General settings *)
  HEALPERC   = 60;      // % to heal at
  MAXRUNTIME = 135;     // Max run time (in minutes)

(* Player settings *)
  PNAME        = '';    // Username
  PPASS        = '';    // Password

(* Break settings *)
  BREAKAFTER   = '115'; // Break after how long (in minutes)
  BREAKFOR     = '15';  // Break for how long (in minutes)

Type
  TLocation = (SURFACE,GAP1,TIGHTROPE,GAP2,GAP3,EDGE);
  ResultEx  = (COMPLETE, FAILED, NOTFOUND);

  TObstacle = record
    Index,
    MaxTime,XP : Int32;
    WalkTile   : TPoint;
    NextLoc    : TLocation;
    Color      : TCTS2Color;
    MMTiles    : TPointArray;
    UpText     : TStringArray;
  end;

  TScript = record
    StartTile          : TPoint;
    Obstacles          : Array [0..5] of TObstacle;
    Obs_Names          : Array [0..5] of String;
    FailCount,Attempts,
    LapCount,XPGained,
    MOGCount,PrevXP    : Int32;
    Version            : String;
    MOGCol             : TCTS2Color;
    Path_EndToStart,
    Path_FailToStart   : TPointArray;
    ShutdownTime       : Int64;
    TrueRunTime        : TStopwatch;
    RSW                : TRSWalker;
  end;

Var
  Bot: TScript;

procedure TScript.WriteMsg(Message: String);
begin
  WriteLn('[Bot]: ',Message);
end;

procedure TScript.DownloadToFile(const URL, Filename: string);
var
  Client: Int32;
begin
  Self.WriteMsg('Downloading assets');
  Client := InitializeHTTPClient(False);
  try
    GetHTTPPageEx(Client, URL, Filename);
  finally
    FreeHTTPClient(Client);
  end;
end;

procedure TScript.DeclarePlayers();
begin
  Login.AddPlayer(PNAME, PPASS, '', []);
end;

procedure TScript.DoLoseFocus();
Var T: Int32;
begin
  T := SRL.NormalRange(1700,5000);
  Antiban.DebugLn('Losing focus for '+SRL.MsToTime(T, Time_Short));
  Antiban.LoseFocus(T);
end;

procedure TMouse.RandomMovement();
var
  S: Int32;
begin
  S := Self.Speed;
  Self.Speed := 4;
  Self.Move(Box(Mouse.Position, 75, 75), True, );
  Self.Speed := S;
end;

procedure TAntiban.RandomSmallRotate();
begin
  Self.DebugLn('Random Small Rotate');

  case SRL.Dice(50) of
    True:  Minimap.SetCompassAngle(Minimap.GetCompassAngle() - SRL.NormalRange(10, 40, 3));
    False: Minimap.SetCompassAngle(Minimap.GetCompassAngle() + SRL.NormalRange(10, 40, 3));
  end;
end;

procedure TScript.SetupAntiban();
begin
  Antiban.Skills += ERSSKILL.AGILITY;
  Antiban.AddTask((ONE_MINUTE*1),  @Mouse.RandomMovement);
  Antiban.AddTask((ONE_MINUTE*6),  @Antiban.HoverMSPlayers);
  Antiban.AddTask((ONE_MINUTE*7),  @AntiBan.RandomSmallRotate);
  Antiban.AddTask((ONE_MINUTE*8),  @Self.DoLoseFocus);
  Antiban.AddTask((ONE_MINUTE*8),  @Antiban.HoverMSNPCs);
  Antiban.AddTask((ONE_MINUTE*20), @Antiban.HoverSkills);
  Antiban.AddBreak(ONE_MINUTE*25, ONE_SECOND*40, 0.2, 0.0);
  if BREAKAFTER <> '' then
    Antiban.AddBreak(ONE_MINUTE*StrToInt(BREAKAFTER),ONE_MINUTE*StrToInt(BREAKFOR), 0.2, 1.0);
end;

procedure TScript.DoAB();
begin
  Antiban.DismissRandom();
  if Antiban.DoAntiban() then
    if (not RSClient.IsLoggedIn) then
      Login.LoginPlayer();
end;

procedure TScript.HighlightRect(Rect: TRectangle; Color, Opacity: Integer);
var
  RR,RG,RB,
  R,G,B,i: Integer;
  Pts: TPointArray;
  Cols: TIntegerArray;
begin
  ColorToRGB(Color, RR, RG, RB);
  try
    Pts := TPAFromPolygon(Rect.ToTPA);
    Cols := GetColors(Pts);

    for i:=0 to high(Cols) do
    begin
      ColorToRGB(Cols[i], R, G, B);
      R := Round(0.01 * (Opacity * R + (100 - Opacity) * RR));
      G := Round(0.01 * (Opacity * G + (100 - Opacity) * RG));
      B := Round(0.01 * (Opacity * B + (100 - Opacity) * RB));

      // Because we lack the ability to draw a TPA in conjunction with TIA, we must go this route
      // An unfortunate lack of options
      RSClient.Image.DrawTPA([Pts[i]], RGBtoColor(R,G,B));
    end;
  except
  end;
end;

procedure TScript.Report();
begin
  ClearDebug();

  ProgressReport(RESULT_REPORTBOX, 'Seers Roof-hopper', 'Flight', Self.Version,
                 ['Runtime', 'XP gained', 'MOGs taken', 'Success rate', 'Until shutdown'],
                 [SRL.MsToTime(Self.TrueRunTime.ElapsedTime, Time_Short),
                  ToStr(Self.XPGained,'(', Round(Self.XPGained / (Self.TrueRunTime.ElapsedTime/1000/60/60)),' / hr)'),
                  ToStr(Self.MOGCount,'(', Round(Self.MOGCount / (Self.TrueRunTime.ElapsedTime/1000/60/60)),' / hr)'),
                  ToStr((Round(Self.LapCount/(Self.LapCount+Self.FailCount)*100)),'%'),
                  SRL.MsToTime(Self.ShutdownTime-GetTimeRunning, Time_Short)]);
end;

procedure PauseRunTime(Task: PBreakTask);
Var T: PBreakTask;
begin
  Bot.TrueRunTime.Pause;
  T := Task;
end;

procedure ResumeRunTime(Task: PBreakTask);
Var T: PBreakTask;
begin
  if getTimeRunning() > Bot.ShutdownTime then
    TerminateScript('Time to shutdown');

  Bot.TrueRunTime.Resume;
  T := Task;
end;

function TScript.GetLocation(): TLocation;
var
  MyPos: TPoint:=Self.RSW.GetMyPos();
begin
  if (not RSClient.IsLoggedIn) then Exit;
  if Minimap.PercentBlack() < 15 then Exit(SURFACE);

  if MyPos.InBox([655,454,705,493]) then Exit(GAP1);
  if MyPos.InBox([853,447,910,507]) then Exit(TIGHTROPE);
  if MyPos.InBox([871,513,915,549]) then Exit(GAP2);
  if MyPos.InBox([566,532,654,582]) then Exit(GAP3);
  if MyPos.InBox([800,578,864,621]) then Exit(EDGE);
end;

function TScript.GetNextObstacle(): Int32;
var
  Loc: TLocation:=Self.GetLocation();
begin
  if (not RSClient.IsLoggedIn) then Exit;
  if Minimap.PercentBlack() < 15 then Exit(0);

  case Loc of
    GAP1     : Exit(1);
    TIGHTROPE: Exit(2);
    GAP2     : Exit(3);
    GAP3     : Exit(4);
    EDGE     : Exit(5);
  end;
end;

function TScript.CheckHealth(): Boolean;
var
  T: TCountDown;
  Food: TRSItem;
  Foods: TRSItemArray;
begin
  if (not RSClient.IsLoggedIn) then Exit;
  if (Minimap.GetHPPercent() > SRL.NormalRange((HEALPERC*0.85),(HEALPERC*1.15))) then
    Exit;

  Self.WriteMsg('Eating some food');

  Foods := ['Trout','Salmon','Tuna','Lobster','Swordfish','Monkfish',
            'Shark','Slice of cake','2/3 cake','Cake'];

  if (not Inventory.FindItems(Foods)) then
  begin
    Self.WriteMsg('Out of food!');
    Logout.ClickLogout();
    TerminateScript();
  end;

  for Food in Foods do
    if Inventory.FindItem(Food) then
    begin
      Result := True;
      Inventory.ClickItem(Food);
      break;
    end;

  T.Init(SRL.NormalRange(2000,3100));
  while (not T.IsFinished) do
  begin
    if (Minimap.GetHPPercent() > HEALPERC) then Exit;
    wait(45,85);
  end;
end;

function TScript.CheckForMarks(): Boolean;
var
  TrueDot: TPoint;
  TPA,Dots: TPointArray;
  ATPA: T2DPointArray;
  Finder: TRSObjectFinder;
begin
  if (not RSClient.IsLoggedIn) then Exit;
  if Minimap.PercentBlack() < 10 then Exit;

  Dots := Minimap.GetDots(ERSMinimapDot.ITEM);
  if Dots.Len() < 1 then Exit;
  Dots.Sort(Minimap.Center);
  TrueDot := [Dots[0].X+2, Dots[0].Y+2];
  if TrueDot.DistanceTo(Minimap.Center) > 35 then Exit;

  Minimap.WaitPlayerMoving(300, SRL.NormalRange(3000,4500));

  Finder.Colors += MOGCol;
  Finder.ClusterDistance := 10;
  Finder.Erode := 1;
  Finder.MinLongSide := 7;

  for 1 to 2 do
  begin
    ATPA := MainScreen.FindObject(Finder);
    if ATPA.Len < 1 then
      MainScreen.FacePoint(TrueDot)
    else if ATPA.Len >= 1 then
      break;
  end;

  if ATPA.Len < 1 then Exit;

  Self.HighlightRect(Minimap.PointToMsRect(TrueDot), clRed, 80);
  for TPA in ATPA do
  begin
    Mouse.Move(TPA.Mean);
    if Mainscreen.IsUpText(['Take Ma','ark of Gr'], 75) then Break;
  end;

  RSClient.Image.Clear(Mainscreen.Bounds);

  if (not Mainscreen.IsUpText(['Take Ma','ark of Gr'], 75)) then Exit;
  case SRL.Dice(SRL.NormalRange(80,97)) of
    True:
    begin
      Mouse.Click(MOUSE_LEFT);
      Result := MainScreen.DidRedClick;
    end;
    False:
    begin
      Mouse.Click(MOUSE_RIGHT);
      Result := ChooseOption.Select('Take Mark');
    end;
  end;

  if Result then
  begin
    Minimap.WaitFlag(SRL.NormalRange(1,4));
    Self.WriteMsg('Took a MOG');
    Inc(Self.MOGCount);
  end;
end;

function TScript.FindObstacle(Obs: TObstacle): Boolean;
var
  Pt,Tile: TPoint;
  MSRect: TRectangle;
  TPA: TPointArray;
  ATPA: T2DPointArray;
  Finder: TRSObjectFinder;
begin
  if (not RSClient.IsLoggedIn) then Exit;

  for Tile in Obs.MMTiles do
  begin
    MSRect := Self.RSW.GetTileMS(Tile, 0);

    if MainScreen.IsVisible(MSRect.Mean) then
    begin
      Self.HighlightRect(MSRect, 16105854, 75);
      if Obs.Color.Color <> 0 then
      begin
        Finder.Colors += Obs.Color;
        Finder.ClusterDistance := 5;
        for 1 to SRL.NormalRange(3,5) do
        begin
          ATPA := MainScreen.FindObject(Finder, MSRect.Expand(5).Bounds);
          if ATPA.Len < 1 then Exit;
          for TPA in ATPA do
          begin
            Mouse.Move(TPA.Mean);
            if Mainscreen.IsUpText(Obs.UpText, 75) then Exit(True);
          end;
        end;
      end else
      begin
        for 1 to SRL.NormalRange(2,4) do
        begin
          Pt := SRL.RandomPoint(MSRect);
          Mouse.Move(Pt);
          if Mainscreen.IsUpText(Obs.UpText, 75) then Exit(True);
        end;
      end;
    end;
  end;

  Result := Mainscreen.IsUpText(Obs.UpText, 75);
end;

function TScript.HandleObstacle(Obs: TObstacle): ResultEx;
var
  T: TCountDown;
begin
  Result := NOTFOUND;
  if (not RSClient.IsLoggedIn) then Exit;

  while Minimap.IsPlayerMoving() do
    Wait(75, 125);

  Self.CheckForMarks();
  if Obs.WalkTile.X < 2 then
    Obs.WalkTile := Obs.MMTiles[0];

  for 1 to 3 do
  begin
    if Self.FindObstacle(Obs) then Break;

    Self.RSW.ScreenWalk := True;
    if (not Self.RSW.WalkBlind(Obs.WalkTile, 5)) then
    begin
      Self.RSW.ScreenWalk := False;
      Self.WriteMsg('Failed to walk to obstacle');
      Exit(NOTFOUND);
    end;
    Self.RSW.ScreenWalk := False;
  end;

  if Mainscreen.IsUpText(Obs.UpText, 75) then
  begin
    Mouse.Click(MOUSE_LEFT);
    if (not MainScreen.DidRedClick) then Exit;

    RSClient.Image.Clear(Mainscreen.Bounds);
    Self.Attempts := 0;
    if SRL.Dice(35) then
      Mouse.RandomMovement();

    if WaitUntil(Minimap.IsPlayerMoving(), 75, 4000) then
      Minimap.WaitPlayerMoving(300);
  end else
    Exit(NOTFOUND);

  T.Init(Obs.MaxTime);
  while (not T.IsFinished) do
  begin
    if (not RSClient.IsLoggedIn) then Exit;
    if (XPBar.Read() > Self.PrevXP) then Break;

    if Minimap.PercentBlack() < 15 then
      if Length(MainScreen.FindHPBars(Mainscreen.GetPlayerBox().Expand(5))) > 0 then
      begin
        Self.CheckHealth();
        Exit(FAILED);
      end;

    Self.DoAB();
    wait(75,115);
  end;

  if Minimap.PercentBlack() < 15 then
    if Length(MainScreen.FindHPBars(Mainscreen.GetPlayerBox().Expand(5))) > 0 then
    begin
      Self.CheckHealth();
      Exit(FAILED);
    end;

  Result := COMPLETE;

  Self.CheckForMarks();
  Inc(Self.XPGained, Obs.XP);
  Self.PrevXP := XPBar.Read();

  if Obs.Index = Self.Obstacles[high(Self.Obstacles)].Index then
  begin
    Inc(Self.LapCount);
    Self.Report();
    Self.RSW.WalkPath(Self.Path_EndToStart, 5);
    if (GetTimeRunning() > Self.ShutdownTime) then
    begin
      Logout.ClickLogout();
      TerminateScript('Time to shutdown');
    end;
  end;
end;

procedure TScript.Free();
begin
  RSClient.Image.Clear(Mainscreen.Bounds);
end;

procedure TScript.Init();
begin
  Self.Version := '1.0.1';
  RSClient.Image.Clear(Mainscreen.Bounds);
  if Self.RSW.FindMap('SeersRoof') = '' then
    DownloadToFile('https://i.imgur.com/IlSooxJ.png', IncludePath+'\SRL-F\osr\walker\maps\SeersRoof.png');

  Self.SetupAntiban();
  Antiban.OnStartBreak    := @PauseRunTime;
  Antiban.OnFinishBreak   := @ResumeRunTime;

  Self.RSW.Setup('SeersRoof');
  Self.RSW.EnableRunAtEnergy := 85;

  Self.DeclarePlayers();
  MM2MS.ZoomLevel            := Options.GetZoomLevel();
  Mouse.Speed                := SRL.NormalRange(16,21);
  Self.PrevXP                := XPBar.Read();
  Self.Obs_Names             := ['Wall climb','Gap 1','Tightrope','Gap 2','Gap 3','Edge'];
  Self.MOGCol                := CTS2(2207426, 3, 0.03, 0.39);
  Self.Path_EndToStart       := [[228,264], [248,263], [266,265], [280,262], [291,241],
                                 [299,220], [309,201], [314,176], [320,162]];
  Self.Path_FailToStart      := [[269,141], [272,163], [285,174], [310,175], [321,162]];

  with Obstacles[0] do
  begin
    Index   := 0;
    UpText  := ['up Wall','mb-up W','Wall'];
    MMTiles := [[320, 155]];
    XP      := 8;
    NextLoc := GAP1;
    MaxTime := 7000;
  end;
  with Obstacles[1] do
  begin
    Index   := 1;
    UpText  := ['Jump Gap','mp Ga'];
    MMTiles := [[659, 470], [657, 470]];
    XP      := 20;
    NextLoc := TIGHTROPE;
    MaxTime := 7000;
  end;
  with Obstacles[2] do
  begin
    Index    := 2;
    XP       := 20;
    MaxTime  := 9000;
    MMTiles  := [[885, 495]];
    WalkTile := [886, 489];
    NextLoc  := GAP2;
    Color    := CTS2(4283241, 6, 0.11, 0.23);
    UpText   := ['Cross Tightrope','Cross','Tightrope'];
  end;
  with Obstacles[3] do
  begin
    Index   := 3;
    XP      := 35;
    MaxTime := 6000;
    MMTiles := [[885, 543]];
    NextLoc := GAP3;
    UpText  := ['Jump Gap','mp Ga'];
  end;
  with Obstacles[4] do
  begin
    Index   := 4;
    XP      := 15;
    MaxTime := 6000;
    MMTiles := [[584, 570]];
    NextLoc := EDGE;
    UpText  := ['Jump Gap','mp Ga'];
  end;
  with Obstacles[5] do
  begin
    Index   := 5;
    XP      := 435;
    MaxTime := 8000;
    MMTiles := [[855, 592]];
    NextLoc := SURFACE;
    UpText  := ['Jump Edge','mp Ed'];
  end;

  AddOnTerminate(@Self.Free);
  Self.TrueRunTime.Start();
  Self.ShutdownTime := (MAXRUNTIME * 60000) + Random(- (MAXRUNTIME * 6000), (MAXRUNTIME * 6000));
end;

procedure TScript.Run();
var
  Index: Int32;
  TRes : ResultEx;
  Recal: Boolean;
begin
  while (GetTimeRunning() < Self.ShutdownTime) do
  begin
    if (not RSClient.IsLoggedIn) then
    begin
      if Login.Players[0].Password <> '' then
        Login.LoginPlayer
      else
      begin
        Logout.ClickLogout();
        TerminateScript('Not logged in');
      end;
    end;

    Recal := False;
    for Index := Self.GetNextObstacle to High(Self.Obstacles) do
    begin
      TRes := Self.HandleObstacle(Self.Obstacles[Index]);

      if (TRes = FAILED) then
        if Minimap.PercentBlack() < 10 then
        begin
          Self.WriteMsg('Failed '+Obs_Names[Index]+', walking to start');
          Inc(Self.FailCount);
          Wait(1100,2300);
          Self.CheckHealth();
          Self.RSW.WalkPath(Self.Path_FailToStart, 5);
          break;
        end;

      if (TRes = NOTFOUND) then
      begin
        Inc(Self.Attempts);
        if Self.Attempts > 2 then
        begin
          Self.WriteMsg('Failed to locate obstacle: '+Obs_Names[Index]);
          Self.WriteMsg('Index: '+ToStr(Index)+', Loc: '+ToStr(Self.GetLocation)+', Ang: '+ToStr(Minimap.GetCompassAngle));
          Logout.ClickLogout();
          TerminateScript();
        end;

        Antiban.RandomSmallRotate();
        Recal := True;
      end;

      if Recal then break;
    end;

    wait(SRL.NormalRange(125, 275));
  end;

  Logout.ClickLogout();
  TerminateScript('Time to shutdown');
end;

begin
  if RSClient.IsLoggedIn() then
    Bot.Init();
  Bot.Run();
end.
