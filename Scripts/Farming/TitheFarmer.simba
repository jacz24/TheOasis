program TitheFarmer_V1;
{$DEFINE SRL_USE_REMOTEINPUT}
{$I SRL-F/OSR.simba}

Const
(* General settings *)
  SEEDTYPE = 'Bologano'; // Ex: Golovanova, Bologano, Logavano
  HUMIDIFY = True;
  SEEDINVSLOT = 0; // Slot that ur seeds are in.
  MAXRUNTIME = 6900;     // Max run time (in minutes)

(* Player settings *)
  PNAME        = '';    // Username
  PPASS        = '';    // Password
  PPIN         = '';                // PIN
(* Break settings *)
  BREAKAFTER   = '115'; // Break after how long (in minutes)
  BREAKFOR     = '15';  // Break for how long (in minutes)

  DRAW         = True; // Will Draw on screen boxes around ores and such
  MSWalking    = True;

Type
  TScript = record
  Version                   : String;
  TrueRunTime               : TStopwatch;
  SackTile, WaterBarrel, EntranceTile     : TPoint;
  SeedTableTile, PatchTiles, PatchTileOne, PatchTileTwo, PatchTileThree, PatchTileFour : TPointArray;
  BologanoCycle : TCTS2Color;
  RSW                       : TRSWalker;
  ABTimeMod, StartXP        : Int32;
  ShutdownTime        : Int64;
  end;

var
  Bot: TScript;

procedure TScript.WriteMsg(Message: String);
begin
  WriteLn('[Bot]: ', Message);
end;

procedure TScript.WritePosition();
begin
  Self.WriteMsg('{X = ' + IntToStr(Self.RSW.GetMyPos().X) + ', Y = ' + IntToStr(Self.RSW.GetMyPos().Y) + '}');
end;

procedure TScript.DeclarePlayers();
begin
  Login.AddPlayer(PNAME, PPASS, PPIN, []);
end;

// Combination of miss mouse + slowing near the target destination
procedure TMouse.HumanMove(Point: TPoint);
var
  mPt: TPoint;
  S: Int32;
  Miss: Double;
  Range: Int64;
begin
  S := Self.Speed;
  Range := Trunc(Power(Self.Position().DistanceTo(Point), 0.80)); // how much possible range to miss
  Miss := SRL.SkewedRand(0.9, 0.1, 1.5); // Where miss will happen. 1 = destination (P).

  mPt.X := Trunc((1-Miss)*Self.Position().X + Miss*Point.X);
  mPt.Y := Trunc((1-Miss)*Self.Position().Y + Miss*Point.Y);

  mPt.X += SRL.NormalRange(-Range, Range);
  mPt.Y += SRL.NormalRange(-Range, Range);

  Self.Move(mPt);
  Self.Speed := round(S*0.85);
  Self.Move(Point);
  Self.Speed := S;
end;

procedure TMouse.RandomMovement();
var
  S: Int32;
begin
  S := Self.Speed;
  Self.Speed := 4;
  Self.Move(Box(Mouse.Position, 75, 75), True, );
  Self.Speed := S;
end;


procedure TScript.DoSkillHover();
begin
  Antiban.HoverSkill(ERSSKILL.MINING, random(1700, 3200), True)
end;

procedure TScript.DoLoseFocus();
Var T: Int32;
begin
  T := SRL.NormalRange(1700,8000);
  Antiban.DebugLn('Losing focus for '+SRL.MsToTime(T, Time_Short));
  Antiban.LoseFocus(T);
end;

procedure TScript.DoLongRest(); // Go AFK For a bit
Var T: Int32;
begin
  T := SRL.NormalRange(32000,128000);
  Antiban.DebugLn('Losing focus for '+SRL.MsToTime(T, Time_Short));
  Antiban.LoseFocus(T);
end;

procedure TScript.SetupAntiban();
begin
  Antiban.AddTask(ONE_SECOND*10, @Mouse.RandomMovement);
  Antiban.AddTask((ONE_MINUTE*4)*Self.ABTimeMod,  @Self.DoLoseFocus);
  Antiban.AddTask(ONE_MINUTE*3,  @Antiban.RandomRotate);
  Antiban.AddTask(ONE_MINUTE*4,  @Antiban.HoverMSItems);
  //Antiban.AddTask(ONE_MINUTE*4,  @Antiban.HoverMSNPCs);
  //Antiban.AddTask(ONE_MINUTE*4,  @Antiban.HoverMSPlayers);
  Antiban.AddTask(ONE_MINUTE*8,  @Self.DoSkillHover);
  Antiban.AddBreak(ONE_MINUTE*18, ONE_SECOND*40, 0.2, 0.0);
end;

procedure TScript.DoAB();
begin
  Antiban.DismissRandom();
  if Antiban.DoAntiban() then
    if (not RSClient.IsLoggedIn) then
      Login.LoginPlayer();
end;

procedure OnWalkEvent(Sender: PRSWalker; Position: TPoint; Destination: TPoint);
begin
  WriteLn('Running!');
  //if (Bot.RSW.GetMyPos().DistanceTo(Bot.BankTile) >= 4) then Bot.FindBank();

  Position    := [];  // For the sake of mitigating compile warnings
  Destination := [];
end;

procedure TScript.DisplayMSTile(Tile: TRectangle; SizeMod: Int32=0);
begin
  if SizeMod > 0 then
    Tile.Expand(SizeMod);
  if MainScreen.Bounds.Contains(Tile.Bounds) then
  begin
    RSClient.Image.Clear(Mainscreen.Bounds);
    RSClient.Image.DrawRect(Tile, clAqua);
  end;
end;



procedure TScript.Report();
begin
  ClearDebug();
  ProgressReport(RESULT_REPORTBOX, 'AIO-Miner', 'Jacz', Self.Version,
  ['Runtime', 'XP Gained', 'Mining For', 'Ore Mined', 'Until Shutdown'],
  [69420, '69', '420','Dope', 'Will']);
  //if Self.ScreenReport then // TODO ADD Drawing reports
  //  Self.DrawReport();
end;


function TScript.HasSeeds(): Boolean;
begin
  if Inventory.IsSlotUsed(0) then
  begin
    Self.WriteMsg('Still have seeds!');
    Exit(True);
  end;
  Exit(False);
end;

function TScript.FindSeedTable(): Boolean;
var
  RandI: Int64;
begin
  Self.WriteMsg('Finding Seed Table!');
  RandI := SRL.NormalRange(0, Self.SeedTableTile.Len());
  Self.WriteMsg(IntToStr(RandI));
  Mouse.HumanMove(Self.RSW.GetTileMS(Self.SeedTableTile[RandI]).Mean);
  if MainScreen.IsUpText(['Seed','table']) then Exit(True);
  Exit(False);
end;

function TScript.FindDoor(): Boolean;
var
  i: Int32;
  ATPA: T2DPointArray;
  DoorFinder: TRSObjectFinder;
begin
  Mouse.HumanMove(Self.RSW.GetTileMS([123,118]).Mean);
  if MainScreen.IsUpText(['Farm','door']) then Exit(True);
  Self.WriteMsg('Looking for Door!');
  ATPA := MainScreen.FindObject(DoorFinder);
  if ATPA.Len < 1 then TerminateScript('No Door Found');
  ATPA.SortByMiddle(Mainscreen.Center);


  // [120,118]
end;

function TScript.IsBright(): Boolean;
begin
  if SRL.AvgBrightness(MainScreen.GetPlayerBox) >= 95 then Exit(True);
end;

function TScript.CanWater(): Boolean;
begin
  if MainScreen.IsUpText('Water') then Exit(True);
end;

function TScript.CanHarvest(): Boolean;
begin
  if MainScreen.IsUpText('Harvest') then Exit(True);
end;

function TScript.CanPlant(): Boolean;
begin
  if MainScreen.IsUpText('patch') then Exit(True);
end;

function TScript.IsDead(): Boolean;
begin

end;

function TScript.Animating(): Boolean;
begin
  Self.WriteMsg('Checking If Animating');
//if SRL.IsAnimating(MainScreen.GetPlayerBox, 25, 320, 3) then Exit(True);
if SRL.GetPixelShift(MainScreen.GetPlayerBox, 120) > 75 then Exit(True);

Exit(False);
end;

procedure TScript.WaterPlant();
begin
  Mouse.Click(MOUSE_LEFT);
end;
procedure TScript.HarvestPlant();
begin
  Mouse.Click(MOUSE_LEFT);
end;

procedure TScript.RunToPatch();
begin
  Self.WriteMsg('Running To Patch');
  if Self.FindDoor() then
  begin
    Mouse.Click(MOUSE_LEFT);
    Wait(420,690);
    WaitUntil(Self.IsBright, 224, 4000);
    Self.RSW.WebWalk(Self.PatchTiles[0],6);
  end else TerminateScript('Run To Patch Failed');

end;

procedure TScript.PlantWestSide();
var
  PlantIndex, PatchIndex: Int32;
  RandPoint: TPoint;
  Plant: TRectangle;
  PatchArray: array of TPointArray;
begin
  PatchArray := [Self.PatchTileOne, Self.PatchTileTwo];

  //Plant := Self.RSW.GetTileMS([PatchArray[PatchIndex][PlantIndex].X-3, PatchArray[PatchIndex][PlantIndex].Y]); // 1,4,7,10
  //Plant := Plant.Expand(32);
  //if DRAW then Self.DisplayMSTile(Plant);
  //if Self.Animating() then Self.WriteMsg('IsAnimnating');
  //TerminateScript('Tight');

  for PatchIndex:=0 to high(PatchArray) do
  begin
    Self.WriteMsg('Farm Cycle For Patch: '+IntToStr(PatchIndex));
    for PlantIndex:=1 to high(PatchArray[PatchIndex]) do
    begin
      if MainScreen.IsVisible(Self.RSW.GetTileMS([PatchArray[PatchIndex][PlantIndex].X-3, PatchArray[PatchIndex][PlantIndex].Y]).Mean) then
      begin
        if not Inventory.IsOpen() then Inventory.Open();
        WaitUntil(Inventory.IsOpen(), 75, 5000);
        if not Inventory.IsSlotSelected(SEEDINVSLOT) then Inventory.ClickSlot(SEEDINVSLOT);
        WaitUntil(Inventory.IsSlotSelected(SEEDINVSLOT), 75, 5000);
        Self.WriteMsg(IntToStr(PlantIndex));
        WaitUntil(not Minimap.IsPlayerMoving(150), 75, 5000);
        Plant := Self.RSW.GetTileMS([PatchArray[PatchIndex][PlantIndex].X-3, PatchArray[PatchIndex][PlantIndex].Y]);
        Plant := Plant.Expand(32);

        //RandPoint := [Plant.Mean.X - SRL.NormalRange(-100,100),Plant.Mean.Y + SRL.NormalRange(0,12)];
        Mouse.HumanMove(Plant.Mean());
        if Self.CanWater then Self.WaterPlant();

        if Self.CanPlant then
        begin
          WaitUntil(not Minimap.IsPlayerMoving(150), 75, 5000);
          Mouse.Click(MOUSE_LEFT);
          WaitUntil(MainScreen.DidRedClick, 50, 1200);
          Wait(125,175);
          WaitUntil(not Minimap.IsPlayerMoving(), 75, 5000);
          WaitUntil(not Self.Animating(), 75, 4200);
          //Wait(750,1000);

          Plant := Self.RSW.GetTileMS([PatchArray[PatchIndex][PlantIndex].X-3, PatchArray[PatchIndex][PlantIndex].Y]);
          Plant := Plant.Expand(32);
          Mouse.HumanMove(Plant.Mean());

          WaitUntil(Self.CanWater(), 75, 3200);

          if Self.CanWater then Self.WaterPlant();
          WaitUntil(not Self.Animating(), 75, 4200);
        end;
        if DRAW then Self.DisplayMSTile(Plant);
        Self.WritePosition();
        PlantIndex := PlantIndex + 2;
        end else
        begin
          //Wait(224,420);
          WaitUntil(not Self.Animating(), 75, 4200);
          //Self.RSW.ScreenWalk := False;
          Self.RSW.WalkBlind(PatchArray[PatchIndex][PlantIndex],2);
          WaitUntil(not Minimap.IsPlayerMoving(), 75, 1200);
          if not Inventory.IsOpen() then Inventory.Open();
          WaitUntil(Inventory.IsOpen(), 75, 5000);
          if not Inventory.IsSlotSelected(SEEDINVSLOT) then Inventory.ClickSlot(SEEDINVSLOT);
          WaitUntil(Inventory.IsSlotSelected(SEEDINVSLOT), 75, 2400);
          Self.WriteMsg(IntToStr(PlantIndex));

          Plant := Self.RSW.GetTileMS(PatchArray[PatchIndex][PlantIndex]);
          Plant := Plant.Expand(32);
          Plant := Plant.Offset([-12,32]);

          //RandPoint := [Plant.Mean.X - SRL.NormalRange(-100,100),Plant.Mean.Y + SRL.NormalRange(0,12)];
          Mouse.HumanMove(Plant.Mean());
          if Self.CanWater then Self.WaterPlant();

        if Self.CanPlant then
        begin
          WaitUntil(not Minimap.IsPlayerMoving(150), 75, 5000);
          Mouse.Click(MOUSE_LEFT);
          WaitUntil(MainScreen.DidRedClick, 50, 1200);
          Wait(224,420);
          WaitUntil(not Minimap.IsPlayerMoving(), 75, 5000);
          WaitUntil(not Self.Animating(), 75, 4200);

          Plant := Self.RSW.GetTileMS([PatchArray[PatchIndex][PlantIndex].X-3, PatchArray[PatchIndex][PlantIndex].Y]);
          Plant := Plant.Expand(32);
          Mouse.HumanMove(Plant.Mean());

          WaitUntil(Self.CanWater(), 75, 3200);

          if Self.CanWater then Self.WaterPlant();
          WaitUntil(not Self.Animating(), 75, 4200);
        end;
        if DRAW then Self.DisplayMSTile(Plant);

        Self.WritePosition();
        PlantIndex := PlantIndex + 2;
        end;
        Wait(45,75);
      end;
  end;

end;

procedure TScript.PlantEastSide();
var
  PlantIndex, PatchIndex: Int32;
  RandPoint: TPoint;
  Plant: TRectangle;
  PatchArray: array of TPointArray;
begin
  PatchArray := [Self.PatchTileThree, Self.PatchTileFour];


  Plant := Self.RSW.GetTileMS([PatchArray[0][0].X+3, PatchArray[0][0].Y]); // 1,4,7,10
  Plant := Plant.Expand(32);
  if DRAW then Self.DisplayMSTile(Plant);
  if Self.Animating() then Self.WriteMsg('IsAnimnating');
  //TerminateScript('Tight');

  for PatchIndex:=0 to high(PatchArray) do
  begin
    Self.WriteMsg('Farm Cycle For Patch: '+IntToStr(PatchIndex));
    for PlantIndex:=1 to high(PatchArray[PatchIndex]) do
    begin
      if MainScreen.IsVisible(Self.RSW.GetTileMS([PatchArray[PatchIndex][PlantIndex].X+3, PatchArray[PatchIndex][PlantIndex].Y]).Mean) then
      begin

        if not Inventory.IsOpen() then Inventory.Open();
        WaitUntil(Inventory.IsOpen(), 75, 5000);
        if not Inventory.IsSlotSelected(SEEDINVSLOT) then Inventory.ClickSlot(SEEDINVSLOT);
        WaitUntil(Inventory.IsSlotSelected(SEEDINVSLOT), 75, 5000);
        Self.WriteMsg(IntToStr(PlantIndex));
        WaitUntil(not Minimap.IsPlayerMoving(150), 75, 5000);
        Plant := Self.RSW.GetTileMS([PatchArray[PatchIndex][PlantIndex].X+3, PatchArray[PatchIndex][PlantIndex].Y]);
        Plant := Plant.Expand(32);

        //RandPoint := [Plant.Mean.X - SRL.NormalRange(-100,100),Plant.Mean.Y + SRL.NormalRange(0,12)];
        Mouse.HumanMove(Plant.Mean());
        if Self.CanWater then Self.WaterPlant();

        if Self.CanPlant then
        begin
          WaitUntil(not Minimap.IsPlayerMoving(150), 75, 5000);
          Mouse.Click(MOUSE_LEFT);
          WaitUntil(MainScreen.DidRedClick, 50, 1200);
          Wait(125,175);
          WaitUntil(not Minimap.IsPlayerMoving(), 75, 5000);
          WaitUntil(not Self.Animating(), 75, 4200);
          //Wait(750,1000);

          Plant := Self.RSW.GetTileMS([PatchArray[PatchIndex][PlantIndex].X+3, PatchArray[PatchIndex][PlantIndex].Y]);
          Plant := Plant.Expand(32);
          Mouse.HumanMove(Plant.Mean());

          WaitUntil(Self.CanWater(), 75, 3200);

          if Self.CanWater then Self.WaterPlant();
        end;
        if DRAW then Self.DisplayMSTile(Plant);
        Self.WritePosition();
        PlantIndex := PlantIndex + 2;

        end else
        begin
        WaitUntil(not Self.Animating(), 75, 4200);
        Self.RSW.ScreenWalk := False;
        Self.RSW.WalkBlind(PatchArray[PatchIndex][PlantIndex],2);
        WaitUntil(not Minimap.IsPlayerMoving(), 75, 2400);


        if not Inventory.IsOpen() then Inventory.Open();
        WaitUntil(Inventory.IsOpen(), 75, 5000);
        if not Inventory.IsSlotSelected(SEEDINVSLOT) then Inventory.ClickSlot(SEEDINVSLOT);
        WaitUntil(Inventory.IsSlotSelected(SEEDINVSLOT), 75, 5000);
        Self.WriteMsg(IntToStr(PlantIndex));
        WaitUntil(not Minimap.IsPlayerMoving(150), 75, 5000);
        Plant := Self.RSW.GetTileMS([PatchArray[PatchIndex][PlantIndex].X+3, PatchArray[PatchIndex][PlantIndex].Y]);
        Plant := Plant.Expand(32);

        //RandPoint := [Plant.Mean.X - SRL.NormalRange(-100,100),Plant.Mean.Y + SRL.NormalRange(0,12)];
        Mouse.HumanMove(Plant.Mean());
        if Self.CanWater then Self.WaterPlant();

        if Self.CanPlant then
        begin
          WaitUntil(not Minimap.IsPlayerMoving(150), 75, 5000);
          Mouse.Click(MOUSE_LEFT);
          WaitUntil(MainScreen.DidRedClick, 50, 1200);
          Wait(224,420);
          WaitUntil(not Minimap.IsPlayerMoving(), 75, 5000);
          WaitUntil(not Self.Animating(), 75, 4200);

          Plant := Self.RSW.GetTileMS([PatchArray[PatchIndex][PlantIndex].X+3, PatchArray[PatchIndex][PlantIndex].Y]);
          Plant := Plant.Expand(32);
          Mouse.HumanMove(Plant.Mean());

          WaitUntil(Self.CanWater(), 75, 3200);

          if Self.CanWater then Self.WaterPlant();
        end;
        if DRAW then Self.DisplayMSTile(Plant);

        Self.WritePosition();

        //Wait(450,750);

        PlantIndex := PlantIndex + 2;
        //TerminateScript('Time to shutdown Testing');
        end;
        //WaitUntil(not Minimap.IsPlayerMoving(), 75, 5200);
      end;
  end;
end;
procedure TScript.WaterWestSide();
var
  PlantIndex, PatchIndex: Int32;
  RandPoint: TPoint;
  Plant: TRectangle;
  PatchArray: array of TPointArray;
begin
  PatchArray := [Self.PatchTileOne, Self.PatchTileTwo];

  for PatchIndex:=0 to high(PatchArray) do
  begin
    Self.WriteMsg('Farm Cycle For Patch: '+IntToStr(PatchIndex));
    for PlantIndex:=1 to high(PatchArray[PatchIndex]) do
    begin
      WaitUntil(not Minimap.IsPlayerMoving(150), 75, 5000);
      if MainScreen.IsVisible(Self.RSW.GetTileMS([PatchArray[PatchIndex][PlantIndex].X-3, PatchArray[PatchIndex][PlantIndex].Y]).Mean) then
      begin

        if not Inventory.IsOpen() then Inventory.Open();
        WaitUntil(Inventory.IsOpen(), 75, 5000);
        Self.WriteMsg(IntToStr(PlantIndex));
        WaitUntil(not Minimap.IsPlayerMoving(150), 75, 5000);
        Plant := Self.RSW.GetTileMS([PatchArray[PatchIndex][PlantIndex].X-3, PatchArray[PatchIndex][PlantIndex].Y]);
        Plant := Plant.Expand(32);

        //RandPoint := [Plant.Mean.X - SRL.NormalRange(-100,100),Plant.Mean.Y + SRL.NormalRange(0,12)];
        Mouse.HumanMove(Plant.Mean());
        if Self.CanWater then Self.WaterPlant();
        WaitUntil(not Minimap.IsPlayerMoving(), 75, 5000);
        WaitUntil(not Self.Animating(), 75, 4200);

        if DRAW then Self.DisplayMSTile(Plant);
        Self.WritePosition();
        PlantIndex := PlantIndex + 2;

        end else
        begin
        Self.RSW.ScreenWalk := False;
        Self.RSW.WalkBlind(PatchArray[PatchIndex][PlantIndex],2);
        WaitUntil(not Minimap.IsPlayerMoving(), 75, 2400);


        if not Inventory.IsOpen() then Inventory.Open();
        WaitUntil(Inventory.IsOpen(), 75, 5000);
        Self.WriteMsg(IntToStr(PlantIndex));
        WaitUntil(not Minimap.IsPlayerMoving(150), 75, 5000);
        Plant := Self.RSW.GetTileMS([PatchArray[PatchIndex][PlantIndex].X-3, PatchArray[PatchIndex][PlantIndex].Y]);
        Plant := Plant.Expand(32);

        //RandPoint := [Plant.Mean.X - SRL.NormalRange(-100,100),Plant.Mean.Y + SRL.NormalRange(0,12)];
        Mouse.HumanMove(Plant.Mean());
        if Self.CanWater then Self.WaterPlant();
        WaitUntil(not Minimap.IsPlayerMoving(), 75, 5000);
        WaitUntil(not Self.Animating(), 75, 4200);
        if DRAW then Self.DisplayMSTile(Plant);
        Self.WritePosition();
        PlantIndex := PlantIndex + 2;
        //TerminateScript('Time to shutdown Testing');
        end;
        WaitUntil(not Minimap.IsPlayerMoving(), 75, 5200);
      end;
  end;

end;

procedure TScript.WaterEastSide();
var
  PlantIndex, PatchIndex: Int32;
  RandPoint: TPoint;
  Plant: TRectangle;
  PatchArray: array of TPointArray;
begin
  PatchArray := [Self.PatchTileThree, Self.PatchTileFour];

  for PatchIndex:=0 to high(PatchArray) do
  begin
    WaitUntil(not Minimap.IsPlayerMoving(150), 75, 5000);
    Self.WriteMsg('Farm Cycle For Patch: '+IntToStr(PatchIndex));
    for PlantIndex:=1 to high(PatchArray[PatchIndex]) do
    begin
      if MainScreen.IsVisible(Self.RSW.GetTileMS([PatchArray[PatchIndex][PlantIndex].X+3, PatchArray[PatchIndex][PlantIndex].Y]).Mean) then
      begin

        if not Inventory.IsOpen() then Inventory.Open();
        WaitUntil(Inventory.IsOpen(), 75, 5000);
        Self.WriteMsg(IntToStr(PlantIndex));
        WaitUntil(not Minimap.IsPlayerMoving(150), 75, 5000);
        Plant := Self.RSW.GetTileMS([PatchArray[PatchIndex][PlantIndex].X+3, PatchArray[PatchIndex][PlantIndex].Y]);
        Plant := Plant.Expand(32);

        //RandPoint := [Plant.Mean.X - SRL.NormalRange(-100,100),Plant.Mean.Y + SRL.NormalRange(0,12)];
        Mouse.HumanMove(Plant.Mean());
        if Self.CanWater then Self.WaterPlant();
        WaitUntil(not Minimap.IsPlayerMoving(), 75, 5000);
        WaitUntil(not Self.Animating(), 75, 4200);

        if DRAW then Self.DisplayMSTile(Plant);
        Self.WritePosition();
        PlantIndex := PlantIndex + 2;

        end else
        begin
        Self.RSW.ScreenWalk := False;
        Self.RSW.WalkBlind(PatchArray[PatchIndex][PlantIndex],2);
        WaitUntil(not Minimap.IsPlayerMoving(), 75, 2400);


        if not Inventory.IsOpen() then Inventory.Open();
        WaitUntil(Inventory.IsOpen(), 75, 5000);
        Self.WriteMsg(IntToStr(PlantIndex));
        WaitUntil(not Minimap.IsPlayerMoving(150), 75, 5000);
        Plant := Self.RSW.GetTileMS([PatchArray[PatchIndex][PlantIndex].X+3, PatchArray[PatchIndex][PlantIndex].Y]);
        Plant := Plant.Expand(32);

        //RandPoint := [Plant.Mean.X - SRL.NormalRange(-100,100),Plant.Mean.Y + SRL.NormalRange(0,12)];
        Mouse.HumanMove(Plant.Mean());
        if Self.CanWater then Self.WaterPlant();
        WaitUntil(not Minimap.IsPlayerMoving(), 75, 5000);
        WaitUntil(not Self.Animating(), 75, 4200);
        if DRAW then Self.DisplayMSTile(Plant);
        Self.WritePosition();
        PlantIndex := PlantIndex + 2;
        //TerminateScript('Time to shutdown Testing');
        end;
        WaitUntil(not Minimap.IsPlayerMoving(), 75, 5200);
      end;
  end;
end;

procedure TScript.HarvestEastSide();
var
  PlantIndex, PatchIndex: Int32;
  RandPoint: TPoint;
  Plant: TRectangle;
  PatchArray: array of TPointArray;
begin
  PatchArray := [Self.PatchTileThree, Self.PatchTileFour];

  for PatchIndex:=0 to high(PatchArray) do
  begin
    WaitUntil(not Minimap.IsPlayerMoving(150), 75, 5000);
    Self.WriteMsg('Farm Cycle For Patch: '+IntToStr(PatchIndex));
    for PlantIndex:=1 to high(PatchArray[PatchIndex]) do
    begin
      if MainScreen.IsVisible(Self.RSW.GetTileMS([PatchArray[PatchIndex][PlantIndex].X+3, PatchArray[PatchIndex][PlantIndex].Y]).Mean) then
      begin

        if not Inventory.IsOpen() then Inventory.Open();
        WaitUntil(Inventory.IsOpen(), 75, 5000);
        Self.WriteMsg(IntToStr(PlantIndex));
        WaitUntil(not Minimap.IsPlayerMoving(150), 75, 5000);
        Plant := Self.RSW.GetTileMS([PatchArray[PatchIndex][PlantIndex].X+3, PatchArray[PatchIndex][PlantIndex].Y]);
        Plant := Plant.Expand(32);

        //RandPoint := [Plant.Mean.X - SRL.NormalRange(-100,100),Plant.Mean.Y + SRL.NormalRange(0,12)];
        Mouse.HumanMove(Plant.Mean());
        if Self.CanHarvest then Self.HarvestPlant();
        WaitUntil(not Minimap.IsPlayerMoving(), 75, 5000);
        WaitUntil(not Self.Animating(), 75, 4200);

        if DRAW then Self.DisplayMSTile(Plant);
        Self.WritePosition();
        PlantIndex := PlantIndex + 2;

        end else
        begin
        Self.RSW.ScreenWalk := False;
        Self.RSW.WalkBlind(PatchArray[PatchIndex][PlantIndex],2);
        WaitUntil(not Minimap.IsPlayerMoving(), 75, 2400);


        if not Inventory.IsOpen() then Inventory.Open();
        WaitUntil(Inventory.IsOpen(), 75, 5000);
        Self.WriteMsg(IntToStr(PlantIndex));
        WaitUntil(not Minimap.IsPlayerMoving(150), 75, 5000);
        Plant := Self.RSW.GetTileMS([PatchArray[PatchIndex][PlantIndex].X+3, PatchArray[PatchIndex][PlantIndex].Y]);
        Plant := Plant.Expand(32);

        //RandPoint := [Plant.Mean.X - SRL.NormalRange(-100,100),Plant.Mean.Y + SRL.NormalRange(0,12)];
        Mouse.HumanMove(Plant.Mean());
        if Self.CanHarvest then Self.HarvestPlant();
        WaitUntil(not Minimap.IsPlayerMoving(), 75, 5000);
        WaitUntil(not Self.Animating(), 75, 4200);
        if DRAW then Self.DisplayMSTile(Plant);
        Self.WritePosition();
        PlantIndex := PlantIndex + 2;
        //TerminateScript('Time to shutdown Testing');
        end;
        WaitUntil(not Minimap.IsPlayerMoving(), 75, 5200);
      end;
  end;
end;

procedure TScript.HarvestWestSide();
var
  PlantIndex, PatchIndex: Int32;
  RandPoint: TPoint;
  Plant: TRectangle;
  PatchArray: array of TPointArray;
begin
  PatchArray := [Self.PatchTileOne, Self.PatchTileTwo];

  for PatchIndex:=0 to high(PatchArray) do
  begin
    WaitUntil(not Minimap.IsPlayerMoving(150), 75, 5000);
    Self.WriteMsg('Farm Cycle For Patch: '+IntToStr(PatchIndex));
    for PlantIndex:=1 to high(PatchArray[PatchIndex]) do
    begin
      if MainScreen.IsVisible(Self.RSW.GetTileMS([PatchArray[PatchIndex][PlantIndex].X-3, PatchArray[PatchIndex][PlantIndex].Y]).Mean) then
      begin

        if not Inventory.IsOpen() then Inventory.Open();
        WaitUntil(Inventory.IsOpen(), 75, 5000);
        Self.WriteMsg(IntToStr(PlantIndex));
        WaitUntil(not Minimap.IsPlayerMoving(150), 75, 5000);
        Plant := Self.RSW.GetTileMS([PatchArray[PatchIndex][PlantIndex].X-3, PatchArray[PatchIndex][PlantIndex].Y]);
        Plant := Plant.Expand(32);

        //RandPoint := [Plant.Mean.X - SRL.NormalRange(-100,100),Plant.Mean.Y + SRL.NormalRange(0,12)];
        Mouse.HumanMove(Plant.Mean());
        if Self.CanHarvest then Self.HarvestPlant();
        WaitUntil(not Minimap.IsPlayerMoving(), 75, 5000);
        WaitUntil(not Self.Animating(), 75, 4200);

        if DRAW then Self.DisplayMSTile(Plant);
        Self.WritePosition();
        PlantIndex := PlantIndex + 2;

        end else
        begin
        Self.RSW.ScreenWalk := False;
        Self.RSW.WalkBlind(PatchArray[PatchIndex][PlantIndex],2);
        WaitUntil(not Minimap.IsPlayerMoving(), 75, 2400);


        if not Inventory.IsOpen() then Inventory.Open();
        WaitUntil(Inventory.IsOpen(), 75, 5000);
        Self.WriteMsg(IntToStr(PlantIndex));
        WaitUntil(not Minimap.IsPlayerMoving(150), 75, 5000);
        Plant := Self.RSW.GetTileMS([PatchArray[PatchIndex][PlantIndex].X-3, PatchArray[PatchIndex][PlantIndex].Y]);
        Plant := Plant.Expand(32);

        //RandPoint := [Plant.Mean.X - SRL.NormalRange(-100,100),Plant.Mean.Y + SRL.NormalRange(0,12)];
        Mouse.HumanMove(Plant.Mean());
        if Self.CanHarvest then Self.HarvestPlant();
        WaitUntil(not Minimap.IsPlayerMoving(), 75, 5000);
        WaitUntil(not Self.Animating(), 75, 4200);
        if DRAW then Self.DisplayMSTile(Plant);
        Self.WritePosition();
        PlantIndex := PlantIndex + 2;
        //TerminateScript('Time to shutdown Testing');
        end;
        WaitUntil(not Minimap.IsPlayerMoving(), 75, 5200);
      end;
  end;
end;

procedure TScript.FarmCycle(Cycle: String);
begin
  Self.WriteMsg(IntToStr(high(Self.PatchTileOne)));

  if Cycle = 'ALL' then
  begin
    Self.PlantWestSide();
    Self.PlantEastSide();
    WaitUntil(not Self.Animating(), 75, 5000);
    Wait(125,175);

    Self.WaterWestSide();
    Self.WaterEastSide();
    WaitUntil(not Self.Animating(), 75, 5000);
    Wait(125,175);

    Self.WaterWestSide();
    Self.WaterEastSide();
    WaitUntil(not Self.Animating(), 75, 5000);
    Wait(125,175);

    Self.HarvestWestSide();
    Self.HarvestEastSide();

  end;
  TerminateScript('Time to shutdown Testing');





  (*
  //for
    for PlantIndex:=1 to high(Self.PatchTileOne) do
    begin
      RandPoint := RSW.GetTileMS([Self.PatchTileOne[PlantIndex].X - SRL.NormalRange(0,4),Self.PatchTileOne[PlantIndex].Y + SRL.NormalRange(0,6)]).mean;

      // This might cause improper function
      if MainScreen.IsVisible(RandPoint) then
      begin
        if not Inventory.IsOpen() then Inventory.Open();
        WaitUntil(Inventory.IsOpen(), 75, 5000);
        Inventory.ClickSlot(SEEDINVSLOT);


        //Inventory.ClickItem(SEEDTYPE + ' seed');
        Wait(45,75);
        Mouse.HumanMove(RandPoint);
        if MainScreen.IsUpText('patch') then Mouse.Click(MOUSE_LEFT);
        WaitUntil(MainScreen.IsUpText('seedling'), 75, 2400);
        if Self.CanWater then
        begin
        Mouse.Click(MOUSE_LEFT);
        end else
        begin
          //Mouse.HumanMove(RandPoint);
          Mouse.HumanMove(RSW.GetTileMS(Self.PatchTileOne[PlantIndex]).mean);
          if Self.CanWater then Mouse.Click(MOUSE_LEFT);
        end;


        // THESE TWO LINES WITH BE IMPORTANT ONE DAY
        if MainScreen.IsUpText('plant') then if Self.CanHarvest then Mouse.Click(MOUSE_LEFT);
        if MainScreen.IsUpText('plant') then if Self.CanWater then Mouse.Click(MOUSE_LEFT);

        //WaitUntil(not Minimap.IsPlayerMoving(120), 75, 2400);
        //WaitUntil(not SRL.IsAnimating(MainScreen.GetPlayerBox, 45, 224, 3), 75, 2400);

        Self.WriteMsg('Checking if we need to water');

        //if Self.RSW.GetMyPos = Self.PatchTileOne[PlantIndex] then

        Self.WriteMsg(IntToStr(PlantIndex));
        PlantIndex := PlantIndex + 2;
      end else
      begin
        Self.RSW.ScreenWalk := False;
        Self.RSW.WalkBlind(Self.PatchTileOne[PlantIndex],2);
        //Wait(850,1250);
        if not Inventory.IsOpen() then Inventory.Open();
        WaitUntil(Inventory.IsOpen(), 75, 5000);
        Inventory.ClickSlot(SEEDINVSLOT);


        //Inventory.ClickItem(SEEDTYPE + ' seed');
        Wait(45,75);
        Mouse.HumanMove(RandPoint);

        Mouse.Click(MOUSE_LEFT);
        WaitUntil(not Minimap.IsPlayerMoving(120), 75, 4000);
        WaitUntil(not SRL.IsAnimating(MainScreen.GetPlayerBox, 125, 420, 3), 75, 4000);

        Self.WriteMsg('Checking if we need to water');
        if Self.CanWater then
        begin
        Mouse.Click(MOUSE_LEFT);
        end else
        begin
          //Mouse.HumanMove(RandPoint);
          Mouse.HumanMove(RSW.GetTileMS(Self.PatchTileOne[PlantIndex]).mean);
          if Self.CanWater then Mouse.Click(MOUSE_LEFT);

        end;
        //if Self.RSW.GetMyPos = Self.PatchTileOne[PlantIndex] then

        Self.WriteMsg(IntToStr(PlantIndex));
        PlantIndex := PlantIndex + 2;
      end;
    Wait(850,1250);

  end;
  *)
end;
procedure TScript.GrabSeeds();
begin
  if Self.FindSeedTable() then
  begin
    Self.WriteMsg('Found Seed Table!');
    Mouse.Click(MOUSE_LEFT);
    if SEEDTYPE = 'Golovanova' then WaitUntil(Chat.ClickOption('Logavano seed (level 34)',False),105,5000);
    if SEEDTYPE = 'Bologano' then WaitUntil(Chat.ClickOption('Bologano seed (level 54)',False),105,5000);
    if SEEDTYPE = 'Logavano' then WaitUntil(Chat.ClickOption('Logavano seed (level 74)',False),105,5000);
  end;
end;

procedure TScript.Free();
begin
  RSClient.Image.Clear();
  //ReportBG.Free();
  Self.WriteMsg('Thanks for using Jacz'#39's Tithe Farmer!');
end;

procedure TScript.Init();
begin
  Mouse.Speed             := Random(19, 24);
  Mouse.CanIdle           := False;
  Mouse.MissChance        := 7;
  Mouse.Brake             := True;
  Mouse.Distribution      := MOUSE_DISTRIBUTION_GAUSS;
  ItemFinder.Similarity   := 0.998;
  Self.RSW.Setup('TitheFarm');
  Self.RSW.ScreenWalk     := MSWALKING;
  //Self.RSW.OnWalkingEvent := @OnWalkEvent;
  Self.RSW.EnableRunAtEnergy := 85;

  MM2MS.ZoomLevel   := Options.GetZoomLevel();

  Self.EntranceTile :=[127,120];

  Self.PatchTiles := [[156,62], [156,175]];
  Self.SeedTableTile := [[116,107],[112,107]];
//First Patch:
  Self.PatchTileOne := [[150,66],[150,70],[150,74],[150,78],[151,82], [151,87], [151,91], [151,94], [151,98], [151,103], [151,107], [151,110]];
//Second Patch:
  Self.PatchTileTwo := [[152, 127],[152,130], [152,134], [152,139], [152,143],[152,146], [152,150], [152,154], [152,159], [152,163], [152,166], [152,170]];

//Third Patch:
  Self.PatchTileThree := [[163, 170],[163,166], [163,163], [163,159], [163,154],[163,150], [163,146], [163,143], [163,139], [163,134], [163,130], [163,127]];

//Fourth Patch:
  Self.PatchTileFour := [[163,110], [163,107], [163,103], [163,98], [163,94], [163,91], [163,87], [163,82], [163,78], [163,74], [163,70], [163,66]];

  // Cycles ordered from 0 being the first growth phase and 4 being the oldest
  Self.BologanoCycle := CTS2(5937465, 26, 0.63, 0.89);

  //Self.DeclarePlayers();
  Self.ShutdownTime  := (MAXRUNTIME * 60000) + Random(- (MAXRUNTIME * 6000), (MAXRUNTIME * 6000));
  AddOnTerminate(@Self.Free);
end;

procedure TScript.Run();
begin
    if Self.HasSeeds then
    begin
      // Start of the loop since we have seeds
      Self.WriteMsg('Doing things!');
      if Self.RSW.GetMyPos().DistanceTo(Self.SeedTableTile[0]) <= 8 then Self.RunToPatch();
      if Self.RSW.GetMyPos().DistanceTo(Self.PatchTiles[0]) <= 24 then Self.FarmCycle("ALL");
      if Self.RSW.GetMyPos().DistanceTo(Self.EntranceTile) <= 4 then Self.RSW.WebWalk(Self.PatchTiles[0],6);
    end else
    begin
      Self.WriteMsg('Out Of Seeds: Grabbing Seeds!');
      if Self.RSW.GetMyPos().DistanceTo(Self.SeedTableTile[0]) >= 8 then Self.GrabSeeds();
    end;
end;

procedure TScript.Loop();
begin
  Self.FarmCycle("ALL");
  //Plant.Top.Y := Plant.Top.Y + 24;
  //Plant.Top.X := Plant.Top.X + 24;

  //Plant.Btm.Y := Plant.Btm.Y + 24;
  //Plant.Btm.X := Plant.Btm.X + 24;

  //Plant.Left.Y := Plant.Left.Y + 24;
  //Plant.Left.X := Plant.Left.X + 24;

  //Plant.Right.Y := Plant.Right.Y + 24;
  //Plant.Right.X := Plant.Right.X + 24;

  Self.PlantEastSide();
  TerminateScript('D');

  while (getTimeRunning() < Self.ShutdownTime) do
    begin

      Self.WritePosition();
      Self.Run();
      Wait(420,690);
      //ClearDebug();
    end;

end;

begin
  if RSClient.IsLoggedIn() then
    Bot.init();
  Bot.Loop();
end.
