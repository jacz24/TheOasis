program TitheFarmer_V1;
{$DEFINE SRL_USE_REMOTEINPUT_DEBUG}
{$I SRL-F/OSR.simba}

Const
(* General settings *)
  SEEDTYPE = 'Bologano'; // Ex: Golovanova, Bologano, Logavano
  HUMIDIFY = True;
  SEEDINVSLOT = 0; // Slot that ur seeds are in.
  MAXRUNTIME = 6900;     // Max run time (in minutes)

(* Player settings *)
  PNAME        = '';    // Username
  PPASS        = '';    // Password
  PPIN         = '';                // PIN
(* Break settings *)
  BREAKAFTER   = '115'; // Break after how long (in minutes)
  BREAKFOR     = '15';  // Break for how long (in minutes)

  DRAW         = True; // Will Draw on screen boxes around ores and such
  MSWalking    = True;

Type
  TScript = record
  Version                   : String;
  TrueRunTime               : TStopwatch;
  SackTile, WaterBarrel, EntranceTile     : TPoint;
  SeedTableTile, PatchTiles, PatchTileOne, PatchTileTwo, PatchTileThree, PatchTileFour : TPointArray;
  Bologano, Sack, PlantCol, Watered: TCTS2Color;
  RSW                       : TRSWalker;
  ABTimeMod, StartXP        : Int32;
  ShutdownTime              : Int64;
  PatchArray                : array of TPointArray;
  end;

var
  Bot: TScript;

procedure TScript.WriteMsg(Message: String);
begin
  WriteLn('[Bot]: ', Message);
end;

procedure TScript.WritePosition();
begin
  Self.WriteMsg('{X = ' + IntToStr(Self.RSW.GetMyPos().X) + ', Y = ' + IntToStr(Self.RSW.GetMyPos().Y) + '}');
end;

procedure TScript.DeclarePlayers();
begin
  Login.AddPlayer(PNAME, PPASS, PPIN, []);
end;

// Combination of miss mouse + slowing near the target destination
procedure TMouse.HumanMove(Point: TPoint);
var
  mPt: TPoint;
  S: Int32;
  Miss: Double;
  Range: Int64;
begin
  S := Self.Speed;
  Range := Trunc(Power(Self.Position().DistanceTo(Point), 0.80)); // how much possible range to miss
  Miss := SRL.SkewedRand(0.9, 0.1, 1.5); // Where miss will happen. 1 = destination (P).

  mPt.X := Trunc((1-Miss)*Self.Position().X + Miss*Point.X);
  mPt.Y := Trunc((1-Miss)*Self.Position().Y + Miss*Point.Y);

  mPt.X += SRL.NormalRange(-Range, Range);
  mPt.Y += SRL.NormalRange(-Range, Range);

  Self.Move(mPt);
  Self.Speed := round(S*0.85);
  Self.Move(Point);
  Self.Speed := S;
end;

procedure TMouse.RandomMovement();
var
  S: Int32;
begin
  S := Self.Speed;
  Self.Speed := 4;
  Self.Move(Box(Mouse.Position, 75, 75), True, );
  Self.Speed := S;
end;


procedure TScript.DoSkillHover();
begin
  Antiban.HoverSkill(ERSSKILL.MINING, random(1700, 3200), True)
end;

procedure TScript.DoLoseFocus();
Var T: Int32;
begin
  T := SRL.NormalRange(1700,8000);
  Antiban.DebugLn('Losing focus for '+SRL.MsToTime(T, Time_Short));
  Antiban.LoseFocus(T);
end;

procedure TScript.DoLongRest(); // Go AFK For a bit
Var T: Int32;
begin
  T := SRL.NormalRange(32000,128000);
  Antiban.DebugLn('Losing focus for '+SRL.MsToTime(T, Time_Short));
  Antiban.LoseFocus(T);
end;

procedure TScript.SetupAntiban();
begin
  Antiban.AddTask(ONE_SECOND*10, @Mouse.RandomMovement);
  Antiban.AddTask((ONE_MINUTE*4)*Self.ABTimeMod,  @Self.DoLoseFocus);
  Antiban.AddTask(ONE_MINUTE*3,  @Antiban.RandomRotate);
  Antiban.AddTask(ONE_MINUTE*4,  @Antiban.HoverMSItems);
  //Antiban.AddTask(ONE_MINUTE*4,  @Antiban.HoverMSNPCs);
  //Antiban.AddTask(ONE_MINUTE*4,  @Antiban.HoverMSPlayers);
  Antiban.AddTask(ONE_MINUTE*8,  @Self.DoSkillHover);
  Antiban.AddBreak(ONE_MINUTE*18, ONE_SECOND*40, 0.2, 0.0);
end;

procedure TScript.DoAB();
begin
  Antiban.DismissRandom();
  if Antiban.DoAntiban() then
    if (not RSClient.IsLoggedIn) then
      Login.LoginPlayer();
end;

procedure OnWalkEvent(Sender: PRSWalker; Position: TPoint; Destination: TPoint);
begin
  WriteLn('Running!');
  //if (Bot.RSW.GetMyPos().DistanceTo(Bot.BankTile) >= 4) then Bot.FindBank();

  Position    := [];  // For the sake of mitigating compile warnings
  Destination := [];
end;

procedure TScript.DisplayMSTile(Tile: TRectangle; SizeMod: Int32=0);
begin
  if SizeMod > 0 then
    Tile.Expand(SizeMod);
  if MainScreen.Bounds.Contains(Tile.Bounds) then
  begin
    RSClient.Image.Clear(Mainscreen.Bounds);
    RSClient.Image.DrawRect(Tile, clAqua);
  end;
end;

procedure TScript.Report();
begin
  ClearDebug();
  ProgressReport(RESULT_REPORTBOX, 'AIO-Miner', 'Jacz', Self.Version,
  ['Runtime', 'XP Gained', 'Mining For', 'Ore Mined', 'Until Shutdown'],
  [69420, '69', '420','Dope', 'Will']);
  //if Self.ScreenReport then // TODO ADD Drawing reports
  //  Self.DrawReport();
end;


function TScript.HasSeeds(): Boolean;
begin
  if Inventory.IsSlotUsed(0) then
  begin
    Self.WriteMsg('Still have seeds!');
    Exit(True);
  end;
  Exit(False);
end;

function TScript.FindSeedTable(): Boolean;
var
  RandI: Int64;
begin
  Self.WriteMsg('Finding Seed Table!');
  RandI := SRL.NormalRange(0, Self.SeedTableTile.Len());
  Self.WriteMsg(IntToStr(RandI));
  Mouse.HumanMove(Self.RSW.GetTileMS(Self.SeedTableTile[RandI]).Mean);
  if MainScreen.IsUpText(['Seed','table']) then Exit(True);
  Exit(False);
end;

function TScript.FindDoor(): Boolean;
var
  i: Int32;
  ATPA: T2DPointArray;
  DoorFinder: TRSObjectFinder;
begin
  Mouse.HumanMove(Self.RSW.GetTileMS([123,118]).Mean);
  if MainScreen.IsUpText(['Farm','door']) then Exit(True);
  Self.WriteMsg('Looking for Door!');
  ATPA := MainScreen.FindObject(DoorFinder);
  if ATPA.Len < 1 then TerminateScript('No Door Found');
  ATPA.SortByMiddle(Mainscreen.Center);
  // [120,118]
end;

function TScript.FindSack(): Boolean;
begin

end;

function TScript.IsBright(): Boolean;
begin
  if SRL.AvgBrightness(MainScreen.GetPlayerBox) >= 95 then Exit(True);
end;

function TScript.CanWater(): Boolean;
begin
  if MainScreen.IsUpText('Water') then Exit(True);
end;

function TScript.CanHarvest(): Boolean;
begin
  if MainScreen.IsUpText('Harvest') then Exit(True);
end;

function TScript.CanPlant(): Boolean;
begin
  if MainScreen.IsUpText('Use') then Exit(True);
end;

function TScript.IsDead(): Boolean;
begin
  if MainScreen.IsUpText('Clear') then Exit(True);
end;

function TScript.Animating(): Boolean;
begin
  Self.WriteMsg('Checking If Animating');
//if SRL.IsAnimating(MainScreen.GetPlayerBox, 25, 320, 3) then Exit(True);
if SRL.GetPixelShift(MainScreen.GetPlayerBox, 120) > 75 then Exit(True);
Exit(False);
end;

function TScript.IsWatered(Planter: TBox): Boolean;
var
  ATPA: T2DPointArray;
  Water: TRSObjectFinder;
begin
  Water.Colors += Self.Watered;
  ATPA := MainScreen.FindObject(Water, Planter); // Checks the box where the planter should be
  if ATPA.Len < 1 then Exit(False) else
  begin
    Exit(True);
  end;
  Exit(False);
end;

function TScript.IsPlanted(Planter: TBox): Boolean;
var
  ATPA: T2DPointArray;
  Plant: TRSObjectFinder;
begin
  Plant.Colors += CTS2(10597690, 33, 0.24, 1.49); //CTS2(10531436, 22, 0.18, 0.96);//Self.PlantCol;
  ATPA := MainScreen.FindObject(Plant, Planter); // Checks the box where the planter should be
  if ATPA.Len < 1 then Exit(False) else
  begin
    Exit(True);
  end;
  Exit(False);
end;

function TScript.GetPatchArrayPlanter(PatchIndex, PlantIndex, OffsetX, OffsetY: Int32): TRectangle;
begin
  Exit(Self.RSW.GetTileMS([PatchArray[PatchIndex][PlantIndex].X + OffsetX, PatchArray[PatchIndex][PlantIndex].Y + OffsetY])); // For West Sides
end;

function TScript.SelectSeed(): Boolean;
begin
  if not Inventory.IsOpen() then Inventory.Open();
  WaitUntil(Inventory.IsOpen(), 75, 2400);
  while (not Inventory.IsSlotSelected(SEEDINVSLOT)) do
  begin
    if not Inventory.IsSlotSelected(SEEDINVSLOT) then Inventory.ClickSlot(SEEDINVSLOT);
    WaitUntil(Inventory.IsSlotSelected(SEEDINVSLOT),75,1000);
  end;
  if Inventory.IsSlotSelected(SEEDINVSLOT) then Exit(True);
  Exit(False);
end;

function TScript.UpdateMSPatch(PatchIndex, PlantIndex: Int32): TRectangle; // Updates the position of the patch
begin
    if PatchIndex = 0 then Exit(GetPatchArrayPlanter(PatchIndex, PlantIndex, -3,0));
    if PatchIndex = 1 then Exit(GetPatchArrayPlanter(PatchIndex, PlantIndex, -3,0));
    if PatchIndex = 2 then Exit(GetPatchArrayPlanter(PatchIndex, PlantIndex, +3,0));
    if PatchIndex = 3 then Exit(GetPatchArrayPlanter(PatchIndex, PlantIndex, +3,0));
end;

function TScript.WaterPlant(): Boolean;
begin
  Mouse.Click(MOUSE_LEFT);
  Exit(True);
end;
function TScript.HarvestPlant(): Boolean;
begin
  Mouse.Click(MOUSE_LEFT);
  Exit(True);
end;
function TScript.ClearPlant(): Boolean;
begin
  Mouse.Click(MOUSE_LEFT);
  Exit(True);
end;

function TScript.HandlePlanting(): Boolean;
begin
  Self.WriteMsg('Planting!');
  if Self.CanPlant() then
  begin
    Mouse.Click(MOUSE_LEFT);
    Exit(True);
  end;
end;

function TScript.CheckPlant(): Boolean; // If Found A Plant in a planter then check if water or harvest or dead
begin
  Self.WriteMsg('Checking Plant!');
  //if Self.CanPlant then if Self.HandlePlanting() then Exit(True);
  if Self.CanWater then if Self.WaterPlant() then Exit(True);
  if Self.CanHarvest then if Self.HarvestPlant() then Exit(True);
  if Self.IsDead then if Self.ClearPlant() then Exit(True);
  Exit(False);
end;

procedure TScript.HandlePatchMaintenance(PatchIndex: Int32; Increment: Int32 = 2);
var
  PlantIndex: Int32;
  RandPoint: TPoint;
  Plant: TRectangle;
  T: TCountdown;
begin
  for PlantIndex:=1 to high(Self.PatchArray[PatchIndex]) do
  begin
    if not Inventory.FindItem('Watering can(8)') then if HUMIDIFY then Magic.CastSpell(ERSSpell.HUMIDIFY);
    Self.WriteMsg('Handling Plant: '+IntToStr(PlantIndex)+' For Patch: '+IntToStr(PatchIndex));

    // Inital Update Patch
    Plant := Self.UpdateMSPatch(PatchIndex, PlantIndex); // Gets the mainscreen patch
    Plant := Plant.Expand(32);
    RandPoint := SRL.RandomPoint(Plant);
    Self.DisplayMSTile(Plant);

    // Will run to the planter if it is not visible on screen.
    if not MainScreen.IsVisible(RandPoint) then
    begin
      T.Init(SRL.NormalRange(10500,12500));
      while (not T.IsFinished) do
      begin
        Self.RSW.ScreenWalk := False;
        if Self.RSW.WalkBlind(Self.PatchArray[PatchIndex][PlantIndex]) then
        break;

        Plant := Self.UpdateMSPatch(PatchIndex, PlantIndex); // Gets the mainscreen patch
        Plant := Plant.Expand(32);
        RandPoint := SRL.RandomPoint(Plant);
        Self.DisplayMSTile(Plant);
        wait(35, 75);
      end;
    end;

    // Wait To Not Move Before Getting The Next Update
    WaitUntil(not Minimap.IsPlayerMoving(), 75, 5400);
    Plant := Self.UpdateMSPatch(PatchIndex, PlantIndex); // Gets the mainscreen patch
    Plant := Plant.Expand(32);
    RandPoint := SRL.RandomPoint(Plant);
    Self.DisplayMSTile(Plant);
    // if we do not find a plant then lets plant one.
    if not Self.IsPlanted(Plant.Bounds) then
    begin

      Self.WriteMsg('Found Empty Patch! Planting');
      Self.SelectSeed();
      Mouse.HumanMove(RandPoint);
      Self.HandlePlanting();

      // Wait until patch is updated constantly checking
      T.Init(SRL.NormalRange(10500,12500));
      while (not T.IsFinished) do
      begin
        WaitUntil(not Minimap.IsPlayerMoving(500), 75, 4200);
        Plant := Self.UpdateMSPatch(PatchIndex, PlantIndex);
        Plant := Plant.Expand(32);
        if Self.IsPlanted(Plant.Bounds) then break;
        Wait(75,100);
      end;

      // Bugging but is the future TODO!
      //if not SRL.PointInRect(RandPoint, Plant.Left, Plant.Top, Plant.Right, Plant.Btm) then
      //begin
      //  Self.WriteMsg('Mircale its in the circle!');
      //  Mouse.HumanMove(RandPoint);
      //end;

      RandPoint := SRL.RandomPoint(Plant);
      Self.WriteMsg('Player Stopped Moving, Watering!');
      Mouse.HumanMove(RandPoint);
      Self.CheckPlant();
      Plant := Self.UpdateMSPatch(PatchIndex, PlantIndex);
      Plant := Plant.Expand(32);

      if PatchIndex = 3 then Self.WriteMsg('Not doing it fast') else Self.SelectSeed(); // Select fast to save time

      WaitUntil(Self.IsWatered(Plant.Bounds),75,4200);
      //TerminateScript('Good News everyone!');
    end else
    begin
      Plant := Self.UpdateMSPatch(PatchIndex, PlantIndex);
      Plant := Plant.Expand(32);
      if Self.IsPlanted(Plant.Bounds) then
      begin // If Found A Plant in a planter then check if water or harvest or dead
        Self.WriteMsg('Found Plant, Checking!');
        T.Init(SRL.NormalRange(10500,12500));
        while (not T.IsFinished) do
        begin
          // TODO: FIX DOUBLE CLICKING FOR HARVESTING AND WATER
          // ITS FASTER AND PROBABLY BETTER BUT ITS CURRENTLY UNINTENTIONAL
          // MIGHT NEED TO REDO THIS WHOLE PART!
          WaitUntil(not Minimap.IsPlayerMoving(), 75, 4200);
          Mouse.HumanMove(RandPoint);
          Plant := Self.UpdateMSPatch(PatchIndex, PlantIndex);
          Plant := Plant.Expand(32);
          Self.DisplayMSTile(Plant);
          RandPoint := SRL.RandomPoint(Plant);

          if Self.IsWatered(Plant.Bounds) then break;
          if not Self.IsPlanted(Plant.Bounds) then break;

          // Custom handlers

          if not Self.IsWatered(Plant.Bounds) then if Self.CanWater then
          begin
            Plant := Self.UpdateMSPatch(PatchIndex, PlantIndex);
            Plant := Plant.Expand(32);

            if Self.IsWatered(Plant.Bounds) then break;
            Self.WaterPlant();
            WaitUntil(not Minimap.IsPlayerMoving(), 75, 4200);
            if Self.IsWatered(Plant.Bounds) then break;
          end;

          if Self.CanHarvest then
          begin
            Self.HarvestPlant();

            WaitUntil(not Minimap.IsPlayerMoving(), 75, 4200);
            Plant := Self.UpdateMSPatch(PatchIndex, PlantIndex);
            Plant := Plant.Expand(32);
            if not Self.IsPlanted(Plant.Bounds) then break;
          end;
          Wait(75,125);
        end;
    end;
  end;
    Self.DisplayMSTile(Plant);
    PlantIndex := PlantIndex + Increment;

  end;

end;

procedure TScript.GrabSeeds();
begin
  if Self.FindSeedTable() then
  begin
    Self.WriteMsg('Found Seed Table!');
    Mouse.Click(MOUSE_LEFT);
    if SEEDTYPE = 'Golovanova' then WaitUntil(Chat.ClickOption('Logavano seed (level 34)',False),105,5000);
    if SEEDTYPE = 'Bologano' then WaitUntil(Chat.ClickOption('Bologano seed (level 54)',False),105,5000);
    if SEEDTYPE = 'Logavano' then WaitUntil(Chat.ClickOption('Logavano seed (level 74)',False),105,5000);
  end;
end;

procedure TScript.Free();
begin
  RSClient.Image.Clear();
  //ReportBG.Free();
  Self.WriteMsg('Thanks for using Jacz'#39's Tithe Farmer!');
end;

procedure TScript.Init();
begin
  Mouse.Speed             := Random(19, 24);
  Mouse.CanIdle           := False;
  Mouse.MissChance        := 7;
  Mouse.Brake             := True;
  Mouse.Distribution      := MOUSE_DISTRIBUTION_GAUSS;
  ItemFinder.Similarity   := 0.998;
  //Self.RSW.Setup('world');
  Self.RSW.Setup('TitheFarm');
  Self.RSW.ScreenWalk     := MSWALKING;
  //Self.RSW.OnWalkingEvent := @OnWalkEvent;
  Self.RSW.EnableRunAtEnergy := 85;

  MM2MS.ZoomLevel   := Options.GetZoomLevel();

  Self.Bologano := CTS2(9544010, 35, 0.22, 0.81);
  Self.Sack     := CTS2(3633023, 26, 0.06, 0.37); // THIS IS ALSO REALLY GOOD FOR PATCHES
  Self.Watered  := CTS2(5074548, 6, 0.12, 0.81); // Water around plant

  Self.EntranceTile := [127,120];
  Self.SackTile     := [139,114];
  Self.WaterBarrel  := [139,123];

  Self.PatchTiles := [[156,62], [156,175]];
  Self.SeedTableTile := [[116,107],[112,107]];
//First Patch:
  Self.PatchTileOne := [[150,66],[150,70],[150,74],[150,78],[151,82], [151,87], [151,91], [151,94], [151,98], [151,103], [151,107], [151,110]];
//Second Patch:
  Self.PatchTileTwo := [[152, 127],[152,130], [152,134], [152,139], [152,143],[152,146], [152,150], [152,154], [152,159], [152,163], [152,166], [152,170]];

//Third Patch:
  Self.PatchTileThree := [[163, 170],[163,166], [163,163], [163,159], [163,154],[163,150], [163,146], [163,143], [163,139], [163,134], [163,130], [163,127]];

//Fourth Patch:
  Self.PatchTileFour := [[163,110], [163,107], [163,103], [163,98], [163,94], [163,91], [163,87], [163,82], [163,78], [163,74], [163,70], [163,66]];

  Self.PatchArray := [Self.PatchTileOne, Self.PatchTileTwo, Self.PatchTileThree, Self.PatchTileFour];

  //Self.DeclarePlayers();
  Self.ShutdownTime  := (MAXRUNTIME * 60000) + Random(- (MAXRUNTIME * 6000), (MAXRUNTIME * 6000));
  if DRAW then AddOnTerminate(@Self.Free);
end;

//procedure TScript.PlantPatch(PatchNum: Int32);

procedure TScript.Run();
begin
    if Self.HasSeeds then
    begin
      // Start of the loop since we have seeds
      Self.WriteMsg('Doing things!');
      //if Self.RSW.GetMyPos().DistanceTo(Self.SeedTableTile[0]) <= 8 then Self.RunToPatch();
      //if Self.RSW.GetMyPos().DistanceTo(Self.PatchTiles[0]) <= 24 then Self.FarmCycle("ALL");
      if Self.RSW.GetMyPos().DistanceTo(Self.EntranceTile) <= 4 then Self.RSW.WebWalk(Self.PatchTiles[0],6);
    end else
    begin
      Self.WriteMsg('Out Of Seeds: Grabbing Seeds!');
      if Self.RSW.GetMyPos().DistanceTo(Self.SeedTableTile[0]) >= 8 then Self.GrabSeeds();
    end;
end;

procedure TScript.Loop();
begin
  //Self.WriteMsg(IntToStr(Inventory.CountItem('Watering can(8)'))); // Watering can(8)
  // 1,4,7,10
  //Plant := Self.RSW.GetTileMS([Self.PatchTileOne[10].X-4, Self.PatchTileOne[10].Y]);
  //Plant := Plant.Expand(32);
  Self.DisplayMSTile([100,24]);
  TerminateScript('D');

  Self.HandlePatchMaintenance(0);
  Self.HandlePatchMaintenance(1);
  Self.HandlePatchMaintenance(2);
  Self.HandlePatchMaintenance(3);

  Wait(45,75);
  Self.HandlePatchMaintenance(0);
  Self.HandlePatchMaintenance(1);
  Self.HandlePatchMaintenance(2);
  Self.HandlePatchMaintenance(3);
  Wait(45,75);
  Self.HandlePatchMaintenance(0);
  Self.HandlePatchMaintenance(1);
  Self.HandlePatchMaintenance(2);
  Self.HandlePatchMaintenance(3);
  Wait(45,75);
  Self.HandlePatchMaintenance(0);
  Self.HandlePatchMaintenance(1);
  Self.HandlePatchMaintenance(2);
  Self.HandlePatchMaintenance(3);
  (*
  *)
  //Self.WritePosition();
  //
  //if Self.IsPlanted(Plant.Bounds) then Self.WriteMsg('Found Plant!');


  while (getTimeRunning() < Self.ShutdownTime) do
    begin
      Self.WritePosition();
      Self.Run();
      Wait(420,690);
      //ClearDebug();
    end;

end;

begin
  if RSClient.IsLoggedIn() then
    Bot.init();
  Bot.Loop();
end.
