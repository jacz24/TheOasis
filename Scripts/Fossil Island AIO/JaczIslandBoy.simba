{$UNDEF SCRIPT_REVISION}{$DEFINE SCRIPT_REVISION := '1'}

{$IFDEF WINDOWS}{$DEFINE SCRIPT_GUI}{$ENDIF}

program JaczIslandBoy;
{$I SRL-T/OSR.simba}
{$I WaspLib/osr.simba}

begin
  Login.PlayerIndex     := 0;
  StatsPayload.SetUsername('');
end;
type
  ETask = (
    WOODCUTTING_HARDWOOD_TREE_PATCH,
    RUN_HERBIBOAR, // NOT WORKING
    MINE_VOLCANIC_ASH, // Not Working
    HARVEST_SEAWEED, // Not Working
    COLLECT_SEAWEED_SPORES, // Not Working
    DO_EVERYTHING
  );
  ERSTree = (
    TEAK_TREE, MAHOGANY_TREE, SULLIUSCEP_MUSHROOM
  );
  ERSBank = (
    FOSSIL_ISLAND_N, FOSSIL_ISLAND_S, VOLCANIC_MINE
  );
var
  CurrentTask: ETask := ETask.COLLECT_SEAWEED_SPORES;
  DoAlchemy := True;
  PickNests: Boolean := True;
type

  EBaseState = ( // Basic States For All Or Most Scripts
    // Banking States
    OPEN_BANK,

    // Misc States
    WAIT_STATE,
    CLOSE_INTERFACE,
    LEVEL_UP,
    END_SCRIPT,

    OPEN_MAGIC_TAB,
    OPEN_INV_TAB,

    CLOSE_CONTEXT,
    DESELECT_ITEM,

    NO_BASIC
  );

  TBaseScript = record // Handles everything with basic states
    BasicState: EBaseState;
    AgilityLVL: Int32;
    WoodcuttingLVL: Int32;
    HuntingLVL: Int32;


  end;


  EAlchState = ( // States for alch
    WITHDRAW_NATS,
    WITHDRAW_MONEY,

    OPEN_COLLECT,
    HANDLE_COLLECT,

    CHOOSE_SPELL,

    CHOOSE_ITEM,
    HANDLE_WARNING,
    WALK_ALCH,

    OUT_OF_SUPPLIES
  );

  EWoodcuttingState = ( // States for woodcutting
    // WALKING STATES
    USE_NORTH_SHORTCUT,
    USE_SOUTH_SHORTCUT,
    RUN_BANK_N,
    RUN_BANK_S,

    // Woodcutting States
    EQUIP_CUTTING_GEAR,
    PICKUP_NEST,
    CUT_TREE,
    USE_SPEC,
    DEPOSIT_LOGS


  );

  ESporeState = ( // States for finding Spores (Also handles Alch)
    // WALKING STATES
    BOAT_DIVE,
    CLIMB_ROPE,
    PATCH_WALK,

    // Spore Finding States
    PICKUP_SPORE,
    DO_ALCH,
    WITHDRAW_GEAR
  );



  TSporeScript = record(TBaseWalkerScript)
    BaseScript: TBasicScript;
    BasicState: EBasicState;
    State: ESporeState;

    AlchValue: Int32;

    AlchItem: TRSItem;
  end;

  TAlchScript = record(TBaseWalkerScript)
    BasicState: EBasicState;
    State: EAlchState;
  end;

  TWoodcuttingScript = record(TBaseWalkerScript)
    BasicState: EBasicState;
    State: EWoodcuttingState;

    AgilityLVL: Int32; // Transfer this to basic script

    RSBank: TRSObject;
    RSFossilIslandHoleShortcutSouth: TRSObject;
    RSFossilIslandHoleShortcutNorth: TRSObject;
    RSHardwoodTreePatch: TRSObject;

    GearOutfit: TRSItemArray;
    BankList: TRSItemArray;
    DropList: TRSItemArray;
    TreeTimerMultiplier: Int32;
    WoodcuttingGearOutfit: TRSItemArray;

    Woodcutting: Boolean;
    UseBank: Boolean;
    UseShortcut: Boolean;
  end;

  TScriptHandler = record
    ScriptWoodcutting: TWoodcuttingScript;
    ScriptSporeFinding: TSporeScript;
  end;


procedure TScriptHandler.Run(MaxActions: Int32; MaxTime: Int64);
begin
  ClearDebug;

  if CurrentTask = ETask.WOODCUTTING_HARDWOOD_TREE_PATCH then
    Writeln('Hardwood Woodcutting!');
    //ScriptWoodcutting.Run(WLSettings.MaxActions, WLSettings.MaxTime);

  if CurrentTask = ETask.RUN_HERBIBOAR then
    Writeln('Running Herbiboar!');
    //ScriptWoodcutting.Run(WLSettings.MaxActions, WLSettings.MaxTime);

  if CurrentTask = ETask.MINE_VOLCANIC_ASH then
    Writeln('Volcanic Ash Mining!');
    //ScriptWoodcutting.Run(WLSettings.MaxActions, WLSettings.MaxTime);

  if CurrentTask = ETask.HARVEST_SEAWEED then
    Writeln('Harvesting Seaweed!');
    //ScriptWoodcutting.Run(WLSettings.MaxActions, WLSettings.MaxTime);

  if CurrentTask = ETask.COLLECT_SEAWEED_SPORES then
    Writeln('Collecting Seaweed Spores!');
    ScriptSporeFinding.Run(WLSettings.MaxActions, WLSettings.MaxTime);

  if CurrentTask = ETask.DO_EVERYTHING then
    Writeln('Doing A Little Of Everything!');
    //ScriptWoodcutting.Run(WLSettings.MaxActions, WLSettings.MaxTime);
end;


// Spore Finder SCRIPT STARTS BELOW HERE!

function TSporeScript.EndScript: Boolean;
begin
  //if Logout.ClickLogout() then
  TerminateScript('Ending Script! Shutdown');
end;


function TSporeScript.GetBasicState: EBasicState;
begin
  if WL.Activity.IsFinished then
    Exit(EBasicState.END_SCRIPT);


  Exit(EBasicState.NO_BASIC);
end;

function TSporeScript.GetState: ESporeState;
begin
  if 0 = 0 then
    Exit(ESporeState.DO_ALCH);

end;

procedure TSporeScript.RunUnqiueState;
begin
  State := Self.GetState;
  Action := ToStr(State);
  case State of
    ESporeState.DO_ALCH: Self.DoAlch;
  end;
end;

procedure TSporeScript.Init(MaxActions: Int32; MaxTime: Int64); override;
begin
  Name := 'Jacz Fossil Island AIO';
  inherited;

  RSW.Setup([RSRegions.FOSSIL_ISLAND_UNDERWATER]); // needs to be changed

  //if not RSClient.IsLoggedIn then
  //  Login.LoginPlayer;

  if Antiban.BioDice then
    Options.SetNPCAttackOption(ERSAttackOption.HIDDEN)
  else
    Options.SetNPCAttackOption(ERSAttackOption.ALWAYS_RIGHT_CLICK);


  if WLSettings.RemoteInput.ScriptDebug then
  begin
    Writeln('Setup Debug');
  end;
end;

procedure TSporeScript.Run(MaxActions: Int32; MaxTime: Int64);
begin
  Writeln('Starting Spore finder!');
  ClearDebug;
  Self.Init(MaxActions, MaxTime);

  while not Self.ShouldStop do
  begin
    BasicState := Self.GetBasicState;
    case BasicState of
      EBasicState.END_SCRIPT: Self.EndScript;
      EBasicState.NO_BASIC: Self.RunUnqiueState;
    end;


    //PrevInvCount := InvCount;
    Self.DoAntiban;
  end;
end;

procedure TSporeScript.DoAlch();
begin
  Writeln('Alching!');
end;

// WOODCUTTING SCRIPT STARTS BELOW HERE!

procedure TAntiban.Setup; override;
begin
  inherited;

  Antiban.Skills := [ERSSkill.WOODCUTTING, ERSSkill.TOTAL];
  Antiban.MinZoom := 30;
  Antiban.MaxZoom := 59;

end;

function TSRL.IsAnimating(Area:TBox; Shift, WaitTime:UInt32; Iter:UInt32=1): Boolean; override;
var
  i:Int32;
begin
  for i:=1 to Iter do
    if (Self.GetPixelShift(Area, WaitTime) > shift) or XPBar.EarnedXP then
      Exit(True);
end;

function TWoodcuttingScript.IsCutting(): Boolean;
var
  B: TBox := MainScreen.GetPlayerBox;
begin
  Result := Woodcutting := SRL.IsAnimating(B, MainScreen.NormalizeDistance(600), 350, 10 * TreeTimerMultiplier);
end;
function TWoodcuttingScript.WaitCutting(): Boolean;
begin
  if Result := Self.IsCutting then WL.Activity.Restart();
end;

function TWoodcuttingScript.CanUseShortcut: Boolean;
begin
  if MainScreen.HasInterface then
    MainScreen.CloseInterface();

  UseShortcut := False; // Check if you can use shortcut
  AgilityLVL := Stats.GetCurrentLevel(ERSSkill.AGILITY);
  Result := AgilityLVL >= 70;
end;

procedure TWoodcuttingScript.SetupWoodcutting;
begin
  Writeln('Setting up Woodcutting');
  TreeTimerMultiplier := 1;
  GearOutfit := [
    'Lumberjack hat',
    'Lumberjack top',
    'Lumberjack legs',
    'Lumberjack boots',
    'Strung rabbit foot'
  ];

  DropList := [
    'Logs', 'Oak logs', 'Willow logs', 'Teak logs', 'Maple logs',
    'Mahogany logs', 'Yew logs', 'Blisterwood logs', 'Magic logs'
  ];

  BankList := DropList;

  // Setup South Fossil Island Bank
  RSBank := RSObjects.BankChestFossilIsland;
  //Debug(RSBank);

  RSHardwoodTreePatch.Setup(12, [[9256, 955], [9232, 963]]);
  RSHardwoodTreePatch.Setup(['Tea']);
  RSHardwoodTreePatch.Finder.Colors += CTS2(5214845, 18, 0.03, 0.43);
  //RSHardwoodTreePatch.Finder.Colors += CTS2(5480070, 16, 0.04, 0.54);

  //RSHardwoodTreePatch.Finder.Colors += CTS2(7184829, 16, 0.03, 0.95);
  //RSHardwoodTreePatch.Finder.Colors += CTS2(3497320, 7, 0.26, 0.33);
  RSHardwoodTreePatch.Finder.MinShortSide := 30;
  //Debug(RSHardwoodTreePatch);

  //RSHardwoodTreePatch.Click();

end;

procedure TWoodcuttingScript.Init(MaxActions: Int32; MaxTime: Int64); override;
begin
  Name := 'Jacz Fossil Island AIO';
  inherited;

  RSW.Setup([RSRegions.FOSSIL_ISLAND]);

  if not RSClient.IsLoggedIn then
    Login.LoginPlayer;

  // Self.CanUseShortcut
  UseShortcut := True; // For testing
  UseBank := True;
  if UseShortcut then
  begin
    UseShortcut := True;
    if UseShortcut then
      Writeln('Using Shortcut!');

    RSFossilIslandHoleShortcutNorth := RSObjects.FossilIslandHoleShortcutNorth;
    RSFossilIslandHoleShortcutSouth := RSObjects.FossilIslandHoleShortcutSouth;
  end;

  Self.SetupWoodcutting;

  if Antiban.BioDice then
    Options.SetNPCAttackOption(ERSAttackOption.HIDDEN)
  else
    Options.SetNPCAttackOption(ERSAttackOption.ALWAYS_RIGHT_CLICK);


  if WLSettings.RemoteInput.ScriptDebug then
  begin
    DebugObjectArray += RSHardwoodTreePatch;
    DebugObjectArray += RSBank;
    DebugObjectArray += RSFossilIslandHoleShortcutNorth;
    DebugObjectArray += RSFossilIslandHoleShortcutSouth;
  end;
end;



function TWoodcuttingScript.Deposit: Boolean;
begin
  WaitUntil(Bank.IsOpen, 500, 10000);
  Bank.DepositAll();
  Writeln('Depositing');
  TotalActions += 1;
end;

function TWoodcuttingScript.InterfaceHandler: Boolean;
begin
  if Bank.IsOpen() and Inventory.ContainsAny(BankList) then
      Self.Deposit;
  MainScreen.CloseInterface;
end;

function TWoodcuttingScript.UseNorthShortcut: Boolean
begin
  WriteLn('Taking North Shortcut');
  RSFossilIslandHoleShortcutNorth.WalkClick;
  Minimap.WaitPlayerMoving();
  WaitUntil(RSW.AtTile(RSFossilIslandHoleShortcutSouth.Coordinates.First, 12), 250, 5000);
  WriteLn('Short Cut Taken!');
end;

function TWoodcuttingScript.UseSouthShortcut: Boolean
begin
  WriteLn('Taking South Shortcut');
  //RSW.WalkBlind(RSFossilIslandHoleShortcutSouth.Coordinates.First);
  RSFossilIslandHoleShortcutSouth.WalkClick;
  Minimap.WaitPlayerMoving();
  WaitUntil(RSW.AtTile(RSFossilIslandHoleShortcutNorth.Coordinates.First, 12), 250, 5000);
  WriteLn('Short Cut Taken!');
end;

function TWoodcuttingScript.CutTree(): Boolean;
begin
  WriteLn('Cutting Tree');
  if (UseBank and RSHardwoodTreePatch.WalkClick) or RSHardwoodTreePatch.Click then
  begin
    Minimap.WaitMoving;
    Result := Woodcutting := True;
  end;
end;

function TWoodcuttingScript.OpenBank(): Boolean;
begin
  WriteLn('Running/Openning Bank');
  if (UseBank and RSBank.WalkClick) or RSBank.Click then
  begin
    Minimap.WaitMoving;
    WaitUntil(Bank.IsOpen, 500, 10000);
    //Result := Woodcutting := True;
  end;
end;

function TWoodcuttingScript.CheckNest(): Boolean;
begin
  Result := PickNests and RSGroundItems.BirdNest.Find();
end;

function TWoodcuttingScript.PickNest(): Boolean;
begin
  if Result := RSGroundItems.BirdNest.Click(True, 0) then
  begin
    Woodcutting := False;
    Wait(800);
    Minimap.WaitPlayerMoving(300, 8000);
    Wait(300);
  end;
end;

function TWoodcuttingScript.EndScript: Boolean;
begin
  if Logout.ClickLogout() then
    TerminateScript('Ending Script! Shutdown');
end;

function TWoodcuttingScript.GetState: EWoodcuttingState;
begin
    if Inventory.IsFull then
    begin
      WriteLn('Inventory is full!');
      Woodcutting := False;
      if Bank.IsOpen then
        Exit(EWoodcuttingState.DEPOSIT_LOGS);

      if not Bank.IsOpen then
        if RSW.AtTile(RSHardwoodTreePatch.Coordinates.First, 12) then
          Exit(EWoodcuttingState.USE_NORTH_SHORTCUT);

    end;

    if RSW.AtTile(RSBank.Coordinates, 32) then
      Exit(EWoodcuttingState.USE_SOUTH_SHORTCUT);

    if RSW.AtTile(RSFossilIslandHoleShortcutSouth.Coordinates.First, 12) then
      Exit(EWoodcuttingState.USE_SOUTH_SHORTCUT);

    if Self.CheckNest() then
      Exit(EWoodcuttingState.PICKUP_NEST);

    if Minimap.IsSpecWeapon() and (Minimap.GetSpecLevel = 100) then
      Exit(EWoodcuttingState.USE_SPEC);

    if not Inventory.IsFull then
      Exit(EWoodcuttingState.CUT_TREE);


end;

function TWoodcuttingScript.GetBasicState: EBasicState;
begin
  if WL.Activity.IsFinished then
    Exit(EBasicState.END_SCRIPT);

  if Woodcutting then
    Exit(EBasicState.WAIT_STATE);

  if not Bank.IsOpen then
  begin
      if RSW.AtTile(RSFossilIslandHoleShortcutSouth.Coordinates.First, 16) then
        Exit(EBasicState.OPEN_BANK);
      if RSW.AtTile(RSBank.Coordinates.First, 42) then
        Exit(EBasicState.OPEN_BANK);
  end;

  if Chat.LeveledUp then
  begin
    Woodcutting := False;
    Exit(EBasicState.LEVEL_UP);
  end;

  if MainScreen.HasInterface() then
    Exit(EBasicState.CLOSE_INTERFACE);



  Exit(EBasicState.NO_BASIC);
end;

procedure TWoodcuttingScript.RunUniqueState; // Unique States
begin
    State := Self.GetState;
    Action := ToStr(State);
    case State of
      EWoodcuttingState.CUT_TREE: Self.CutTree;
      EWoodcuttingState.USE_NORTH_SHORTCUT: Self.UseNorthShortcut;
      EWoodcuttingState.USE_SOUTH_SHORTCUT: Self.UseSouthShortcut;
      EWoodcuttingState.PICKUP_NEST: Self.PickNest();
      EWoodcuttingState.USE_SPEC: Minimap.EnableSpec(100);
      EWoodcuttingState.DEPOSIT_LOGS: Self.Deposit;
      EWoodcuttingState.RUN_BANK_S: RSW.WalkBlind(RSBank.Coordinates.First)
    end;
end;

procedure TWoodcuttingScript.Run(MaxActions: Int32; MaxTime: Int64);
begin
  ClearDebug;
  Self.Init(MaxActions, MaxTime);

  while not Self.ShouldStop do
  begin
    BasicState := Self.GetBasicState;
    Action := ToStr(State);
    case BasicState of
      EBasicState.WAIT_STATE: Self.WaitCutting;
      EBasicState.LEVEL_UP: Chat.HandleLevelUp;
      EBasicState.OPEN_BANK: Self.OpenBank();
      EBasicState.END_SCRIPT: Self.EndScript;
      EBasicState.CLOSE_INTERFACE: Self.InterfaceHandler;
      EBasicState.NO_BASIC: Self.RunUniqueState;
    end;

    //PrevInvCount := InvCount;
    Self.DoAntiban;
  end;
end;
// END OF WOODCUTTING SCRIPT!

// GUI Handler
var
  ScriptHandler: TScriptHandler; // HANDLES ALL

type
  TConfig = record(TScriptForm)
    ActivitySelector: TLabeledCombobox;
    AlchState: TCheckBox;
  end;

procedure TConfig.StartScript(Sender: TObject);
begin
  Self.Init(Sender);

  CurrentTask := ETask(ActivitySelector.Combobox.getItemIndex);
  DoAlchemy := Self.AlchState.IsChecked();

end;

procedure TConfig.Setup; override;
begin
  inherited;

  with ActivitySelector do
  begin
    Create(Self.SSPanel.Panel);
    SetCaption('Activity:');
    SetLeft(5);
    SetTop(35);
    SetWidth(200);
    Combobox.setStyle(csDropDownList);
    AddItem('Hardwood Tree Patch');
    AddItem('Mine Volcanic Ash');
    AddItem('Herbiboar');
    AddItem('Farm Seaweed');
    AddItem('Collect Seaweed Spores');
    AddItem('Everything!'); // This should always be last
    Combobox.setItemIndex(Ord(CurrentTask));
  end;

  with Self.AlchState do
  begin
    Create(Self.SSPanel.Panel);
    SetCaption('High alchemy');
    SetLeft(Self.ActivitySelector.GetLeft() + Self.ActivitySelector.GetWidth() + 15);
    SetTop(Self.ActivitySelector.GetTop() + 20);
    SetWidth(50);
    SetHeight(10);
    SetChecked(DoAlchemy);
  end;

  Self.WLPanel.StartButton.setOnClick(@Self.StartScript);
end;

procedure TConfig.Run; override;
begin
  Self.Setup;

  inherited;
end;

var
  Config: TConfig;

begin
  {$IFDEF SCRIPT_GUI}
  Sync(@Config.Run);
  {$ENDIF}

  Writeln('Running Island Boy Task: ' + ToStr(CurrentTask) + ' With Alchemy: ' + BoolToStr(DoAlchemy));

  // Basic Logic Handler

  ScriptHandler.Run(WLSettings.MaxActions, WLSettings.MaxTime);
end.
