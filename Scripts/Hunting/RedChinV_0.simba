program RedChin_V1;
{$UNDEF SCRIPT_REVISION}{$DEFINE SCRIPT_REVISION := '1'}
{$IFDEF WINDOWS}{$DEFINE SCRIPT_GUI}{$ENDIF}
{$I SRL-F/OSR.simba}
{$I WaspLib/osr.simba}
Const
(* General settings *)
  MAXRUNTIME = 6900;     // Max run time (in minutes)
  NUMTRAPS   = 5;        // Number of traps you can use
  SPOT       = 0;        // What Spot 0-4
(* Player settings *)
  PNAME        = '';    // Username
  PPASS        = '';    // Password
  PPIN         = '';                // PIN
(* Break settings *)
  BREAKAFTER   = '115'; // Break after how long (in minutes)
  BREAKFOR     = '15';  // Break for how long (in minutes)

  DRAW         = False; // Will Draw on screen boxes around ores and such
  MSWalking    = True;

Type
  TScript = record
  Version                   : String;
  TrueRunTime               : TStopwatch;
  SpotOne, SpotTwo          : TPointArray;
  BoxTrapCol, ActiveBoxTrapCol, TrappedBoxTrapCol, FailedBoxTrapCol                : TCTS2Color;
  RSW                       : TRSWalker;
  ABTimeMod, StartXP        : Int32;
  ShutdownTime              : Int64;
  TileTable                 : array of TPointArray;
  end;

var
  Bot: TScript;

procedure TScript.WriteMsg(Message: String);
begin
  WriteLn('[Bot]: ', Message);
end;

procedure TScript.WritePosition();
begin
  Self.WriteMsg('{X = ' + IntToStr(Self.RSW.GetMyPos().X) + ', Y = ' + IntToStr(Self.RSW.GetMyPos().Y) + '}');
end;

procedure TScript.DeclarePlayers();
begin
  Login.AddPlayer(PNAME, PPASS, PPIN, []);
end;

// Combination of miss mouse + slowing near the target destination
procedure TMouse.HumanMove(Point: TPoint);
var
  mPt: TPoint;
  S: Int32;
  Miss: Double;
  Range: Int64;
begin
  S := Self.Speed;
  Range := Trunc(Power(Self.Position().DistanceTo(Point), 0.80)); // how much possible range to miss
  Miss := SRL.SkewedRand(0.9, 0.1, 1.5); // Where miss will happen. 1 = destination (P).

  mPt.X := Trunc((1-Miss)*Self.Position().X + Miss*Point.X);
  mPt.Y := Trunc((1-Miss)*Self.Position().Y + Miss*Point.Y);

  mPt.X += SRL.NormalRange(-Range, Range);
  mPt.Y += SRL.NormalRange(-Range, Range);

  Self.Move(mPt);
  Self.Speed := round(S*0.85);
  Self.Move(Point);
  Self.Speed := S;
end;

procedure TMouse.RandomMovement();
var
  S: Int32;
begin
  S := Self.Speed;
  Self.Speed := 4;
  Self.Move(Box(Mouse.Position, 75, 75), True, );
  Self.Speed := S;
end;


procedure TScript.DoSkillHover();
begin
  Antiban.HoverSkill(ERSSKILL.HUNTER, random(1700, 3200), True)
end;

procedure TScript.DoLoseFocus();
Var T: Int32;
begin
  T := SRL.NormalRange(1700,6969);
  Antiban.DebugLn('Losing focus for '+SRL.MsToTime(T, Time_Short));
  Antiban.LoseFocus(T);
end;

procedure TScript.DoLongRest(); // Go AFK For a bit
Var T: Int32;
begin
  T := SRL.NormalRange(32000,128000);
  Antiban.DebugLn('Losing focus for '+SRL.MsToTime(T, Time_Short));
  Antiban.LoseFocus(T);
end;

procedure TScript.SetupAntiban();
begin
  Antiban.AddTask(ONE_SECOND*10, @Mouse.RandomMovement);
  Antiban.AddTask(ONE_MINUTE*3,  @Antiban.RandomRotate);

  //Antiban.AddTask(ONE_MINUTE*10,  @Self.DoLoseFocus);

  //Antiban.AddTask(ONE_MINUTE*4,  @Antiban.HoverMSItems);
  //Antiban.AddTask(ONE_MINUTE*4,  @Antiban.HoverMSNPCs);
  //Antiban.AddTask(ONE_MINUTE*4,  @Antiban.HoverMSPlayers);
  Antiban.AddTask(ONE_MINUTE*24,  @Self.DoSkillHover);
  //sssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssAntiban.AddBreak(ONE_MINUTE*18, ONE_SECOND*40, 0.2, 0.0);
end;

procedure TScript.DoAB();
begin
  Antiban.DismissRandom();
  if Antiban.DoAntiban() then
    if (not RSClient.IsLoggedIn) then
      Login.LoginPlayer();
end;

procedure OnWalkEvent(Sender: PRSWalker; Position: TPoint; Destination: TPoint);
begin
  WriteLn('Running!');
  //if (Bot.RSW.GetMyPos().DistanceTo(Bot.BankTile) >= 4) then Bot.FindBank();

  Position    := [];  // For the sake of mitigating compile warnings
  Destination := [];
end;

procedure TScript.DisplayMSTile(Tile: TRectangle; SizeMod: Int32=0);
begin
  if SizeMod > 0 then
    Tile.Expand(SizeMod);
  if MainScreen.Bounds.Contains(Tile.Bounds) then
  begin
    RSClient.Image.Clear(Mainscreen.Bounds);
    RSClient.Image.DrawRect(Tile, clAqua);
  end;
end;

function TScript.Animating(): Boolean;
begin
//Self.WriteMsg('Checking If Animating');
//if SRL.IsAnimating(MainScreen.GetPlayerBox, 25, 320, 3) then Exit(True);
  //if SRL.GetPixelShift(MainScreen.GetPlayerBox, 224) > 420 then Exit(True);
  if SRL.IsAnimating(MainScreen.GetPlayerBox,60, 120) then Exit(True) else Exit(False);
end;

function TScript.FindTrapFailed(Tile: TBox): Boolean;
var
  i: Int32;
  ATPA: T2DPointArray;
  BoxTrap: TRSObjectFinder;
begin
  BoxTrap.Colors += [Self.BoxTrapCol, Self.FailedBoxTrapCol];
  BoxTrap.ClusterDistance := 4;
  ATPA := MainScreen.FindObject(BoxTrap, Tile); // Checks the box where the planter should be
  if ATPA.Len < 1 then Exit(False);
  ATPA.SortByMiddle(Mainscreen.Center);

  for i:=0 to min(4, high(ATPA)) do
  begin
    Mouse.HumanMove(ATPA[i].Mean());
    if MainScreen.IsUpText(['Re', 'set']) then Exit(True);
  end;
  Exit(False);
end;

function TScript.FindTrapActive(Tile: TBox): Boolean;
var
  i: Int32;
  ATPA: T2DPointArray;
  BoxTrap: TRSObjectFinder;
begin
  BoxTrap.Colors += [Self.BoxTrapCol, Self.ActiveBoxTrapCol];
  BoxTrap.ClusterDistance := 4;
  ATPA := MainScreen.FindObject(BoxTrap, Tile); // Checks the box where the planter should be
  if ATPA.Len < 1 then Exit(False);
  ATPA.SortByMiddle(Mainscreen.Center);

  for i:=0 to min(4, high(ATPA)) do
  begin
    Mouse.HumanMove(ATPA[i].Mean());
    if MainScreen.IsUpText(['Dis', 'mantle']) then Exit(True);
  end;
  Exit(False);
end;

function TScript.FindTrapTrapped(Tile: TBox): Boolean;
var
  i: Int32;
  ATPA: T2DPointArray;
  BoxTrap: TRSObjectFinder;
begin
  BoxTrap.Colors += [Self.BoxTrapCol, Self.TrappedBoxTrapCol];
  BoxTrap.ClusterDistance := 4;
  ATPA := MainScreen.FindObject(BoxTrap, Tile); // Checks the box where the planter should be
  if ATPA.Len < 1 then Exit(False);
  ATPA.SortByMiddle(Mainscreen.Center);

  for i:=0 to min(4, high(ATPA)) do
  begin
    Mouse.HumanMove(ATPA[i].Mean());
    if MainScreen.IsUpText(['Re', 'set']) then Exit(True);
  end;
  Exit(False);
end;
function TScript.FindBoxTrap(Tile: TBox): Boolean;
var
  i: Int32;
  ATPA: T2DPointArray;
  BoxTrap: TRSObjectFinder;
begin
  BoxTrap.Colors += Self.BoxTrapCol;
  BoxTrap.ClusterDistance := 4;
  ATPA := MainScreen.FindObject(BoxTrap, Tile); // Checks the box where the planter should be
  if ATPA.Len < 1 then Exit(False);
  ATPA.SortByMiddle(Mainscreen.Center);

  for i:=0 to min(4, high(ATPA)) do
  begin
    Mouse.HumanMove(ATPA[i].Mean());
    if MainScreen.IsUpText(['La', 'ay']) then Exit(True);
  end;
  Exit(False);
end;

function TScript.IsFailed(Tile: TBox): Boolean;
var
  ATPA: T2DPointArray;
  BoxTrap: TRSObjectFinder;
begin
  BoxTrap.Colors += Self.FailedBoxTrapCol;
  ATPA := MainScreen.FindObject(BoxTrap, Tile); // Checks the box where the planter should be
  if ATPA.Len < 1 then Exit(False) else
  begin
    Exit(True);
  end;
  Exit(False);
end;

function TScript.IsActive(Tile: TBox): Boolean;
var
  ATPA: T2DPointArray;
  BoxTrap: TRSObjectFinder;
begin
  BoxTrap.Colors += Self.ActiveBoxTrapCol;
  ATPA := MainScreen.FindObject(BoxTrap, Tile); // Checks the box where the planter should be
  if ATPA.Len < 1 then Exit(False) else
  begin
    Exit(True);
  end;
  Exit(False);
end;
function TScript.IsTrapped(Tile: TBox): Boolean;
var
  ATPA: T2DPointArray;
  BoxTrap: TRSObjectFinder;
begin
  BoxTrap.Colors += Self.TrappedBoxTrapCol;
  ATPA := MainScreen.FindObject(BoxTrap, Tile); // Checks the box where the planter should be
  if ATPA.Len < 1 then Exit(False) else
  begin
    Exit(True);
  end;
  Exit(False);
end;

function TScript.IsTrapPlaced(Tile: TBox): Boolean;
var
  ATPA: T2DPointArray;
  BoxTrap: TRSObjectFinder;
begin
  BoxTrap.Colors += Self.BoxTrapCol;
  ATPA := MainScreen.FindObject(BoxTrap, Tile); // Checks the box where the planter should be
  if ATPA.Len < 1 then Exit(False) else
  begin
    Exit(True);
  end;
  Exit(False);
end;


procedure TScript.Free();
begin
  RSClient.Image.Clear();
  //ReportBG.Free();
  Self.WriteMsg('Thanks for using Jacz'#39's Chin Farmer!');
end;

procedure TScript.Init();
begin
  Mouse.Speed             := Random(19, 24);
  Mouse.CanIdle           := False;
  Mouse.MissChance        := 7;
  Mouse.Brake             := True;
  Mouse.Distribution      := MOUSE_DISTRIBUTION_GAUSS;
  ItemFinder.Similarity   := 0.998;
  Self.RSW.Setup('Fel');
  Self.RSW.ScreenWalk     := MSWALKING;
  //Self.RSW.OnWalkingEvent := @OnWalkEvent;
  Self.RSW.EnableRunAtEnergy := 85;

  MM2MS.ZoomLevel   := Options.GetZoomLevel();
  //Self.RSW.Min
  Self.BoxTrapCol   := CTS2(6323854, 11, 0.05, 0.34); //CTS2(6916249, 8, 0.05, 0.47) // Box trap color
  Self.ActiveBoxTrapCol := CTS2(1952205, 8, 0.14, 3.27); // Yellow Runelite Col
  Self.FailedBoxTrapCol := CTS2(3366334, 10, 0.51, 4.24); // Red Runelite Col
  Self.TrappedBoxTrapCol := CTS2(3055692, 20, 0.23, 2.26); // Red Runelite Col
                    //  BTMLEFT    BTMRIGHT  TOPRIGHT  Middle   TOP LEFT
  //Self.SpotOne      := [[116,163],[107,163],[107,170],[112,166],[116,170]];

  //                   //  BTMLEFT    BTMRIGHT  TOPRIGHT  Middle   TOP LEFT
  //Self.SpotOne      := [[101,60],[94,60],[94,68],[96,64],[96,68]];

                        //  BTMLEFT    BTMRIGHT  TOPRIGHT  TOP LEFT  Middle
  Self.SpotOne      := [[109,100],[100,100],[100,107],[109,107],[103,103]];

  Self.SpotTwo      := [[107,163],[98,161],[98,170],[103,170],[103,166]];
  Self.TileTable    := [Self.SpotOne, Self.SpotTwo];

  Self.DeclarePlayers();

  Self.SetupAntiban();
  Self.ShutdownTime  := (MAXRUNTIME * 60000) + Random(- (MAXRUNTIME * 6000), (MAXRUNTIME * 6000));
  if DRAW then AddOnTerminate(@Self.Free);
end;

function TScript.GetBoxTrapState(Tile: TBox): String;
begin
  if Self.IsTrapPlaced(Tile) then
  begin
    if Self.IsActive(Tile) then Exit('ACTIVE');
    if Self.IsFailed(Tile) then Exit('FAILED');
    if Self.IsTrapped(Tile) then Exit('TRAPPED');
    Exit('PLACING');
  end else Exit('NOTPLACED');
  Exit('NOSTATE');

end;

//function TRSWalker.AtTile(Tile: TPoint; Distance: Int32 = 15): Boolean;
//begin
  //Result := Self.RSW.GetMyPos.DistanceTo(Tile) <= Distance;
//end;
(*

      if state = 'TRAPPED' then
      begin
        if (not Self.Animating()) and (Self.FindTrapTrapped(self.RSW.GetTileMS(Self.TileTable[0][i]).Bounds)) then
        begin
          Mouse.Click(MOUSE_LEFT);
          if WaitUntil(MainScreen.DidRedClick,60,690) then WaitUntil(Self.IsActive(Self.RSW.GetTileMS(Self.RSW.GetMyPos).Bounds), 75, 4200);
        end else Self.WriteMsg('Found TRAPPED But Currently Animating');
        Exit;
      end;
      if state = 'FAILED' then
      begin
        if (not Self.Animating()) and (Self.FindTrapFailed(self.RSW.GetTileMS(Self.TileTable[0][i]).Bounds)) then
        begin
        Mouse.Click(MOUSE_LEFT);
        if WaitUntil(MainScreen.DidRedClick,60,690) then WaitUntil(Self.IsActive(Self.RSW.GetTileMS(Self.RSW.GetMyPos).Bounds), 75, 4200);
        end else Self.WriteMsg('Found FAILED But Currently Animating');
        Exit;
      end;

      if (state = 'PLACING') and (Self.RSW.GetMyPos() <> Self.TileTable[0][i])  then
      begin
        if (not Self.Animating()) and (Self.FindBoxTrap(self.RSW.GetTileMS(Self.TileTable[0][i]).Bounds)) then
        begin
          Mouse.Click(MOUSE_LEFT);
          if WaitUntil(MainScreen.DidRedClick,60,690) then WaitUntil(Self.IsActive(Self.RSW.GetTileMS(Self.RSW.GetMyPos).Bounds), 75, 4200);
        end else Self.WriteMsg('Found PLACED But Currently Animating');
        Exit;
      end;

      if (state = 'NOTPLACED') then // Pk,ace
      begin
        if Self.RSW.GetMyPos() <> Self.TileTable[0][i] then
        begin
          if MainScreen.IsVisible(Self.RSW.GetTileMS(Self.TileTable[0][i]).Mean) then
          begin
            if not Self.RSW.GetMyPos().InRect
            Mouse.HumanMove(Self.RSW.GetTileMS(Self.RSW.GetMyPos).Mean);
            Mouse.Click(MOUSE_LEFT);
          end else Self.RSW.WalkBlind(Self.TileTable[0][i], 0);
          //if RSW.GEt Self.RSW.GetMyPos() <> Self.TileTable[0][i] then Exit;

          if not Self.Animating() then
          begin
            Inventory.ClickItem('Box Trap');
            WaitUntil(Self.IsActive(Self.RSW.GetTileMS(Self.RSW.GetMyPos).Bounds), 75, 4200);
          end else Self.WriteMsg('FOUND NOTPLACED But Currently Animating');
        end;
      end;

      *)
function TScript.PlayerOnTile(PlayerPos, TilePos: TPoint): Boolean;
var
  PlayerTile, MSTile: TRectangle;
begin
  PlayerTile := Self.RSW.GetTileMS(PlayerPos);
  MSTile   := Self.RSW.GetTileMS(TilePos);
  if (MainScreen.GetPlayerBox.Contains(MSTile.Mean)) and (MSTile.Contains(PlayerTile.Mean)) or (PlayerPos = TilePos) then Exit(True);
end;

function TScript.PlaceTrap(TrapPos: TPoint): Boolean;
begin
  Self.WriteMsg('Placing Trap!');
  Inventory.ClickItem('Box Trap');
  if WaitUntil(Self.IsActive(Self.RSW.GetTileMS(TrapPos).Bounds), 75, 4200) then Exit(True);
  Exit(False);
end;

function TScript.ResetTrap(TrapPos: TPoint): Boolean;
var
  TrapTile: TRectangle;
begin
  Self.WriteMsg('Resetting Trap!');
  TrapTile   := Self.RSW.GetTileMS(TrapPos);
  if Self.IsFailed(TrapTile.Bounds) then if Self.FindTrapFailed(TrapTile.Bounds) then Mouse.Click(MOUSE_LEFT) else Exit(False);
  if Self.IsTrapped(TrapTile.Bounds) then if Self.FindTrapTrapped(TrapTile.Bounds) then Mouse.Click(MOUSE_LEFT) else Exit(False);
  WaitUntil(MainScreen.DidRedClick(),75,400);
  WaitUntil(Minimap.IsPlayerMoving(),75, 1000);
  WaitUntil(not Minimap.IsPlayerMoving(), 75,4000);

  if not Minimap.IsPlayerMoving() then
  begin
    WaitUntil(Self.PlayerOnTile(Self.RSW.GetMyPos, TrapPos),75,690);
    WaitUntil(Self.IsActive(Self.RSW.GetTileMS(TrapPos).Bounds), 75, 4200);
    WaitUntil(Minimap.IsPlayerMoving(), 75,1000);
    WaitUntil(not Minimap.IsPlayerMoving(), 75,1000);
    //
    Exit(True);
  end;
  Exit(False);
end;

procedure TScript.Run();
var
  i: Int32;
  state: string;
  PlayerPos, TrapPos: TPoint;
  PlayerTile, TrapTile: TRectangle;
begin
// UPtext: 'Dismantle Box Trap' if its active
// 'Reset Box Trap' if failed or trapped
  for i:=0 to high(Self.TileTable[SPOT]) do // Loop through first patch if first patch selected
  begin
    if (NUMTRAPS = 4) and (i = 4) then Exit;
    if (NUMTRAPS = 3) and (i = 3) then Exit;
    if (NUMTRAPS = 2) and (i = 2) then Exit;
      //Self.WriteMsg('Looking At Tile Spot: ' + IntToStr(i + 1) + ' X: ' + IntToStr(Self.TileTable[SPOT][i].X) + ' Y: ' +  IntToStr(Self.TileTable[SPOT][i].Y));
    PlayerPos := Self.RSW.GetMyPos();
    TrapPos   := Self.TileTable[SPOT][i];
    PlayerTile := Self.RSW.GetTileMS(PlayerPos);
    TrapTile   := Self.RSW.GetTileMS(TrapPos);
    if MainScreen.IsVisible(TrapPos) then
    begin
      // Get State
      state := Self.GetBoxTrapState(Self.RSW.GetTileMS(TrapPos).Bounds);
      //Self.WriteMsg(state);

      //if Self.Animating() then Exit;



      if (state = 'TRAPPED') then // Place Trap
      begin
        Self.WriteMsg('Trapped, Resetting!');
        if Self.ResetTrap(TrapPos) then
        begin
          Self.WriteMsg('Succesfully Reset TRAPEPED');
        end;
      end;

      if (state = 'FAILED') then // Place Trap
      begin
        Self.WriteMsg('Failed, Resetting!');
        if Self.ResetTrap(TrapPos) then
        begin
          Self.WriteMsg('Succesfully Reset FAILED');
        end;
      end;

      if (state = 'PLACING') and (Self.RSW.GetMyPos() <> Self.TileTable[0][i])  then
      begin
        if Self.FindBoxTrap(TrapTile.Bounds) then
        begin
          Mouse.Click(MOUSE_LEFT);
          if WaitUntil(MainScreen.DidRedClick(), 25, 400) then if WaitUntil(Self.IsActive(Self.RSW.GetTileMS(TrapPos).Bounds), 75, 4200) then Exit;
        end else Self.WriteMsg('Found PLACED But Currently Animating');
      end;

      if (state = 'NOTPLACED') then // Place Trap
        begin
          if Self.PlayerOnTile(PlayerPos, TrapPos) then
          begin
            if (not Self.FindBoxTrap(TrapTile.Bounds)) and (not Self.Animating()) then
            begin
              Self.WriteMsg('Player On Tile, Placing Trap!');
              Self.PlaceTrap(TrapPos);
            end;
          end else
          begin // Does thhis work?
            Self.WriteMsg('Player Not On Trap!');
            //if (not Self.IsActive(TrapTile.Bounds)) or (not Self.IsFailed(TrapTile.Bounds)) or (not Self.IsTrapped(TrapTile.Bounds)) then
            //begin
            //  Mouse.HumanMove(TrapTile.Mean);
            //  Mouse.Click(MOUSE_LEFT);
            //  WaitUntil(Self.PlayerOnTile(PlayerPos, TrapPos), 100, 3200);
            if (Self.PlayerOnTile(PlayerPos, TrapPos)) then Self.PlaceTrap(TrapPos);
          //end;
        end;

      end; //else Self.RSW.WalkBlind(TrapPos,0);
    end;
  end;
end;
procedure TScript.Loop();
begin

  ClearDebug();
  while (getTimeRunning() < Self.ShutdownTime) do
    begin
      Self.WritePosition();

      //if Self.Animating() then Self.WriteMsg('Animating') else
      if not SRL.IsAnimating(MainScreen.GetPlayerBox,60, 120) then Self.Run();
      //Self.WriteMsg('Just Checked All Traps!');
      if not Inventory.IsOpen() then Inventory.Open();

      Wait(75,125);
      Self.DoAB();
      ClearDebug();
      //Wait(120,160);
    end;
end;

begin
  if RSClient.IsLoggedIn() then
    Bot.init();
  Bot.Loop();
end.
