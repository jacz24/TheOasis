program JAIOCookerOnline;
{$I SRL-F/OSR.simba}
{$DEFINE SRL_USE_REMOTEINPUT}
{$I [SRL-F]JFunctions.simba} // Custom Functions
{$DEFINE SRL_USE_REMOTEINPUT}
Const
(* General settings *)
  FOODNAME   = 'shark'; // lower case! For Ex: shark, dark crab, monkfish, meat
  LOCATION   = 'Hosidius'; // Hosidius, RogueDen
  MAXRUNTIME = 124;      // Max run time (in minutes)
  UPDATE     = True;     // Turns Updating On (Recommended) {True, False}
  MSWalking  = False;   // Honestly we won't even need Walking
  DEBUGMODE  = True;    // True for displaying your 'cooking tile'
(* Player settings *)
  PNAME        = 'test@bigboi.com';    // Username
  PPASS        = 'ILoveTesting';    // Password
  PPIN         = '6969';    // PIN
(* Break settings *)
  BREAKAFTER   = '115'; // Break after how long (in minutes)
  BREAKFOR     = '15';  // Break for how long (in minutes)



Type
  TBot = record
  RawFoodName,
  CookedFoodName, BurntFoodName,
  COOKED, BURNT, RAW, BotType          : String;
  NumCooked, Version, ABTimeMod         : Int32;
  TrueRunTime       : TStopwatch;
  FireLogCol, FlameCol, BankCol, InnerBankCol, OutterBankCol,
  RangeCol, GrillCol, OvenCol, WhiteBankCol           : TCTS2Color;
  RSW               : TRSWalker;
  end;
var
  Bot: TBot;

procedure TBot.Report();
begin
  ClearDebug();
  {
  if Self.TakeBreaks then
    ProgressReport(RESULT_REPORTBOX, 'AIO-Fisher', 'Flight', Self.Version,
                   ['Runtime', 'XP gained', 'Fishing for', 'Fish caught', 'Until break', 'Until shutdown'],
                   [SRL.MsToTime(Self.TrueRunTime.ElapsedTime, Time_Short),
                    ToStr(Round(Self.XPGained,2),'(', Max(0,Round(Self.XPGained / (Self.TrueRunTime.ElapsedTime/1000/60/60))),' / hr)'),
                    Self.FishingFor,
                    ToStr(Self.TotalCount, '(', Max(0,Round(Self.TotalCount / (Self.TrueRunTime.ElapsedTime/1000/60/60))),' / hr)'),
                    Antiban.TimeUntilBreak(Antiban.Breaks[0]),
                    SRL.MsToTime(Self.ShutdownTime-GetTimeRunning, Time_Short)])
  else
  }
  ProgressReport(RESULT_REPORTBOX, 'AIO-Miner', 'Jacz', IntToStr(Self.Version),
  ['Runtime', 'XP Gained', 'Mining For', 'Ore Mined', 'Until Shutdown'],
  [69420, '69', '420','Dope', 'Will']);
    //ProgressReport(RESULT_REPORTBOX, 'AIO-Miner', 'Jacz', Self.Version,
    //               ['Runtime', 'XP gained', 'Mining for', 'Ores Mined', 'Until shutdown'],
    //               [SRL.MsToTime(Self.TrueRunTime.ElapsedTime, Time_Short)])

  //if Self.ScreenReport then // TODO ADD Drawing reports
  //  Self.DrawReport();
end;

procedure OnWalkEvent(Sender: PRSWalker; Position: TPoint; Destination: TPoint);
begin

  WriteLn("Running! Maybe Add Something :D");
  //if Bot.WalkSearch then
  //  if length(Bot.GetSpotsIn(Mainscreen.Bounds)) > 0 then
  //   Sender^.Enabled := False;

  Position    := [];  // For the sake of mitigating compile warnings
  Destination := [];
end;

function TBot.FindFire(): Boolean;
var
  i: Int32;
  ATPA: T2DPointArray;
  FireFinder: TRSObjectFinder;
begin
  FireFinder.ColorClusters += [Self.FireLogCol, Self.FlameCol, 3];
  FireFinder.ClusterDistance := 4;
  ATPA := MainScreen.FindObject(FireFinder);
  if ATPA.Len < 1 then
  begin
  if Bank.IsOpen() then Bank.Close();
  ATPA := MainScreen.FindObject(FireFinder);
  if ATPA.Len < 1 then if not Script.AttemptToFindObject(FireFinder, 3) then TerminateScript('Cant find Fire!');
  end;
  ATPA.SortByMiddle(Mainscreen.Center);

  for i:=0 to min(4, high(ATPA)) do
  begin
    Mouse.HumanMove(ATPA[i].Mean());
    if MainScreen.IsUpText(['Cook','Fire']) then Exit(True);
  end;
end;

function TBot.FindRange(): Boolean;
var
  i, attempts: Int32;
  ATPA: T2DPointArray;
  RangeFinder: TRSObjectFinder;
begin
  RangeFinder.ColorClusters += [CTS2(5330526, 23, 0.29, 0.25), CTS2(6777783, 9, 0.06, 1.54), 3]; // Couldron & Grill
  RangeFinder.ClusterDistance := 6;
  RangeFinder.Grow := 2;
  RangeFinder.Erode := 3;
  ATPA := MainScreen.FindObject(RangeFinder);
  if ATPA.Len < 1 then
  begin
  if Bank.IsOpen() then Bank.Close();
  ATPA := MainScreen.FindObject(RangeFinder);
  if ATPA.Len < 1 then if not Script.AttemptToFindObject(RangeFinder, 3) then TerminateScript('Cant find range!');
  end;
  ATPA.SortByMiddle(Mainscreen.Center);

  for i:=0 to min(4, high(ATPA)) do
  begin
    Mouse.HumanMove(ATPA[i].Mean());
    if MainScreen.IsUpText(['Cook','Clay']) then Exit(True);
  end;
  if Bank.IsOpen() then Bank.Close();
end;

function TBot.FindChest(): Boolean;
var
  i, attempts: Int32;
  ATPA: T2DPointArray;
  ChestFinder: TRSObjectFinder;
begin
  if MainScreen.IsUpText(['Bank','chest']) then Exit(True);
  ChestFinder.ColorClusters += [CTS2(2316655, 3, 0.07, 0.31), CTS2(2440263, 6, 0.24, 0.53),10];//[Self.InnerBankCol, Self.OutterBankCol, 3];
  ChestFinder.Grow := 3;
  //ChestFinder.Erode:= 3;
  ChestFinder.ClusterDistance := 4;

  ATPA := MainScreen.FindObject(ChestFinder);
  if ATPA.Len < 1 then
  begin
  if Bank.IsOpen() then Bank.Close();
  if not Script.AttemptToFindObject(ChestFinder, 6) then TerminateScript('Cant find chest!');
  end;
  //ATPA := MainScreen.FindObject(ChestFinder);
  if ATPA.Len < 1 then TerminateScript('Cant find chest');
  ATPA.SortByMiddle(Mainscreen.Center);

  for i:=0 to min(4, high(ATPA)) do
  begin
    Mouse.HumanMove(ATPA[i].Mean());
    if MainScreen.IsUpText(['Bank','chest']) then Exit(True);
  end;
  Antiban.DismissRandom();
  if Bank.IsOpen() then Bank.Close();
end;

function TBot.FindBank(): Boolean;
var
  i: Int32;
  ATPA: T2DPointArray;
  BankFinder: TRSObjectFinder;
begin
  if MainScreen.IsUpText(['Emerald','Benedict']) then Exit(True);

  BankFinder.ColorClusters += [Self.BankCol, Self.WhiteBankCol, 7];
  //BankFinder.Grow := 2;
  BankFinder.ClusterDistance := 4;

  ATPA := MainScreen.FindObject(BankFinder);
  if ATPA.Len < 1 then
  begin
  if Bank.IsOpen() then Bank.Close();
  if not Script.AttemptToFindObject(BankFinder, 3) then TerminateScript('Cant find bank!');
  end;
  ATPA.SortByMiddle(Mainscreen.Center);

  for i:=0 to min(4, high(ATPA)) do
  begin
    Mouse.HumanMove(ATPA[i].Mean());
    if MainScreen.IsUpText(['Emerald','Benedict']) then Exit(True);
  end;
end;

function TBot.IsCooking(): Boolean;
begin
  if SRL.GetPixelShift(Inventory.Bounds, 2600) > 24 then
    Exit(True);
  //WriteMsg(IntToStr(SRL.GetPixelShift(Inventory.Bounds, 2400)));
end;

function TBot.DoBanking(): Boolean;
begin
  Script.WriteMsg('In DoBanking');
  if BankPin.IsOpen() then
    if Login.Players[0].Pin <> '' then
      BankPin.Enter(Login.GetPlayer.Pin)
   else
    begin
      Bank.ClickCloseButton();
      Logout.ClickLogout();
      TerminateScript('No bank pin provided');
    end;
  Script.WriteMsg('Depositing all!');
  if Bank.DepositAll() then Script.WriteMsg('Depositing Succesful!');

  Script.WriteMsg('Withdrawing Items!');
  if (Self.RawFoodName <> 'Giant seaweed') then
  begin
    Bank.WithdrawItem([Self.RawFoodName, BANK_WITHDRAW_ALL], True);
  end else
    Bank.WithdrawItem([Self.RawFoodName, 4], True);
  Script.BankAntiban(20);
  Wait(250,450);
  //if (not WaitUntil(Bank., 75, 5000)) then Exit(True);
end;

procedure TBot.DoAB();
begin
  Antiban.DismissRandom();
  if Antiban.DoAntiban() then
    if (not RSClient.IsLoggedIn) then
      if Login.GetPlayer.Password <> '' then
        Login.LoginPlayer();
end;

procedure TBot.SetupAntiban();
begin
  Antiban.Skills += ERSSKILL.COOKING;
  Antiban.AddTask((ONE_MINUTE*1)*Self.ABTimeMod,  @Antiban.SmallRandomMouse);
  Antiban.AddTask((ONE_MINUTE*2)*Self.ABTimeMod,  @Script.DoLoseFocus);
  Antiban.AddTask((ONE_MINUTE*5)*Self.ABTimeMod,  @Antiban.HoverMSPlayers);
  Antiban.AddTask((ONE_MINUTE*6)*Self.ABTimeMod,  @Antiban.HoverMSItems);
  Antiban.AddTask((ONE_MINUTE*6)*Self.ABTimeMod,  @Antiban.HoverMSNPCs);
  Antiban.AddTask((ONE_MINUTE*15)*Self.ABTimeMod, @Antiban.HoverSkills);
  Antiban.AddBreak(ONE_MINUTE*18, ONE_SECOND*40, 0.2, 0.0);
  Antiban.AddTask((ONE_MINUTE*24)*Self.ABTimeMod,  @Antiban.RandomRotate);
end;

procedure TBot.WritePosition();
begin
  Script.WriteMsg('{X = ' + IntToStr(Self.RSW.GetMyPos().X) + ', Y = ' + IntToStr(Self.RSW.GetMyPos().Y) + '}');
end;

procedure TBot.DoEdgeCases()
begin
  if FOODNAME = 'giant seaweed' then
  begin
    Self.RawFoodName    := 'Giant seaweed';
    Self.CookedFoodName := 'Soda ash';
    Self.BurntFoodName  := 'Soda ash';
  end;
  if FOODNAME = 'seaweed' then
  begin
    Self.RawFoodName    := 'Seaweed';
    Self.CookedFoodName := 'Soda ash';
    Self.BurntFoodName  := 'Soda ash';
  end;
  if FOODNAME = 'meat' then
  begin
    Self.RawFoodName    := 'Raw beef';
    Self.CookedFoodName := Self.COOKED + FOODNAME;
  end;
  if FOODNAME = 'chicken' then
  begin
    Self.CookedFoodName := Self.COOKED + FOODNAME;
  end;
  if FOODNAME = 'rabbit' then
  begin
    Self.CookedFoodName := Self.COOKED + FOODNAME;
  end;
  if FOODNAME = 'mackerel' then
  begin
    Self.BurntFoodName := Self.BURNT + 'fish';
  end;
  if FOODNAME = 'trout' then
  begin
    Self.BurntFoodName := Self.BURNT + 'fish';
  end;
  if FOODNAME = 'cod' then
  begin
    Self.BurntFoodName := Self.BURNT + 'fish';
  end;
  if FOODNAME = 'pike' then
  begin
    Self.BurntFoodName := Self.BURNT + 'fish';
  end;
  if FOODNAME = 'salmon' then
  begin
    Self.BurntFoodName := Self.BURNT + 'fish';
  end;
  if FOODNAME = 'tuna' then
  begin
    Self.BurntFoodName := Self.BURNT + 'fish';
  end;
  if FOODNAME = 'tuna' then
  begin
    Self.BurntFoodName := Self.BURNT + 'fish';
  end;
  if FOODNAME = 'karambwan' then
  begin
    Self.CookedFoodName := Self.COOKED + FOODNAME;
  end;
  if FOODNAME = 'chompy' then
  begin
    Self.CookedFoodName := Self.COOKED + FOODNAME;
    Self.BurntFoodName := 'Ruined ' + FOODNAME;
  end;
  if FOODNAME = 'fishcake' then
  begin
    Self.CookedFoodName := Self.COOKED + FOODNAME;
  end;
  if FOODNAME = 'slimy eel' then
  begin
    Self.CookedFoodName := Self.COOKED + FOODNAME;
  end;
  if FOODNAME = 'jubbly' then
  begin
    Self.CookedFoodName := Self.COOKED + FOODNAME;
  end;
  if FOODNAME = 'bass' then
  begin
    Self.BurntFoodName := Self.BURNT + 'fish';
  end;
end;
procedure TBot.init()
begin
  Script.WriteMsg('Starting Init');
  Self.ABTimeMod          := 1;
  Mouse.Speed             := Random(19, 24);
  Mouse.CanIdle           := False;
  Mouse.MissChance        := 7;
  Mouse.Brake             := True;
  Mouse.Distribution      := MOUSE_DISTRIBUTION_GAUSS;
  ItemFinder.Similarity   := 0.9999;

  Self.DeclarePlayers();
  Self.SetupAntiban();
  Self.RAW    := 'Raw ';
  Self.COOKED := 'Cooked ';
  Self.BURNT  := 'Burnt ';

  Self.RawFoodName    := Self.RAW + FOODNAME;
  Self.CookedFoodName := Script.UpCaseFirstChar(FOODNAME);
  Self.BurntFoodName  := Self.BURNT + FOODNAME;
  Self.DoEdgeCases(); // Cases like karambwan have weird names

  Script.WriteMsg('Raw Name: ' + Self.RawFoodName + ' - Cooked Name: ' + Self.CookedFoodName + ' - Burnt Name: ' + Self.BurntFoodName);
  if LOCATION = 'RogueDen' then
  begin
    Self.RSW.Setup('world');
    Self.RSW.ScreenWalk     := MSWALKING;
    Self.RSW.OnWalkingEvent := @OnWalkEvent;
    Self.RSW.EnableRunAtEnergy := 85;


    Self.FireLogCol := CTS2(15432, 3, 0.15, 0.01);
    Self.FlameCol := CTS2(4107999, 13, 0.16, 1.87);
    Self.BankCol  := CTS2(2113867, 11, 0.27, 1.12); // Unique Banker
    Self.WhiteBankCol  := CTS2(7312574, 13, 0.04, 1.16) // Unique Banker
  end;
  if LOCATION = 'Hosidius' then
  begin
    Self.RSW.Setup('zeah');
    Self.RSW.ScreenWalk     := MSWALKING;
    Self.RSW.OnWalkingEvent := @OnWalkEvent;
    Self.RSW.EnableRunAtEnergy := 85;

    Script.WriteMsg('Cooking In Hosidius!');
    Self.RangeCol   := CTS2(6514869, 9, 0.06, 1.48);
    Self.GrillCol   := CTS2(2302762, 8, 0.01, 0.97);
    //Self.OvenCol  := ;
    Self.OutterBankCol := CTS2(6447978, 23, 0.10, 0.10);//CTS2(4742244, 2, 0.44, 0.40); //
    Self.InnerBankCol  := CTS2(2974328, 22, 0.08, 0.75); // Unique Bank Color
  end;
end;

procedure TBot.HandleBanking();
begin
    if (Self.FindBank()) then
      begin
        if MainScreen.IsUpText(['Talk','to']) then
        begin
          ChooseOption.Open;
          ChooseOption.Select('Bank');
        end else
          Mouse.Click(MOUSE_LEFT);
        if (not WaitUntil(Bank.IsOpen(), 75, 5000)) then Script.WriteMsg('Bank Not Open!');
      end;
end

procedure TBot.DoHosidius();
begin
    Script.WriteMsg('Hosidius');
    Self.DoAB();
    if Bank.IsOpen() then Bank.CLose();
    // Open Bank If Interface Is Not Open And No Raw Fish
    if not Inventory.FindItem(Self.RawFoodName) and not Bank.IsOpen() then
    begin
      Script.WriteMsg('Looking for chest!');
      if (Self.FindChest()) then Mouse.Click(MOUSE_LEFT);
      if (WaitUntil(Bank.IsOpen(), 75, 5000)) then
      begin
      Script.WriteMsg('Bank Open Hurray! Depositing');
      Self.DoBanking();
      end;
    end;

    // Find the range and cook if bank is open and we have raw food in invent
    if Inventory.FindItem(Self.RawFoodName) and Bank.IsOpen() then
    begin
      Script.WriteMsg('Find Range And Cook');
      if (Self.FindRange()) then Mouse.Click(MOUSE_LEFT);
      if MainScreen.DidRedClick() then
        if (not WaitUntil(Make.IsOpen, 75, 5000)) then Exit;
          if Make.IsOpen() then
            Make.Select(0, MAKE_QUANTITY_ALL, False);
    end;

    // Cook If Raw food found and not cooking and book is not open
    if Inventory.FindItem(Self.RawFoodName) and not Self.IsCooking() and not Bank.IsOpen() then
    begin
      Script.WriteMsg('Cooking Time! Found: ' + Self.RawFoodName);
      Inventory.ClickItem(Self.RawFoodName);
      if (Self.FindRange()) then Mouse.Click(MOUSE_LEFT);

      if MainScreen.DidRedClick() then
        if (not WaitUntil(Make.IsOpen, 75, 5000)) then Exit;
          if Make.IsOpen() then
            Make.Select(0, MAKE_QUANTITY_ALL, False);
    end else
    if Inventory.CountItem(Self.RawFoodName) < Inventory.CountItem(Self.CookedFoodName) then
      if SRL.Dice(5) then
        if not MainScreen.IsUpText(['Bank','chest']) then Self.FindChest();
end;


procedure TBot.DoRogue()
begin
    Self.DoAB();
    // Bank If Interface Is Open And No Raw Fish
    if not Inventory.FindItem(Self.RawFoodName) and not Bank.IsOpen() then
    begin
      Script.WriteMsg('Looking to deposit at bank');
      Self.HandleBanking();
    end;

    if not Inventory.FindItem(Self.RawFoodName) and Bank.IsOpen() then
    begin
      Self.DoBanking();
    end;
    if Inventory.FindItem(Self.RawFoodName) and Bank.IsOpen() then
    begin
      if (Self.FindFire()) then Mouse.Click(MOUSE_LEFT);
      if MainScreen.DidRedClick() then
        if (not WaitUntil(Make.IsOpen, 75, 5000)) then Exit;
          if Make.IsOpen() then
            Make.Select(0, MAKE_QUANTITY_ALL, False);
    end;

    if Inventory.FindItem(Self.RawFoodName) and not Self.IsCooking() and not Bank.IsOpen() then
    begin
      if (Self.RawFoodName = 'Giant seaweed') then
      begin
        if Inventory.IsFull() then
        begin
          Self.HandleBanking();
          Self.DoBanking();
        end;
      end;
      //Self.WriteMsg('time to cook!');
      //Inventory.ClickItem(Self.RawFoodName);
      if (Self.FindFire()) then Mouse.Click(MOUSE_LEFT);

      if MainScreen.DidRedClick() then
        if (not WaitUntil(Make.IsOpen, 75, 5000)) then Exit;
          if Make.IsOpen() then
            Make.Select(0, MAKE_QUANTITY_ALL, False);
    end else
      if Inventory.CountItem(Self.RawFoodName) < Inventory.CountItem(Self.CookedFoodName) then
        if SRL.Dice(5) then
          if not MainScreen.IsUpText(['Emerald','Benedict']) then Self.FindBank();
end;

procedure TBot.Run()
begin
  if Bank.IsOpen() then Bank.Close();

  Script.WriteMsg('Starting Run');
  if Login.GetPlayer.Password <> '' then
    if not RSClient.IsLoggedIn() then
    begin
      Login.AddPlayer(PNAME,PPASS,PPIN);
      if not Login.LoginPlayer() then TerminateScript('Failed to login!');
    end;

  repeat
    //Self.WritePosition(); // For Debugging Position
    Wait(150, 250);
    // Run To Bank If You Have No Raw Fish In Inventory
    if LOCATION = 'Hosidius' then
    begin
      Self.DoHosidius();
    end;
    if LOCATION = 'RogueDen' then
    begin
      Self.DoRogue();
    end;
  //Self.Report();
  until(false);
end;

procedure TBot.DeclarePlayers();
begin
  Login.AddPlayer(PNAME, PPASS, PPIN, []);
end;

begin
  Bot.Version              := 0;
  if (UPDATE) then
  begin
    Script.UpdateOn        := UPDATE;
    Script.LocalBotVersion := Bot.Version;
    Script.BotType         := 'COOKERVERSION';
    Script.Setup();
    //Script.ScriptUpdateHandler(); // Handles All Updating For CookerAIO
  end;
  if RSClient.IsLoggedIn() then
    Bot.init();
  Bot.Run();
end.
