program JaczAIOMiner_V1;
{$DEFINE SRL_USE_REMOTEINPUT}
{$I SRL-F/OSR.simba}

Const
(* General settings *)
  LOCATION   = 'Sandstone';      // Location You Mine AT
  HUMIDIFY   = True;    // Casts HUMIDIFY To Refill Waterskins
  MAXRUNTIME = 124;     // Max run time (in minutes)

(* Player settings *)
  PNAME        = '';    // Username
  PPASS        = '';    // Password
  PPIN         = '';                // PIN
(* Break settings *)
  BREAKAFTER   = '115'; // Break after how long (in minutes)
  BREAKFOR     = '15';  // Break for how long (in minutes)

  DRAW        = False; // Will Draw on screen boxes around ores and such
  MSWalking    = False;


Type
  TMSObject = record
    WorldLoc    :    TPointArray; //loctions on the world map
    TObj        :    TRSObjectFinder;
  end;
  TMSOreObject = record
    Ore         :    TMSObject;
    MinedOre    :    TMSObject;
  end;

  TScript = record
  Version                     : String;
  TrueRunTime                 : TStopwatch;
  SandstoneTile, GrinderTile  : TPoint;
  RSW                         : TRSWalker;
  ABTimeMod, StartXP,
  StartHP, TempHP             : Int32;

  end;
var
  Bot: TScript;
  SandstoneGrinder: TMSObject;
  Ores: TMSOreObject;

procedure TScript.WriteMsg(Message: String);
begin
  WriteLn('[Bot]: ', Message);
end;

procedure TScript.WritePosition();
begin
  Self.WriteMsg('{X = ' + IntToStr(Self.RSW.GetMyPos().X) + ', Y = ' + IntToStr(Self.RSW.GetMyPos().Y) + '}');
end;

procedure TScript.DeclarePlayers();
begin
  Login.AddPlayer(PNAME, PPASS, PPIN, []);
end;
// Combination of miss mouse + slowing near the target destination
procedure TMouse.HumanMove(Point: TPoint);
var
  mPt: TPoint;
  S: Int32;
  Miss: Double;
  Range: Int64;
begin
  S := Self.Speed;
  Range := Trunc(Power(Self.Position().DistanceTo(Point), 0.80)); // how much possible range to miss
  Miss := SRL.SkewedRand(0.9, 0.1, 1.5); // Where miss will happen. 1 = destination (P).

  mPt.X := Trunc((1-Miss)*Self.Position().X + Miss*Point.X);
  mPt.Y := Trunc((1-Miss)*Self.Position().Y + Miss*Point.Y);

  mPt.X += SRL.NormalRange(-Range, Range);
  mPt.Y += SRL.NormalRange(-Range, Range);

  Self.Move(mPt);
  Self.Speed := round(S*0.85);
  Self.Move(Point);
  Self.Speed := S;
end;

procedure TMouse.RandomMovement();
var
  S: Int32;
begin
  S := Self.Speed;
  Self.Speed := 4;
  Self.Move(Box(Mouse.Position, 75, 75), True, );
  Self.Speed := S;
end;

procedure TScript.DoSkillHover();
begin
  Antiban.HoverSkill(ERSSKILL.MINING, random(1700, 3200), True)
end;

procedure TScript.BankAntiban(Percent: Double);
var
  randP: Double;
begin
  if Random() <= (Percent/100) then
  begin
    Antiban.DebugLn('Bank screen antiban');
    randP := Random();
    if randP < 0.33 then
      Antiban.SmallRandomMouse()
    else if (randP >= 0.33) and (randP < 0.66) then
      wait(2800, 4000)
    else if randP > 0.66 then
    begin
      // Copied version of 'random right click' antiban, minus the additional debug msg
      Mouse.Move(GetClientBounds(), True, MOUSE_DISTRIBUTION_RANDOM);

      if ChooseOption.Open() then
      begin
        if Random() < 0.50 then
          Mouse.Move(ChooseOption.Bounds);

        Wait(0, 8000, wdLeft);

        ChooseOption.Close();
      end;
    end;
  end;
end;

procedure TScript.DoLoseFocus();
Var T: Int32;
begin
  T := SRL.NormalRange(1700,8000);
  Antiban.DebugLn('Losing focus for '+SRL.MsToTime(T, Time_Short));
  Antiban.LoseFocus(T);
end;

procedure TScript.DoLongRest(); // Go AFK For a bit
Var T: Int32;
begin
  T := SRL.NormalRange(32000,128000);
  Antiban.DebugLn('Losing focus for '+SRL.MsToTime(T, Time_Short));
  Antiban.LoseFocus(T);
end;

procedure TScript.SetupAntiban();
begin
  Antiban.AddTask(ONE_SECOND*10, @Mouse.RandomMovement);
  Antiban.AddTask((ONE_MINUTE*4)*Self.ABTimeMod,  @Self.DoLoseFocus);
  Antiban.AddTask(ONE_MINUTE*3,  @Antiban.RandomRotate);
  Antiban.AddTask(ONE_MINUTE*4,  @Antiban.HoverMSItems);
  //Antiban.AddTask(ONE_MINUTE*4,  @Antiban.HoverMSNPCs);
  //Antiban.AddTask(ONE_MINUTE*4,  @Antiban.HoverMSPlayers);
  Antiban.AddTask(ONE_MINUTE*8,  @Self.DoSkillHover);
  Antiban.AddBreak(ONE_MINUTE*18, ONE_SECOND*40, 0.2, 0.0);
end;

procedure TScript.DoAB();
begin
  Antiban.DismissRandom();
  if Antiban.DoAntiban() then
    if (not RSClient.IsLoggedIn) then
      Login.LoginPlayer();
end;

procedure OnWalkEvent(Sender: PRSWalker; Position: TPoint; Destination: TPoint);
begin
  WriteLn('Running!');
  //if (Bot.RSW.GetMyPos().DistanceTo(Bot.BankTile) >= 4) then Bot.FindBank();

  Position    := [];  // For the sake of mitigating compile warnings
  Destination := [];
end;

procedure TScript.DisplayMSTile(Tile: TRectangle; SizeMod: Int32=0);
begin
  if SizeMod > 0 then
    Tile.Expand(SizeMod);
  if MainScreen.Bounds.Contains(Tile.Bounds) then
  begin
    RSClient.Image.Clear(Mainscreen.Bounds);
    RSClient.Image.DrawRect(Tile, clAqua);
  end;
end;
procedure TScript.Report();
begin
  ClearDebug();
  ProgressReport(RESULT_REPORTBOX, 'AIO-Miner', 'Jacz', Self.Version,
  ['Runtime', 'XP Gained', 'Mining For', 'Ore Mined', 'Until Shutdown'],
  [69420, '69', '420','Dope', 'Will']);
  //if Self.ScreenReport then // TODO ADD Drawing reports
  //  Self.DrawReport();
end;

function TScript.IsMining(): Boolean;
begin
Self.WriteMsg('Checking If Mining');
//if SRL.IsAnimating(MainScreen.GetPlayerBox, 25, 320, 3) then Exit(True);
if WaitUntil(SRL.GetPixelShift(Inventory.Bounds, 600) > 24, 75, 5000) then Exit(True);

Exit(False);
end;

function TScript.FindSandstone(): Boolean;
var
  i: Int32;
  ATPA: T2DPointArray;
  SandFinder: TRSObjectFinder;
begin
  if MainScreen.IsUpText(['Mine','Rocks']) then Exit(True);
  SandFinder.ColorClusters += [CTS2(2714503, 13, 0.04, 0.22), CTS2(937061, 15, 0.07, 1.71), 3];
  SandFinder.ClusterDistance := 4;
  ATPA := MainScreen.FindObject(SandFinder);
  if ATPA.Len < 1 then TerminateScript('No Sand Found!');
  ATPA.SortByMiddle(Mainscreen.Center);

  for i:=0 to min(2, high(ATPA)) do
  begin
    Mouse.HumanMove(ATPA[i].Mean());
    if MainScreen.IsUpText(['Mine','Rocks']) then Exit(True);
  end;
end;

function TScript.LocFindGrinder(Loc: TRectangle): Boolean;
var
  i, c: Int32;
  ATPA: T2DPointArray;
begin
  if DRAW then Self.DisplayMSTile(Loc);
  Mouse.HumanMove(Loc.Mean);
  if MainScreen.IsUpText(['Deposit','Grinder']) then Exit(True);

  // Look for other tiles if we don't find the first
  for c:=0 to min(1, high(SandstoneGrinder.WorldLoc)) do
  begin
    if DRAW then Self.DisplayMSTile(Self.RSW.GetTileMS(SandstoneGrinder.WorldLoc[c]));
    Mouse.HumanMove(Self.RSW.GetTileMS(SandstoneGrinder.WorldLoc[c]).Mean);
    if MainScreen.IsUpText(['Deposit','Grinder']) then Exit(True);
  end;
end;

function TScript.LocFindOre(Loc: TRectangle): Boolean;
var
  i: Int32;
  ATPA: T2DPointArray;
begin
  if DRAW then Self.DisplayMSTile(Loc);

  //if MainScreen.IsUpText(['Mine','Rocks']) then Exit(True);
  ATPA := MainScreen.FindObject(Ores.Ore.TObj, Loc.Bounds());
  //if ATPA.Len < 1 then TerminateScript('No Ore Found!');
  ATPA.SortByMiddle(Mainscreen.Center);
  //Mouse.HumanMove(Loc.Mean());
  for i:=0 to min(1, high(ATPA)) do
  begin
    Mouse.HumanMove(ATPA[i].Mean());
    if MainScreen.IsUpText(['Mine','Rocks']) then Exit(True);
  end;
end;

function TScript.WalkToSandstone(): Boolean;
begin
  if SRL.Dice(24) then
  begin
    if (MSWALKING) then
    begin
      Self.RSW.ScreenWalk     := False;
    end else
      Self.RSW.ScreenWalk     := True;
  end;
  RSW.WalkBlind(Self.SandstoneTile, 12); // Mining Location
  Self.RSW.ScreenWalk     := MSWALKING;
end;

function TScript.WalkToGrinder(): Boolean;
begin
  if SRL.Dice(24) then
  begin
    if (MSWALKING) then
    begin
      Self.RSW.ScreenWalk     := False;
    end else
      Self.RSW.ScreenWalk     := True;
  end;
  RSW.WalkBlind(Self.GrinderTile, 12); // Grinder Location
  Self.RSW.ScreenWalk     := MSWALKING;
end;

procedure TScript.DropGranite();
begin
  if Inventory.FindItems(['Granite (5kg)','Granite (2kg)','Granite (500g)']) then
  Inventory.ShiftDrop(['Granite (5kg)','Granite (2kg)','Granite (500g)'], DROP_PATTERN_REGULAR);
end;

procedure TScript.DepositToGrinder();
begin
  Self.WriteMsg('Depositing At Grinder!');
  if Self.RSW.GetMyPos().DistanceTo(SandstoneGrinder.WorldLoc[0]) >= 6 then Self.WalkToGrinder();
  Wait(600,1200);
  if MainScreen.IsVisible(SandstoneGrinder.WorldLoc[0]) then
  begin
    Self.WriteMsg('Looking For Grinder!');
    if Self.LocFindGrinder(Self.RSW.GetTileMS(SandstoneGrinder.WorldLoc[2])) then Mouse.Click(MOUSE_LEFT);
    WaitUntil(not Inventory.IsFull(), 75, 5000);
  end else TerminateScript('No Grinder Found!');
end;

procedure TScript.DoMining();
var
  i: Int32;
begin
  //if MainScreen.IsVisible(Ores.Ore.WorldLoc[0]) // Try this
  Self.WriteMsg('Mining Sandstone!');
  if Inventory.IsFull() then Exit();

  // Look for other tiles if we don't find the first
  for i:=0 to high(Ores.Ore.WorldLoc) do
  begin
  if Inventory.IsFull() then Exit();

  if Self.LocFindOre(Self.RSW.GetTileMS(Ores.Ore.WorldLoc[i])) then
  begin
    Mouse.Click(MOUSE_LEFT);
    WaitUntil(Self.IsMining, 75, 5200);
  end else Self.WriteMsg('No Mineable Ore Found At Spot: ' + IntToStr(i));

  Self.DoAB();
  if Inventory.IsFull() then Exit();
  end;

  //Self.Report();
end;

procedure TScript.CheckHP();
var
  T: TCountDown;
begin
  Self.WriteMsg('HP: ' + IntToStr(Minimap.GetHPLevel) +
  ' With Starting HP: ' + IntToStr(Self.StartHP) +
  ' With Temp HP: ' + IntToStr(Self.TempHP));
  if (Minimap.GetHPLevel() >= Self.StartHP) then
  begin
  Exit;
  end else
  begin
  if HUMIDIFY then Magic.CastSpell(ERSSpell.HUMIDIFY);
  Wait(250, 500);
  if not HUMIDIFY then Logout.ClickLogout();
  end;
end;

procedure TScript.Free();
begin
  //RSClient.Image.Clear();
  //ReportBG.Free();
  Self.WriteMsg('Thanks for using Jacz'#39's AIO Miner!');
end;

procedure TScript.init()
begin
  Self.WriteMsg('Starting Init');
  Self.Version            := '1';
  Self.ABTimeMod          := 1;
  Mouse.Speed             := Random(19, 24);
  Mouse.CanIdle           := False;
  Mouse.MissChance        := 7;
  Mouse.Brake             := True;
  Mouse.Distribution      := MOUSE_DISTRIBUTION_GAUSS;

  //Self.RSW.Setup('world');
  Self.RSW.Setup('TitheFarm');
  Self.RSW.ScreenWalk     := MSWALKING;
  Self.RSW.OnWalkingEvent := @OnWalkEvent;
  Self.RSW.EnableRunAtEnergy := 85;

  MM2MS.ZoomLevel   := Options.GetZoomLevel();
  Self.StartXP      := XPBar.Read();
  Self.StartHP      := Minimap.GetHPLevel();
  // GRINDER WALK LOC: [[94,96], [94,98], [94,100], [94,102], [94,104], [94,106]]


  if LOCATION='Sandstone' then
  begin
    Self.SandstoneTile := [145,80]; //[136,80]
    Self.GrinderTile   := [94,102];
                         //The Order: Top right, Top left, down
    Ores.Ore.WorldLoc := [[142,76], [142,81], [149,84]]; // [143,80], [137,76]
    Ores.MinedOre.WorldLoc := [[143,80],[138,76]];
    SandstoneGrinder.WorldLoc := [[86,96],[86,98],[86,102],[86,106],
                              [90,96], [90,98], [90,102], [90,106]];

    SandstoneGrinder.TObj.ColorClusters += [CTS2(5663096, 4, 0.10, 0.16), CTS2(8306116, 18, 0.10, 0.82), 6];
    SandstoneGrinder.TObj.ClusterDistance := 12;
    SandstoneGrinder.TObj.Grow := 4;

    Ores.Ore.TObj.ColorClusters += [CTS2(2714503, 13, 0.04, 0.22), CTS2(937061, 15, 0.07, 1.71), 3];
    Ores.Ore.TObj.ClusterDistance := 4;

    Ores.MinedOre.TObj.Colors += [CTS2(4737100, 13, 0.20, 0.14)];
    Ores.MinedOre.TObj.ClusterDistance := 4;
  end;

  //Self.WritePosition();
  Self.DisplayMSTile(RSW.GetTileMS([143,82]));
  Wait(500,1000);
  //AddOnTerminate(@Self.Free);
  TerminateScript(); //'testy'

  Self.DeclarePlayers();
  Self.SetupAntiban();

end;

procedure TScript.Run()
begin
  Self.WriteMsg('Starting Run');
  //Self.RSW.DebugPosition();
  //Self.RSW.GetTileMS(RSW.GetMyPos)

  if LOCATION = 'Sandstone' then
  begin
    // Self.CheckForTools(); // Checks to make sure you have waterskins and stuff
    repeat
      //Wait(150,250);
      // Mine If Close To Rocks And Inventory Is Not Full;
      if Self.RSW.GetMyPos().DistanceTo(Self.SandstoneTile) <= 12 then
        if not Inventory.IsFull(False) then Self.DoMining();

      // If Inventory Is Full Then Deposit At The Grinder
      if Inventory.IsFull() then Self.DepositToGrinder();

      if Self.RSW.GetMyPos().DistanceTo(Self.SandstoneTile) >= 12 then
        if not Inventory.IsFull(False) then Self.WalkToSandstone();

      Self.DropGranite(); // Sometimes may mine granite so just check inv and drop
      Self.CheckHP();
      Self.DoAB();
    until(False);
  end;

  //Self.DrawReport();
end;

begin
  if RSClient.IsLoggedIn() then
    Bot.init();
  Bot.Run()
end.
