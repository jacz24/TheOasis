program JSandMiner;

{$I SRL-F/OSR.simba}

Const
(* General settings *)
  MAXRUNTIME = 124;     // Max run time (in minutes)
(* Player settings *)
  PNAME        = '';    // Username
  PPASS        = '';    // Password
(* Break settings *)
  BREAKAFTER   = '115'; // Break after how long (in minutes)
  BREAKFOR     = '15';  // Break for how long (in minutes)

  MSWALKING    = False; //


Type
  TScript = record
  Version           : String;
  RSW               : TRSWalker;
  SandRockCol       : TCTS2Color;
  end;
var
  Bot: TScript;

procedure TScript.WriteMsg(Message: String);
begin
  WriteLn('[Bot]: ', Message);
end;

procedure TScript.DeclarePlayers();
begin
  Login.AddPlayer(PNAME, PPASS, '', []);
end;

// Combination of miss mouse + slowing near the target destination
procedure TMouse.HumanMove(Point: TPoint);
var
  mPt: TPoint;
  S: Int32;
  Miss: Double;
  Range: Int64;
begin
  S := Self.Speed;
  Range := Trunc(Power(Self.Position().DistanceTo(Point), 0.80)); // how much possible range to miss
  Miss := SRL.SkewedRand(0.9, 0.1, 1.5); // Where miss will happen. 1 = destination (P).

  mPt.X := Trunc((1-Miss)*Self.Position().X + Miss*Point.X);
  mPt.Y := Trunc((1-Miss)*Self.Position().Y + Miss*Point.Y);

  mPt.X += SRL.NormalRange(-Range, Range);
  mPt.Y += SRL.NormalRange(-Range, Range);

  Self.Move(mPt);
  Self.Speed := round(S*0.85);
  Self.Move(Point);
  Self.Speed := S;
end;

procedure OnWalkEvent(Sender: PRSWalker; Position: TPoint; Destination: TPoint);
begin
  Writeln('Running!');
  Position    := [];  // For the sake of mitigating compile warnings
  Destination := [];
end;

procedure TMouse.RandomMovement();
var
  S: Int32;
begin
  S := Self.Speed;
  Self.Speed := 4;
  Self.Move(Box(Mouse.Position, 75, 75), True, );
  Self.Speed := S;
end;

procedure TScript.DoSkillHover();
begin
  Antiban.HoverSkill(ERSSKILL.MINING, random(1700, 3200), True)
end;

function TScript.IsMining(): Boolean;
begin
if SRL.IsAnimating(MainScreen.GetPlayerBox, 320, 240, 3) then Exit(True);
end;

function TScript.FindStone(): Boolean;
var
  i: Int32;
  ATPA: T2DPointArray;
  GemFinder: TRSObjectFinder;
begin

  GemFinder.Colors += Self.SandRockCol;
  GemFinder.ClusterDistance := 2;
  ATPA := MainScreen.FindObject(GemFinder);
  if ATPA.Len < 1 then Self.FindStone();//TerminateScript('No Gem Rocks Found!');
  ATPA.SortByMiddle(Mainscreen.Center);

  for i:=0 to min(2, high(ATPA)) do
  begin
    Mouse.HumanMove(ATPA[i].Mean());
    if MainScreen.IsUpText(['Mine','Rocks']) then Exit(True);
  end;

end;

function TScript.MineStone(): Boolean;
begin

  if Self.IsMining() then Exit();

  if Self.FindStone() then Mouse.Click(MOUSE_LEFT);

end;

procedure TScript.init()
begin
  Self.WriteMsg('Starting Init');
  Self.Version            := '1';
  Mouse.Speed             := Random(19, 24);
  Mouse.CanIdle           := False;
  Mouse.MissChance        := 7;
  Mouse.Brake             := True;
  Mouse.Distribution      := MOUSE_DISTRIBUTION_GAUSS;

  //Self.ABTimeMod := 1;
  Self.RSW.Setup('world');
  Self.RSW.ScreenWalk     := MSWALKING;
  Self.RSW.OnWalkingEvent := @OnWalkEvent;
  Self.RSW.EnableRunAtEnergy := 85;

  Self.DeclarePlayers();
  Self.SandRockCol := CTS2(2319487, 16, 0.04, 0.36);
end;

procedure TScript.Run()
begin
  Self.WriteMsg('Starting Run');
  repeat
  Wait(1250,2500);
  Self.MineStone();
  WriteLn(Self.RSW.GetMyPos());
  until(false)

end;

begin
  if RSClient.IsLoggedIn() then
    Bot.init();
  Bot.Run()
end.
