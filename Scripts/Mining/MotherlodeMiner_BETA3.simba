program MotherlodeMiner;
{$DEFINE SRL_USE_REMOTEINPUT}
{$I SRL-F/OSR.simba}

Const
{---------Start setup---------}
{ General settings }
  SAMEZONE     = False;     // Return to your previous mining zone
  LARGESACK    = True;      // Using an upgraded pay-dirt sack?
  DROPHAMMER   = True;      // Drop hammer after repairing the strut?
  SCREENWALK   = True;      // Walk via the mainscreen?
  HOPONCHAT    = True;      // Hop worlds if nearby player chat is detected
  PERCSHIFT    = 16;        // Percent pixelshift to be considered 'mining'
  DEBUGMODE    = True;      // Enable debug mode?
{ Time settings }
  MAXRUNTIME   = 240;       // How long (in minutes) to run
  TAKEBREAKS   = True;      // Take (long) breaks?
  BREAKAFTER   = '135';     // Break after how many minutes?
  BREAKFOR     = '15';      // Break for how many minutes?
{ Player Settings }
  PNAME        = '';
  PPASS        = '';
  WORLDLIST    = [313..315,329..332,337..339,346..348,354..357,362,374, // Worlds to hop to (pre-set US worlds)
                  377,378,386,421,422,443..446,477..482,484..496];
{----------End setup----------}

Type
  TZone = record
    Block     : TPoint;
    Area,Veins,
    WalkTiles : TPointArray;
  end;

  TMSObject = record
    Color  : TCTS2Color;
    Tiles  : TPointArray;
    UpText,
    Options: TStringArray;
    Expand : Int32;
  end;

  TScript = record
    Version             : String;
    StartXP,CoalC,
    GoldC,MithC,
    AddyC,RuneC,
    NugC,ToolSlot,
    PayDirtLimit,
    DTM_PayDirt         : Int32;
    ShutdownTime        : Int64;
    PrevZone            : TZone;
    LadderObj,HopperObj,
    StrutObj,SackObj,
    DBObj,WalkObj       : TMSObject;
    EmptyGemBag,
    WalkSearch,DidClick : Boolean;
    UpperLevelBounds    : TPointArray;
    Worlds              : TIntegerArray;
    Zones               : Array of TZone;
    TrueRunTime,
    BlockCoolDown       : TStopwatch;
    RSW                 : TRSWalker;
  end;

Var
  Bot : TScript;

Const
  DBTile      : TPoint = [322,220];
  LadderBTile : TPoint = [305,182];
  LadderTTile : TPoint = [305,180];
  HammerTile  : TPoint = [293,181];
  HopperTile  : TPoint = [276,188];
  SackTile    : TPoint = [275,240];
  StrutNTile  : TPoint = [253,200];
  StrutSTile  : TPoint = [253,223];

procedure DownloadToFile(const URL, Filename: string);
var
  Client: Int32;
begin
  Bot.WriteMsg('Downloading assets');
  Client := InitializeHTTPClient(False);
  try
    GetHTTPPageEx(Client, URL, Filename);
  finally
    FreeHTTPClient(Client);
  end;
end;

procedure TScript.WriteMsg(Message: String);
begin
  WriteLn('[Bot]: '+Message);
end;

procedure TScript.Report();
var
  XpGained: Int32;
  RunTime: Int64;
begin
  XpGained := XPBar.Read()-Self.StartXP;
  RunTime  := Self.TrueRunTime.ElapsedTime();
  ClearDebug();

  ProgressReport(RESULT_REPORTBOX, 'Motherlode Miner','Flight', Self.Version,
                    ['Runtime','XP gained','Nuggets','Coal','Gold','Mithril','Adamantite','Runite','Shutdown'],
                    [SRL.MsToTime(RunTime, Time_Short),
                    ToStr(Round(XpGained, 2), '(', Round(XpGained / (RunTime / 1000 / 60 / 60)), ' / hr)'),
                    ToStr(Self.NugC, '(', Round(Self.NugC / (RunTime / 1000 / 60 / 60)), ' / hr)'),
                    ToStr(Self.CoalC, '(', Round(Self.CoalC / (RunTime / 1000 / 60 / 60)), ' / hr)'),
                    ToStr(Self.GoldC, '(', Round(Self.GoldC / (RunTime / 1000 / 60 / 60)), ' / hr)'),
                    ToStr(Self.MithC, '(', Round(Self.MithC / (RunTime / 1000 / 60 / 60)), ' / hr)'),
                    ToStr(Self.AddyC, '(', Round(Self.AddyC / (RunTime / 1000 / 60 / 60)), ' / hr)'),
                    ToStr(Self.RuneC, '(', Round(Self.RuneC / (RunTime / 1000 / 60 / 60)), ' / hr)'),
                    ToStr(SRL.MsToTime(Self.ShutdownTime - GetTimeRunning, Time_Short))]);
end;

procedure TScript.HighlightRect(Rect: TRectangle; Color, Opacity: Integer);
var
  RR,RG,RB,
  R,G,B,i: Integer;
  Pts: TPointArray;
  Cols: TIntegerArray;
begin
  ColorToRGB(Color, RR, RG, RB);
  try
    Pts := TPAFromPolygon(Rect.ToTPA);
    Cols := GetColors(Pts);

    for i:=0 to high(Cols) do
    begin
      ColorToRGB(Cols[i], R, G, B);
      R := Round(0.01 * (Opacity * R + (100 - Opacity) * RR));
      G := Round(0.01 * (Opacity * G + (100 - Opacity) * RG));
      B := Round(0.01 * (Opacity * B + (100 - Opacity) * RB));

      // Because we lack the ability to draw a TPA in conjunction with TIA, we must go this route
      // An unfortunate lack of options
      RSClient.Image.DrawTPA([Pts[i]], RGBtoColor(R,G,B));
    end;
  except
  end;
end;

function TScript.HopWorlds(): Boolean;
var World: Int32;
begin
  repeat
    World := WORLDLIST[Random(0, Length(WORLDLIST)-1)];
    if InIntArray(Self.Worlds, World) then Continue;
    Self.Worlds += World;
    if Self.Worlds.Len() >= Length(WORLDLIST) then // Hopped into every world on our list, so reset local worldlist
      Self.Worlds := [];
  until(World > 0);

  Self.WriteMsg('Hopping to world '+ToStr(World));
  Chat.ClickContinue();
  DepositBox.Close();
  Result := Logout.SwitchWorlds(World);
end;

procedure TScript.CheckForChat();
begin
  if (Pos(':',Chat.GetMessage(7, [CHAT_COLOR_BLACK,CHAT_COLOR_BLUE])) > 0) or
     (Pos(':',Chat.GetMessage(6, [CHAT_COLOR_BLACK,CHAT_COLOR_BLUE])) > 0) then
  begin
    if OCR.Recognize(Box(Mainscreen.Center,200,200), TOCRColorRule.Create([65535, 5]), RS_FONT_BOLD_12) <> '' then
    begin
      Self.WriteMsg('Player chat detected nearby, hopping worlds...');
      if (not Self.HopWorlds()) then
      begin
        Logout.ClickLogout();
        TerminateScript('Failed to hop worlds');
      end;
    end;
  end;
end;

procedure TAntiban.DoLoseFocus();
begin
  Self.LoseFocus(SRL.NormalRange(3700,5000));
end;

procedure PauseRunTime(Task: PBreakTask);
Var T: PBreakTask;
begin
  Bot.TrueRunTime.Pause;
  T := Task;
end;

procedure ResumeRunTime(Task: PBreakTask);
Var T: PBreakTask;
begin
  if GetTimeRunning() > Bot.ShutdownTime then
    TerminateScript('Time to shutdown');

  Bot.TrueRunTime.Resume;
  T := Task;
end;

procedure TScript.DoLoseFocus();
Var T: Int32;
begin
  T := SRL.NormalRange(1700,5000);
  Antiban.DebugLn('Losing focus for '+SRL.MsToTime(T, Time_Short));
  Antiban.LoseFocus(T);
end;

procedure TScript.SetupAntiban();
begin
  Antiban.Skills += ERSSKILL.MINING;
  Antiban.AddTask(ONE_MINUTE*4,  @Antiban.SmallRandomMouse);
  Antiban.AddTask(ONE_MINUTE*7,  @Self.DoLoseFocus);
  Antiban.AddTask(ONE_MINUTE*8,  @Antiban.HoverMSItems);
  Antiban.AddTask(ONE_MINUTE*8,  @Antiban.HoverMSNPCs);
  Antiban.AddTask(ONE_MINUTE*6,  @Antiban.HoverMSPlayers);
  Antiban.AddTask(ONE_MINUTE*25, @Antiban.HoverSkills);
  Antiban.AddBreak(ONE_MINUTE*18, ONE_SECOND*40, 0.2, 0.0);
  if TAKEBREAKS then
    Antiban.AddBreak(ONE_MINUTE*StrToInt(BREAKAFTER),ONE_MINUTE*StrToInt(BREAKFOR), 0.2, 1.0);
end;

function TScript.DoAB(): Boolean;
begin
  Antiban.DismissRandom();
  if (not RSClient.IsLoggedIn) then
    Login.LoginPlayer();
  Result := Antiban.DoAntiban();
end;

function TScript.GetSackCount(): Int32;
var
  BorderCol: TCTS1Color := CTS1(2306104,0);
  NumCols: TIntegerArray := [13158600,255];
  BorderTPA: TPointArray;
begin
  if (not RSClient.IsLoggedIn) then Exit;
  with Mainscreen do
    SRL.FindColors(BorderTPA, BorderCol, [X1, Y1, X1+100, Y1+100]);
  if BorderTPA.Len() < 1 then Exit;

  Result := OCR.RecognizeNumber(BorderTPA.Bounds, TOCRColorRule.Create(NumCols), RS_FONT_QUILL);
end;

function TScript.FindReachMsg(): Boolean;
var
  i,Count: Int32;
begin
  if (not RSClient.IsLoggedIn) then Exit;
  for i:=0 to CHAT_INPUT_LINE - 1 do
    if 't reach that' in Chat.GetMessage(i, [CHAT_COLOR_BLACK]) then
      Inc(Count);

  Result := Count >= 3;
end;

function TScript.HasOres(): Boolean;
var
  Ore: TRSItem;
  Ores: TStringArray := ['Coal','Gold ore','Mithril ore','Adamantite ore','Runite ore'];
begin
  for Ore in Ores do
    if Inventory.FindItem(Ore) then Exit(True);
end;

function TScript.HasTool(): Boolean;
var
  i,Slot: Int32;
  Picks: TStringArray := ['Bronze','Iron','Steel','Mithril','Adamant','Rune',
                          'Dragon','Infernal','Crystal'];
begin
  if (not RSClient.IsLoggedIn) then Exit;

  for i:=0 to High(Picks) do
    if Inventory.FindItem(Picks[i]+' pickaxe', Slot) then
    begin
      Self.ToolSlot := Slot;
      Exit(True);
    end;
  for i:=0 to High(Picks) do
    if Equipment.FindItem(Picks[i]+' pickaxe') then
      Exit(True);
end;

function TScript.FindPayDirt(): Boolean;
var Pt: TPoint;
begin
  if (not RSClient.IsLoggedIn) then Exit;
  //Result := Inventory.FindItem('Pay-dirt'); // Itemfinder has issues with this one item
  if Inventory.Count() < 1  then Exit(False);
  if Self.HasOres() then Exit(False);

  Result := FindDTM(DTM_PayDirt, Pt.X, Pt.Y, Inventory.Bounds);
end;

function TScript.GetCurrentZone(): TZone;
var
  MyPos: TPoint;
  Zone: TZone;
begin
  if (not RSClient.IsLoggedIn) then Exit;
  MyPos := Self.RSW.GetMyPos();

  for Zone in Self.Zones do
    if Self.RSW.MSInMMPoly(Mainscreen.Center, Zone.Area, MyPos) then
      Exit(Zone);

  Result := [];
end;

function TScript.OnUpperLevel(): Boolean;
var MyPos: TPoint:=Self.RSW.GetMyPos;
begin
  if (not RSClient.IsLoggedIn) then Exit;
  if Self.GetCurrentZone() <> [] then Exit(True)
  if SRL.PointInPoly(MyPos, Self.UpperLevelBounds) then
    Result := MyPos.Y < 178;
end;

function TScript.WaterIsFlowing(): Boolean;
var
  WaterCol: TCTS2Color := CTS2(13023407,9,0.07,0.43);
begin
  if (not RSClient.IsLoggedIn) then Exit;
  Result := SRL.CountColor(WaterCol, Mainscreen.Bounds) > 1000;
end;

function TScript.GetRandomZone(ExcludeMyZone:Boolean=False): TZone;
var
  Rand: Int32;
  Zones: Array of TZone := Self.Zones;
begin
  if (not RSClient.IsLoggedIn) then Exit;

  repeat
    Rand := RandomRange(0, Length(Zones));
    if ExcludeMyZone then
      if Zones[Rand] = Self.GetCurrentZone() then Continue;
    Result := Zones[Rand];
  until(Result <> []);
end;

function TScript.GetZoneAngle(Best: Boolean=True; MyZone: TZone; MyPos: TPoint): Int32;
begin
  if Best then
    case MyZone of
      Self.Zones[0]: Exit(SRL.NormalRange(33,55));
      Self.Zones[1]:
      begin
        if MyPos.Y > 163 then
          Exit(SRL.NormalRange(165,195))

        if MyPos.X >= 334 then
          Exit(SRL.NormalRange(255,285))
        else
        begin
          if SRL.Dice(50) then
            Exit(SRL.NormalRange(350,360))
          else
            Exit(SRL.NormalRange(0,10));
        end;
      end;
      Self.Zones[2]:
      begin
        if MyPos.X <= 316 then
          Exit(SRL.NormalRange(255,285))
        else
          Exit(SRL.NormalRange(165,195));
      end;
    end;
  if (not Best) then
    case MyZone of
      Self.Zones[0]: Exit(SRL.NormalRange(33,55));
      Self.Zones[1]:
      begin
        if MyPos.Y < 169 then
          Exit(SRL.NormalRange(165,195))
        else
        begin
          if SRL.Dice(50) then
            Exit(SRL.NormalRange(350,360))
          else
            Exit(SRL.NormalRange(0,10));
        end;
      end;
      Self.Zones[2]:
      begin
        if MyPos.X <= 316 then
          Exit(SRL.NormalRange(75,105))
        else
          Exit(SRL.NormalRange(255,285));
      end;
    end;
end;

function TScript.GetVeinsInMyZone(MyZone: TZone; AvoidPlayers: Boolean=True): TPointArray;
var
  i: Int32;
  B: TBox;
  Dot,MMPnt: TPoint;
  Skip: Boolean;
  VeinRect: TRectangle;
  VeinTPA,Dots: TPointArray;
  VeinCol: TCTS2Color := CTS2(9540251,21,0.10,0.13);
begin
  if (not RSClient.IsLoggedIn) then Exit;
  Dots := Minimap.GetDots(ERSMinimapDot.PLAYER);

  for i:=0 to High(MyZone.Veins) do
  begin
    VeinRect := Self.RSW.GetTileMS(MyZone.Veins[i], 5);
    VeinRect := VeinRect.Expand(5);
    B := VeinRect.Bounds;
    B.LimitTo(Mainscreen.Bounds);
    if SRL.FindColors(VeinTPA, VeinCol, B) then
      if (not Mainscreen.GetPlayerBox().Contains(VeinTPA.Mean())) then
      begin
        if AvoidPlayers then
        begin
          MMPnt := MainScreen.PointToMM(VeinTPA.Mean()).ToPoint();
          for Dot in Dots do
            if MMPnt.DistanceTo(Dot) < 8 then
            begin
              Skip := True;
              break;
            end;

          if (not Skip) then
            Result += VeinTPA.Mean();

          Skip := False;
        end else
          Result += VeinTPA.Mean();
      end;
  end;

  Result.Sort([Mainscreen.GetPlayerBox.Middle.X,Mainscreen.GetPlayerBox.Y1]);
end;

function TScript.GetRandomFreeZone(): TZone;
var
  i: Int32;
  Pnt: TPoint;
  Skip: Boolean;
  Zone: TZone;
  Dots,MMPnts: TPointArray;
  FreeZones: Array of TZone;
begin
  if (not RSClient.IsLoggedIn) then Exit;
  Dots := Minimap.GetDots(ERSMinimapDot.PLAYER);

  for Zone in Self.Zones do
  begin
    Skip := False;
    for Pnt in Zone.Area do
      MMPnts += Self.RSW.WorldToMM(Pnt);

    for i:=0 to high(Dots) do
      if SRL.PointInPoly(Dots[i], MMPnts) then
      begin
        Skip := True;
        break;
      end;

    if Skip then
      Continue
    else
      FreeZones += Zone;
  end;

  if Length(FreeZones) > 0 then
    Result := FreeZones[RandomRange(0, Length(FreeZones))]
  else
    Result := Self.GetRandomZone(True);
end;

function TMSObject.Click(): Boolean;
var
  B: TBox;
  i: Int32;
  MyPos: TPoint := Bot.RSW.GetMyPos();
  Rect: TRectangle;
  ATPA: T2DPointArray;
  Finder: TRSObjectFinder;
begin
  Self.Tiles.Sort(MyPos);
  Finder.Colors += Self.Color;
  Finder.ClusterDistance := 5;

  if Self.Tiles.Len() > 0 then
  begin
    for i:=0 to High(Self.Tiles) do
    begin
      Rect := Bot.RSW.GetTileMSEx(MyPos, Self.Tiles[i]);
      Rect := Rect.Expand(Self.Expand);
      B := Rect.Bounds;
      B.LimitTo(MainScreen.Bounds);
      if (not MainScreen.IsVisible(B.Middle())) then Continue;

      ATPA := MainScreen.FindObject(Finder, B);
      if (ATPA.Len > 0) then
      begin
        Mouse.Move(ATPA.Biggest().Mean());
        if Mainscreen.IsUpText(Self.UpText) then
        begin
          if Self.Options.Len() > 0 then
          begin
            if ChooseOption.Select(Self.Options) then
              Exit(True);
          end else
          begin
            Mouse.Click(MOUSE_LEFT);
            Exit(MainScreen.DidRedClick());
          end;
        end;
      end;
    end;
  end else
  begin
    ATPA := MainScreen.FindObject(Finder);
    if (ATPA.Len > 0) then
      for i:=0 to High(ATPA) do
        if MainScreen.IsVisible(ATPA[i].Mean()) then
        begin
          Mouse.Move(ATPA[i].Mean());
          if Mainscreen.IsUpText(Self.UpText) then
          begin
            if Self.Options.Len() > 0 then
            begin
              if ChooseOption.Select(Self.Options) then
                Exit(True);
            end else
            begin
              Mouse.Click(MOUSE_LEFT);
              Exit(MainScreen.DidRedClick());
            end;
          end;
        end;
  end;
end;

procedure OnWalkEvent(Sender: PRSWalker; Position: TPoint; Destination: TPoint);
Var P,D: TPoint;
begin
  if Bot.WalkSearch then
    if Bot.WalkObj.Click() then
    begin
      Minimap.WaitFlag();
      Sender^.Enabled := False;
      Bot.DidClick := True;
    end;

  P := Position;
  D := Destination;
end;

function TScript.InteractTile(Tile: TPoint; Col: TCTS2Color; UpText: TStringArray; DebugCol: Int32; Expand: Int32=3): Boolean;
var
  B: TBox;
  i: Int32;
  MSRect,CRect: TRectangle;
  Cluster: T2DPointArray;
  Finder: TRSObjectFinder;
begin
  MSRect := Self.RSW.GetTileMS(Tile, 0);
  MSRect := MSRect.Expand(Expand);
  B      := MSRect.Bounds;
  B.LimitTo(Mainscreen.Bounds);

  if (not MainScreen.IsVisible(B.Middle)) then Exit(False);

  Finder.Colors := [Col];
  Finder.ClusterDistance := 5;
  Cluster := MainScreen.FindObject(Finder, B);
  if (Cluster.Len > 0) then
  begin
    for i:=0 to high(Cluster) do
    begin
      CRect := Cluster[i].MinAreaRect();
      Self.HighlightRect(CRect, DebugCol, 75);
      Mouse.Move(SRL.RandomPoint(CRect));
      if Mainscreen.IsUpText(UpText, 75) then
      begin
        RSClient.Image.Clear(Mainscreen.Bounds);
        Exit(True);
      end;
    end;
    RSClient.Image.Clear(Mainscreen.Bounds);
  end;
end;

function TScript.MineZoneBlock(Zone: TZone; Force: Boolean=False): Boolean;
var
  BlockCol: TCTS2Color := CTS2(1459023, 7, 0.07, 0.78);
  MyPos: TPoint := Self.RSW.GetMyPos;
  XP: Int32;
begin
  if (not RSClient.IsLoggedIn) then Exit;
  if Self.BlockCoolDown.ElapsedTime() < 5000 then Exit;

  if Force then Zone.Block := [314,167];
  if (MyPos.X >= 315) or (MyPos.Y <= 167) then Zone.Block := [314,167];
  if Zone.Block.X > 0 then
  begin
    Self.BlockCoolDown.Reset();
    if DEBUGMODE then
      Self.WriteMsg('Clearing the rockfall');
    if MyPos.DistanceTo(Zone.Block) > 15 then
      Self.RSW.WalkBlind([Zone.Block.X+4,Zone.Block.Y-2], SRL.NormalRange(1,3));

    if (not Self.InteractTile(Zone.Block, BlockCol, ['Rockfall'], 255, 4)) then Exit(True); // Blockage already mined

    if Mainscreen.IsUpText('Rockfall', 75) then
    begin
      Mouse.Click(MOUSE_LEFT);
      if (not MainScreen.DidRedClick) then Exit;
      XP := XPBar.Read();
      if WaitUntil(Minimap.IsPlayerMoving(300), 75, 1500) then
        while Minimap.IsPlayerMoving(300) do
          Wait(115);

      WaitUntil((XPBar.Read() > XP), 75, 3100);
      Result := True;
    end;
  end;
end;

function TScript.TakeHammer(): Boolean;
var
  i: Int32;
  CrateCol: TCTS2Color := CTS2(2450557, 11, 0.06, 1.37);
begin
  if (not RSClient.IsLoggedIn) then Exit;

  if Inventory.FindItem('Hammer') then Exit(True);
  if DEBUGMODE then
    Self.WriteMsg('Taking a hammer');
  if Inventory.IsFull() then
  for i:=0 to 3 do
  begin
    Inventory.HoverSlot(i);
    if Mainscreen.IsUpText('Pay-dirt', 75) then
    begin
      Inventory.ClickSlot(i, 'Drop');
      wait(SRL.NormalRange(250,750));
      break;
    end;
  end;

  for 1 to 3 do
  begin
    if Self.InteractTile(HammerTile, CrateCol, ['Search','Crate'], 255) then
    begin
      if Mainscreen.IsUpText(['Search','Crate'], 75) then
      begin
        Mouse.Click(MOUSE_LEFT);
        if (not MainScreen.DidRedClick) then Exit;
        Minimap.WaitFlag(3);

        Result := WaitUntil(Inventory.FindItem('Hammer'), 75, 6000);
      end;
    end;
    if Result then Exit(True);
  end;

  if (not Result) then
    Self.HopWorlds();
end;

function TScript.RepairStrut(): Boolean;
var
  StrutCol: TCTS2Color := CTS2(3627626, 10, 0.07, 0.17);
  XP: Int32;
  MyPos,Tile: TPoint;
begin
  if (not RSClient.IsLoggedIn) then Exit;

  if Self.WaterIsFlowing() then Exit(True);
  if (not Inventory.FindItem('Hammer')) then
    Self.TakeHammer();
  MyPos := Self.RSW.GetMyPos();
  if MyPos.DistanceTo(StrutNTile) < MyPos.DistanceTo(StrutSTile) then
    Tile := StrutNTile
  else
    Tile := StrutSTile;

  for 1 to 4 do
  begin
    if Self.InteractTile(Tile, StrutCol, ['Hammer','Broken'], 255) then
    begin
      if Mainscreen.IsUpText(['Hammer','Broken'], 75) then
      begin
        Mouse.Click(MOUSE_LEFT);
        if (not MainScreen.DidRedClick) then Exit;
        Minimap.WaitFlag(5);

        XP := XPBar.Read();
        if (not WaitUntil(Self.WaterIsFlowing, 75, 15000)) then Exit(False);
        Result := True;
      end;
    end;
    if Result then
    begin
      if DROPHAMMER then
        if SRL.Dice(75) then
          Inventory.ShiftDrop(['Hammer'], DROP_PATTERN_REGULAR)
        else
          Inventory.ClickItem('Hammer', 'Drop');

      Exit(True);
    end;
  end;

  if (not Result) then
  begin
    if DEBUGMODE then
      Self.WriteMsg('Failed to repair the strut');
    Antiban.RandomRotate();
  end;
end;

procedure TScript.NavigateToZone(Zone: TZone);
var
  MyPos,RandTile: TPoint;
begin
  if (not RSClient.IsLoggedIn) then Exit;

  MyPos := Self.RSW.GetMyPos();
  if SRL.PointInPoly(MyPos, Zone.Area) then Exit;
  RandTile := Zone.WalkTiles[RandomRange(0, Length(Zone.WalkTiles))];

  if DEBUGMODE then
    Self.WriteMsg('Navigating to vein zone');

  Self.MineZoneBlock(Zone);

  if (not Self.RSW.WalkBlind(RandTile)) then
    if Self.MineZoneBlock(Zone) then
      Self.RSW.WalkBlind(RandTile);
end;

procedure TScript.RelocateInZone();
var
  MyZone: TZone;
  MyPos,RandTile: TPoint;
begin
  if (not RSClient.IsLoggedIn) then Exit;

  MyPos := Self.RSW.GetMyPos();
  MyZone := Self.GetCurrentZone();
  if MyZone.WalkTiles.Len() < 2 then Exit;
  RandTile := MyZone.WalkTiles[RandomRange(0, Length(MyZone.WalkTiles))];

  if DEBUGMODE then
    Self.WriteMsg('Navigating to different spot inside this zone');

  Self.RSW.WalkBlind(RandTile);
end;

procedure TScript.NavigateToPlace(Where: String);
var
  MyPos: TPoint;
  MyZone: TZone;
begin
  if (not RSClient.IsLoggedIn) then Exit;
  if DEBUGMODE then
    Self.WriteMsg('Navigating to '+Lowercase(Where));

  MyPos  := Self.RSW.GetMyPos();
  MyZone := Self.GetCurrentZone();

  case Where of
    'Ladder'     :
    begin
      if Self.OnUpperLevel() then
      begin
        if MyZone.Block.X > 0 then
          Self.MineZoneBlock(MyZone);
        MyPos := Self.RSW.GetMyPos();
        if MyPos.DistanceTo(LadderTTile) >= 10 then
        begin
          Self.WalkSearch := True;
          Self.WalkObj    := Self.LadderObj;
          if (not Self.RSW.WalkBlind([LadderTTile.X,LadderTTile.Y-4], 5)) then
            Antiban.RandomRotate();
        end;
      end else
      begin
        Self.WalkSearch := True;
        Self.WalkObj    := Self.LadderObj;
        if (not Self.RSW.WalkBlind([LadderBTile.X,LadderBTile.Y+4], 5)) then
          Antiban.RandomRotate();
      end;
    end;
    'Hopper'     :
    begin
      Self.WalkSearch := True;
      Self.WalkObj    := Self.HopperObj;
      if (not Self.RSW.WalkBlind([HopperTile.X+4,HopperTile.Y], 2)) then
        Antiban.RandomRotate();
    end;
    'Sack'       :
    begin
      Self.WalkSearch := True;
      Self.WalkObj    := Self.SackObj;
      if (not Self.RSW.WalkBlind([SackTile.X+8,SackTile.Y], 5)) then
        Antiban.RandomRotate();
    end;
    'DepositBox' :
    begin
      Self.WalkSearch := True;
      Self.WalkObj    := Self.DBObj;
      if (not Self.RSW.WalkBlind([DBTile.X-4,DBTile.Y], 5)) then
        Antiban.RandomRotate();
    end;
    'North strut': if (not Self.RSW.WalkBlind(StrutNTile, 5)) then Antiban.RandomRotate();
    'South strut': if (not Self.RSW.WalkBlind(StrutSTile, 5)) then Antiban.RandomRotate();
  end;
end;

function TScript.HandleLadder(): Boolean;
var
  Upper: Boolean := Self.OnUpperLevel();
  LadderCol: TCTS2Color := CTS2(4873576, 8, 0.10, 0.12);
  T: TCountdown;
  Tile: TPoint;
begin
  if (not RSClient.IsLoggedIn) then Exit;

  if DEBUGMODE then
    Self.WriteMsg('Climbing the ladder');

  Self.NavigateToPlace('Ladder');

  if Upper then
    Tile := LadderTTile
  else
    Tile := LadderBTile;

  if (not MainScreen.IsVisible(Self.RSW.GetTileMS(Tile, 0).Mean)) then
    Self.NavigateToPlace('Ladder');

  Self.WalkSearch := False;
  while Minimap.IsPlayerMoving(200) do
    Wait(75);

  if (not Self.DidClick) then
    for 1 to 5 do
    begin
      if Self.InteractTile(Tile, LadderCol, ['Climb'], clWhite, 4) then
      begin
        if Mainscreen.IsUpText('Climb', 75) then
        begin
          Mouse.Click(MOUSE_LEFT);
          if (not MainScreen.DidRedClick) then Exit;
          Minimap.WaitFlag(2);

          T.Init(SRL.NormalRange(2700,3400));
          while (not T.IsFinished) do
          begin
            if Upper then
            begin
              if (not Self.OnUpperLevel) then
                break;
            end else
            begin
              if Self.OnUpperLevel then
                break;
            end;

            if 'reach that' in Chat.GetMessage(7, [CHAT_COLOR_BLACK]) then
            begin
              Self.MineZoneBlock(Self.GetCurrentZone, True);
              Break;
            end;

            Wait(150);
          end;

          Break;
        end;
      end else
        while Minimap.IsPlayerMoving(200) do
          Wait(75);
    end;

  Self.DidClick := False;
  if Upper then
    Result := WaitUntil((not Self.OnUpperLevel), 75, 5000)
  else
  begin
    Result := WaitUntil(Self.OnUpperLevel, 75, 5000);
    // Wait for the screen shift to catch up; this will effect the MS location of the rockfall
    if Result then Wait(SRL.NormalRange(650,1000));
  end;

  if (not Result) then
    Self.HopWorlds();
end;

function TScript.DepostDirt(): Boolean;
var
  HopperCol: TCTS2Color := CTS2(5662312, 17, 0.21, 0.49);
  Clicked: Boolean;
begin
  if (not RSClient.IsLoggedIn) then Exit;
  if DEBUGMODE then
    Self.WriteMsg('Depositing pay-dirt');

  if (not MainScreen.IsVisible(Self.RSW.GetTileMS(HopperTile, 0).Mean)) then
    Self.NavigateToPlace('Hopper');

  Self.WalkSearch := False;

  if (not Self.DidClick) then
    for 1 to 3 do
    begin
      if Self.InteractTile(HopperTile, HopperCol, ['Deposit','Hopper'], 901389) then
      begin
        if Mainscreen.IsUpText(['Deposit','Hopper'], 75) then
        begin
          Mouse.Click(MOUSE_LEFT);
          if (not MainScreen.DidRedClick) then Exit;
          Clicked := True;
          Minimap.WaitFlag(3);
          Break;
        end;
      end;
    end;

  if (not Self.DidClick) then
    if (not Clicked) then
    begin
      Self.DidClick := False;
      Exit(False);
    end;

  Self.DidClick := False;

  Result := WaitUntil((Inventory.Count() <= 10), 75, 4000);

  if (not Result) then
  begin
    if 'reach that' in Chat.GetMessage(7, [CHAT_COLOR_BLACK]) then
    begin
      Self.HandleLadder();
      Exit;
    end;

    if (not Self.WaterIsFlowing()) then
      if (not Self.RepairStrut()) then
      begin
        Self.NavigateToPlace('North strut');
        for 1 to 2 do
          if Self.RepairStrut() then
            break;
      end;
  end;
end;

function TScript.SearchSack(): Boolean;
var
  SackCol: TCTS2Color := CTS2(5268591, 10, 0.07, 0.07);
begin
  if (not RSClient.IsLoggedIn) then Exit;

  if DEBUGMODE then
    Self.WriteMsg('Searching sack');

  Self.NavigateToPlace('Sack');

  if (not Self.DidClick) then
    if (not MainScreen.IsVisible(Self.RSW.GetTileMS(SackTile,0).Mean)) then
      Self.NavigateToPlace('Sack');

  Self.WalkSearch := False;

  if (not Self.DidClick) then
  begin
    for 1 to 3 do
      if Self.InteractTile(SackTile, SackCol, ['Search','Sack'], 901389) then
        if Mainscreen.IsUpText(['Search','Sack'], 75) then
        begin
          Mouse.Click(MOUSE_LEFT);
          if (not MainScreen.DidRedClick) then Exit;
          Minimap.WaitFlag(3);
          Break;
        end;
  end;

  Self.DidClick := False;
  Result := WaitUntil(Self.HasOres(), 75, 7000);

  if (not Result) then
    Self.HopWorlds();
end;

function TScript.GetObject(Obj: TMSObject): TPoint;
var
  B: TBox;
  i: Int32;
  Rect: TRectangle;
  ATPA: T2DPointArray;
  Finder: TRSObjectFinder;
  MyPos: TPoint := Self.RSW.GetMyPos();
begin
  Finder.Colors += Obj.Color;

  Finder.Erode := 2;
  Finder.ClusterDistance := 10;

  for i:=0 to High(Obj.Tiles) do
  begin
    Rect := Self.RSW.GetTileMSEx(MyPos, Obj.Tiles[i]);
    Rect := Rect.Expand(Obj.Expand);
    B := Rect.Bounds;
    B.LimitTo(MainScreen.Bounds);
    if (not MainScreen.IsVisible(B.Middle())) then Continue;

    ATPA := MainScreen.FindObject(Finder, B);
    if (ATPA.Len > 0) then
      Exit(ATPA.Biggest().Mean())
    else
      Continue;
  end;
end;

function TScript.DepositOres(): Boolean;
var
  AllItems: TStringArray := ['Coal','Gold ore','Mithril ore','Adamantite ore','Runite ore',
                             'Golden nugget','Uncut sapphire','Uncut emerald','Uncut ruby',
                             'Uncut diamond'];

  First: Boolean := SRL.Dice(80);
  Pt: TPoint;
  Item: TRSItem;
begin
  if (not RSClient.IsLoggedIn) then Exit;
  if (not Self.HasOres()) then Exit;

  if DEBUGMODE then
    Self.WriteMsg('Depositing ores');

  if (not DepositBox.IsOpen()) then
  begin
    Pt := Self.GetObject(Self.DBObj);
    if Pt.X <= 5 then
    begin
      if (not Self.RSW.WalkBlind([DBTile.X-4,DBTile.Y], 30)) then
        Antiban.RandomRotate();

      while Minimap.IsPlayerMoving() do
      begin
        Pt := Self.GetObject(Self.DBObj);
        if Pt.X < 5 then Continue;
        ASyncMouse.Move(Pt);

        while ASyncMouse.IsMoving() do
        begin
          Pt := Self.GetObject(Self.DBObj);
          if Pt.X > 5 then
            ASyncMouse.ChangeDestination(Pt);

          if MainScreen.IsUpText(['Deposit','Bank Deposit']) then
            break;
        end;
      end;
    end else
      Mouse.Move(Pt);

    if (not MainScreen.IsUpText(['Deposit','Bank Deposit'], 50)) then
    begin
      Mouse.Move(Self.GetObject(Self.DBObj));
      if (not MainScreen.IsUpText(['Deposit','Bank Deposit'], 50)) then Exit;
    end;

    Mouse.Click(MOUSE_LEFT);
    if (not MainScreen.DidRedClick) then Exit;

    if (not DepositBox.IsOpen(6500)) then
    begin
      if (not Result) then
        Self.HopWorlds();
      Exit(False);
    end;
  end;

  Inc(Self.CoalC, DepositBox.CountItem('Coal'));
  Inc(Self.GoldC, DepositBox.CountItem('Gold ore'));
  Inc(Self.MithC, DepositBox.CountItem('Mithril ore'));
  Inc(Self.AddyC, DepositBox.CountItem('Adamantite ore'));
  Inc(Self.RuneC, DepositBox.CountItem('Runite ore'));
  Inc(Self.NugC,  Max(DepositBox.CountItemStack('Golden nugget'),0));

  if (Self.ToolSlot > -1) or (DepositBox.FindItem('Open gem bag')) then
  begin
    if Self.EmptyGemBag then
      if First then
        DepositBox.ClickItem('Open gem bag', 'Empty');
    if SRL.Dice(85) then
      AllItems.Reverse();
    for Item in AllItems do
    begin
      DepositBox.DepositItem([Item,-1], True);
      Wait(SRL.NormalRange(150,400));
    end;
    if Self.EmptyGemBag then
      if (not First) then
        DepositBox.ClickItem('Open gem bag', 'Empty');

    Self.EmptyGemBag := False;
  end else
    DepositBox.DepositAll();

  DepositBox.Close();
  Result := WaitUntil((Inventory.Count() <= 5), 75, 4000);

  Self.Report();
end;

procedure TScript.MineVeins();
var
  XP,Ang,Ang2: Int32;
  Vein: TPoint;
  Best: Boolean;
  MyPos: TPoint:= Self.RSW.GetMyPos;
  MyZone: TZone:= Self.GetCurrentZone;
  T: TCountdown;
  NearVeins: TPointArray;
begin
  if (not RSClient.IsLoggedIn) then Exit;

  if Inventory.FindItem('Gem bag') then
    Inventory.ClickItem('Gem bag', 'Open');

  Self.EmptyGemBag := True;

  Ang  := Self.GetZoneAngle(True, MyZone, MyPos);
  Ang2 := Self.GetZoneAngle(False, MyZone, MyPos);

  if (not InRange(Minimap.GetCompassAngle(True), Ang-15, Ang+15)) and
     (not InRange(Minimap.GetCompassAngle(True), Ang2-15, Ang2+15)) then
  begin
    if SRL.Dice(85) then
    begin
      Ang  := Self.GetZoneAngle(True, MyZone, MyPos);
      Best := True;
    end else
    begin
      Ang  := Ang2;
      Best := False;
    end;

    if DEBUGMODE then
      Self.WriteMsg('Rotating to angle: '+ToStr(Ang));
    Minimap.SetCompassAngle(Ang);
  end;

  NearVeins := Self.GetVeinsInMyZone(MyZone);

  if NearVeins.Len() < 1 then
  begin
    if Best then
      Ang := Self.GetZoneAngle(False, MyZone, MyPos)
    else
      Ang := Self.GetZoneAngle(True, MyZone, MyPos);

    if DEBUGMODE then
      Self.WriteMsg('Rotating to angle: '+ToStr(Ang));

    Minimap.SetCompassAngle(Ang);
    NearVeins := Self.GetVeinsInMyZone(MyZone);
  end;

  if NearVeins.Len() < 1 then
  begin
    if DEBUGMODE then
      Self.WriteMsg('No veins found nearby, switching spots in zone');

    Self.RelocateInZone();
    Ang := Self.GetZoneAngle(True, MyZone, MyPos);

    if DEBUGMODE then
      Self.WriteMsg('Rotating to angle: '+ToStr(Ang));

    Minimap.SetCompassAngle(Ang);

    NearVeins := Self.GetVeinsInMyZone(MyZone);
    if NearVeins.Len() < 1 then
    begin
      NearVeins := Self.GetVeinsInMyZone(MyZone);
      if DEBUGMODE then
        Self.WriteMsg('No veins found nearby, switching zones');
      Self.NavigateToZone(Self.GetRandomZone(True));
      Exit;
    end;
  end;

  Self.PrevZone := Self.GetCurrentZone();
  for Vein in NearVeins do
  begin
    Mouse.Move(Vein);
    if MainScreen.IsUpText(['Mine Vein', 'Mine'], 75) then
      break;
  end;

  if (not MainScreen.IsUpText(['Mine Vein', 'Mine'], 75)) then
  begin
    Antiban.RandomRotate();
    Exit;
  end;

  Mouse.Click(MOUSE_LEFT);
  if (not MainScreen.DidRedClick) then Exit;
  XP := XPBar.Read();

  Minimap.WaitFlag(2);
  T.Init(SRL.NormalRange(1200,1750));

  while (not T.IsFinished) do
  begin
    if (not RSClient.IsLoggedIn) then Exit;
    if Inventory.IsFull() then break;
    if Chat.ClickContinue(False) then
      T.Restart;

    if XPBar.Read() > XP then
    begin
      XP := XPBar.Read();
      T.Restart();
    end;

    if (SRL.PercentShift(MainScreen.GetPlayerBox(), 500) >= PERCSHIFT) then
      T.Restart();

    if Self.DoAB() then
      T.Restart();

    if HOPONCHAT then
      Self.CheckForChat();

    if 'reach that' in Chat.GetMessage(7, [CHAT_COLOR_BLACK]) then
    begin
      Self.MineZoneBlock(Self.GetCurrentZone(), True);
      Exit;
    end;

    Wait(250);
  end;
end;

procedure TScript.Run();
begin
  if (not RSClient.IsLoggedIn) then
    if Login.GetPlayer.Password <> '' then
      Login.LoginPlayer
    else
    begin
      Self.WriteMsg('No player credentials');
      Exit;
    end;

  while (GetTimeRunning() < Self.ShutdownTime) do
  begin
    if (not RSClient.IsLoggedIn) then
    begin
      if Login.GetPlayer.Password <> '' then
        Login.LoginPlayer
      else
      begin
        Logout.ClickLogout();
        TerminateScript('No player credentials');
      end;
    end;

    if Self.FindReachMsg() then
    begin
      Logout.ClickLogout();
      TerminateScript('Cannot reach an object');
    end;

    if Inventory.Count() >= 27 then
    begin
      if Self.OnUpperLevel() then
        if (not Self.HandleLadder()) then
        begin
          Self.WriteMsg('Failed to climb the ladder');
          Self.MineZoneBlock(Self.GetCurrentZone());
          Continue;
        end;
      if Self.FindPayDirt() then
      begin
        if Self.GetSackCount() >= Self.PayDirtLimit then
        begin
          if (not Self.DepostDirt()) then
          begin
            Self.NavigateToPlace('Hopper');
            Continue;
          end;
          while Self.GetSackCount() > 0 do
          begin
            if (not Inventory.IsFull) then
              Self.SearchSack();
            Self.DepositOres();
          end;
        end else if Self.GetSackCount() < Self.PayDirtLimit then
          if (not Self.DepostDirt()) then
          begin
            Self.NavigateToPlace('Hopper');
            Continue;
          end;
      end;

      if Self.HasOres() then
      begin
        while Self.GetSackCount() > 0 do
        begin
          if (not Inventory.IsFull) then
            Self.SearchSack();
          Self.DepositOres();
        end;
        Self.DepositOres();
      end;
    end else
    begin
      if (not Self.OnUpperLevel()) then
      begin
        if (not Self.HandleLadder()) then
        begin
          Self.WriteMsg('Failed to climb the ladder');
          Continue;
        end;

        if SAMEZONE then
          Self.NavigateToZone(Self.PrevZone)
        else
          Self.NavigateToZone(Self.GetRandomFreeZone());
      end else
        Self.MineVeins();
    end;
  end;

  Logout.ClickLogout();
  TerminateScript('Time to shutdown');
end;

procedure TScript.Free();
begin
  RSClient.Image.Clear();
  FreeDTM(Self.DTM_PayDirt);
  Self.WriteMsg('Thanks for using Flight'#39's Motherlode-Miner!');
end;

procedure TScript.Init();
begin
  Self.Version            := 'BETA 3';
  Mouse.Speed             := Random(21, 27);
  ASyncMouse.Speed        := Mouse.Speed+SRL.NormalRange(2,5);
  Mouse.CanIdle           := False;
  Mouse.MissChance        := 13;
  Mouse.Brake             := True;
  Mouse.Distribution      := MOUSE_DISTRIBUTION_GAUSS;

  Login.AddPlayer(PNAME, PPASS, '', []);
  RSClient.Image.Clear(Mainscreen.Bounds);

  MM2MS.ZoomLevel         := Options.GetZoomLevel();
  Antiban.OnStartBreak    := @PauseRunTime;
  Antiban.OnFinishBreak   := @ResumeRunTime;

  with Self do
  begin
    StartXP               := XPBar.Read();
    ToolSlot              := -1;
    if LARGESACK then
      PayDirtLimit        := 134
    else
      PayDirtLimit        := 53;

    DTM_PayDirt           := DTMFromString('m6wAAAHic42ZgYJjJzMAwGYgXAvE8IJ4Gxd1QGiS2BIiXAvEZRgaGo0B8HogPA/FFID4ExOeA+DSUfxuIjwBxe0MdQ2mSJ0NOTglDXlEZmM3AwIgVSwJJdIwLYDcBO0YCAOJJFos=');

    if RSW.FindMap('MotherlodeMine2') = '' then
      DownloadToFile('https://i.imgur.com/YrhVnMG.png', IncludePath+'\SRL-F\osr\walker\maps\MotherlodeMine2.png');

    RSW.Setup('MotherlodeMine2', True, 2);
    RSW.ScreenWalk        := SCREENWALK;
    RSW.EnableRunAtEnergy := 85;
    RSW.OnWalkingEvent    := @OnWalkEvent;
    UpperLevelBounds      := [[276,133], [277,157], [287,160], [290,169], [295,173],
                              [302,178], [309,181], [314,188], [324,199], [336,199],
                              [351,164], [345,157], [343,138], [327,130], [292,130]];

    SetLength(Zones, 3);
    with Zones[0] do
    begin
      Area      := [[310,174], [313,185], [320,188], [326,201], [334,202],
                    [333,180], [321,176]];
      Veins     := [[316,177], [321,180], [325,180], [328,180], [335,184],
                    [335,188], [335,191], [335,195]];
      WalkTiles := [[312,178], [319,184], [326,187], [327, 194]];
      Block     := [0,0];
    end;
    with Zones[1] do
    begin
      Area      := [[317,156], [316,170], [327,178], [339,179], [347,171],
                    [349,162], [343,156], [343,140], [334,139], [333,150]];
      Veins     := [[325,154], [328,154], [332,154], [345,169], [341,169],
                    [332,175], [328,175], [321,171], [338,152], [338,148],
                    [338,143]];
      WalkTiles := [[320,166], [329,169], [328,160], [341,160], [342,148]];
      Block     := [314,167];
    end;
    with Zones[2] do
    begin
      Area      := [[303,163], [314,168], [319,156], [333,153], [334,140],
                    [327,131], [315,131], [302,138], [303,149]];
      Veins     := [[308,163], [308,159], [304,152], [304,148], [304,144],
                    [310,139], [314,139], [317,156], [317,152], [321,147],
                    [329,151], [333,147], [333,143], [315,136]];
      WalkTiles := [[313,161], [312,153], [309,145], [324,140]];
      Block     := [314,167];
    end;

    with LadderObj do
    begin
      Color   := CTS2(4873576, 8, 0.10, 0.12);
      UpText  := ['Climb'];
      Tiles   := [LadderTTile,LadderBTile];
      Expand  := 10;
    end;

    with HopperObj do
    begin
      Color   := CTS2(5662312, 17, 0.21, 0.49);
      UpText  := ['Deposit','Hopper'];
      Tiles   := [HopperTile];
      Expand  := 10;
    end;

    with SackObj do
    begin
      Color   := CTS2(5268591, 10, 0.07, 0.07);
      UpText  := ['Search','Sack'];
      Tiles   := [SackTile];
      Expand  := 10;
    end;

    with DBObj do
    begin
      Color   := CTS2(6847623, 8, 0.10, 0.49);
      UpText  := ['Deposit','Bank Deposit'];
      Tiles   := [DBTile];
      Expand  := 10;
    end;

    if (not HasTool()) then
    begin
      Logout.ClickLogout();
      TerminateScript('Pickaxe not found');
    end;

    SetupAntiban();
    BlockCoolDown.Start();
    TrueRunTime.Start();
    ShutdownTime := (MAXRUNTIME*60000)+Random(-(MAXRUNTIME*6000),(MAXRUNTIME*6000));
  end;

  AddOnTerminate(@Self.Free);
end;

begin
  ClearDebug();
  Bot.Init();
  Bot.Run();
end.
