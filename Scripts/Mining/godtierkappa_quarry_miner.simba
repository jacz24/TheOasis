{$UNDEF SCRIPT_ID}{$DEFINE SCRIPT_ID := '1f4c0b6c-7679-41fe-bde7-3015f486d45d'}
{$UNDEF SCRIPT_REVISION}{$DEFINE SCRIPT_REVISION := '7'}
{$IFDEF WINDOWS}{$DEFINE SCRIPT_GUI}{$ENDIF}
{$I SRL-T/osr.simba}
{$I WaspLib/osr.simba}

type
  ETask = (
    MINE_CIRCLET,  // Working
    MINE_HUMIDIFY, // Working Based On My Tests
    MINE_NO_HUMIDIFY, // Not Working

    MINE_GRANITE, // NOT WORKING
    MINE_GRANITE_3T // Not working
  );

var
  UseV2: Boolean := True; // Use the new rewrite (Recommended)
  CurrentTask: ETask := ETask.MINE_CIRCLET;
  UseSandBucketLimit: Boolean := True;
  SandBucketLimit: Int32 := 25000; // 25000 or -1 = Till Grinder Is Full
type
  EState = (
    WAIT_MINING,

    //Mining States
    MINE_SANDSTONE,
    USE_SPEC,
    USE_HUMIDIFY,
    DEPOSIT_SANDSTONE,

    GET_SAND_COUNT,
    LEVEL_UP,
    END_SCRIPT
  );

  TQuarryMiner = record(TBaseBankScript)
    State: EState;
    Mining, UseLimit, GotSandGrinderCount: Boolean;

    CircletCharge, PlayerHP, PrevHP,
    InvCount, PrevInvCount,
    SandstoneMaxLimit,
    CurrentSandGrinderCount, InventoryFullThreshold:  Int32;

    RSRock, RSGrind: TRSObject; // V1 Objects
    SandstoneRock, Sandstorm, GraniteRock: TRSObjectV2;
    Drew: TRSNPCV2;
    DropList, SandstoneList, GraniteList: TRSItemArray;
  end;

function TQuarryMiner.IsMining: Boolean;
begin
  Result := SRL.IsAnimating(MainScreen.GetPlayerBox(), MainScreen.NormalizeDistance(450), 350, 3);
end;
function TQuarryMiner.WaitMining(t: UInt32 = 3000): Boolean;
var
  GotXP: Boolean;
begin
  if Inventory.Count <> PrevInvCount then
  begin
    Mining := False;
    Exit(False);
  end;

  Result := WaitUntil((Mining := Self.IsMining) or (GotXP := XPBar.EarnedXP), 100, t);
  if GotXP then
    Result := Mining := False;
end;

procedure TQuarryMiner.Init(maxActions: UInt32; maxTime: UInt64); override;
begin
  Antiban.Skills := [ERSSkill.MINING, ERSSkill.TOTAL];
  Antiban.MinZoom := 5;
  Antiban.MaxZoom := 35;

  inherited;

  Map.SetupChunk(Chunk([48,46,50,43], 0));
  Objects.Setup(Map.Objects(), @Map.Walker);

  Self.GotSandGrinderCount := False; // Flag to check how many buckets we have in grinder
  UseLimit := UseSandBucketLimit;
  Self.SandstoneMaxLimit := SandBucketLimit;

  //Self.SandstoneRock := Objects.Get('Sandstone rocks'); //[8560, 38770],
  Self.SandstoneRock := TRSObjectV2.Setup(0.6,0.2, [[8560, 38774], [8568, 38778], [8572, 38778]]);
  Self.SandstoneRock.SetupUpText('ine Sandst');
  Self.SandstoneRock.Finder.Colors += CTS2(2253179, 17, 0.04, 0.35);
  Self.SandstoneRock.Walker := @Map.Walker;

  Self.GraniteRock := TRSObjectV2.Setup(0.6,0.2, [[8564, 38798], [8564, 38794], [8564, 38790], [8572, 38786]]);
  Self.GraniteRock.SetupUpText('ine Gran');
  Self.GraniteRock.Finder.Colors += CTS2(3630463, 26, 0.05, 0.36);
  Self.GraniteRock.Walker := @Map.Walker;

  //Self.Sandstorm := Objects.Get('Grinder');
  Self.Sandstorm.SetupEx([1.8, 3, 3], [[8504, 38798]]);
  Self.Sandstorm.SetupUpText(['Grin', 'der']);
  Self.Sandstorm.Finder.Colors += CTS2(4346725, 19, 0.17, 0.32);
  Self.Sandstorm.Finder.Colors += CTS2(8634567, 18, 0.11, 0.88);
  Self.Sandstorm.Finder.Colors += CTS2(8109251, 20, 0.09, 0.75);
  Self.Sandstorm.Walker := @Map.Walker;


  //Self.Drew := NPCs.Get('Drew');
  Self.Drew := TRSNPCV2.Setup(20, 6, [[8516, 38786]]);
  Self.Drew.SetupUpText(['Drew']);
  Self.Drew.Finder.Colors += CTS2(6328987, 9, 0.09, 0.96);
  Self.Drew.Finder.Colors += CTS2(7763838, 5, 0.51, 0.10);
  Self.Drew.Finder.Colors += CTS2(4677219, 7, 0.13, 0.20);
  Self.Drew.Finder.Colors += CTS2(10407117, 10, 0.04, 0.57);
  Self.Drew.Finder.Colors += CTS2(5727889, 14, 0.30, 0.61);
  Self.Drew.Finder.Colors += CTS2(13487572, 14, 1.24, 0.13);
  Self.Drew.Walker := @Map.Walker;

  if not UseV2 then
  begin
    RSW.Setup([RSRegions.BANDIT_CAMP_QUARRY]);
    RSGrind := RSObjects.BanditCampQuarryGrinder;
    RSRock  := RSObjects.SandStoneRock;
    RSRock.Filter.UpText := False;
  end;

  Self.SandstoneList := ['Sandstone (1kg)', 'Sandstone (2kg)', 'Sandstone (5kg)', 'Sandstone (10kg)'];
  Self.GraniteList := ['Granite (500g)', 'Granite (2kg)', 'Granite (5kg)'];
  Self.DropList := ['Granite (500g)', 'Granite (2kg)', 'Granite (5kg)']; // This just adds the bare minimum

  if CurrentTask = ETask.MINE_HUMIDIFY then // Sets the drop list if using the luna spellbook
  begin
    if Magic.GetSpellBook() <> ERSSpellBook.LUNAR then
      Self.Fatal('You need to be on lunar spellbook.');

    DropList := ['Granite (500g)', 'Granite (2kg)', 'Granite (5kg)'];
  end;


  if CurrentTask = ETask.MINE_CIRCLET then // Sets the drop list if using the Circlet
    DropList := ['Waterskin(0)','Granite (500g)', 'Granite (2kg)', 'Granite (5kg)'];
  if CurrentTask = ETask.MINE_NO_HUMIDIFY then // Sets the drop list if buying waterskins
    DropList := ['Granite (500g)', 'Granite (2kg)', 'Granite (5kg)'];
  if WLSettings.RemoteInput.HUDDebug then
  begin
    if not UseV2 then
    begin
      DebugObjectArray += RSRock;
      DebugObjectArray += RSGrind;
    end;

  end;

  Mouse.Speed += 10;
  Mouse.Gravity += 3;
  Mouse.Wind += 2;
end;

function TQuarryMiner.DropItems: Boolean;
begin
  Result := Inventory.ShiftDrop(DropList, Inventory.RandomPattern);
end;

function TQuarryMiner.InvToBuckets: Int32;
var
  sandstone_one_count, sandstone_two_count,
  sandstone_five_count, sandstone_ten_count: Int32;
begin
  sandstone_one_count := Inventory.CountItem('Sandstone (1kg)');
  sandstone_two_count := Inventory.CountItem('Sandstone (2kg)');
  sandstone_five_count := Inventory.CountItem('Sandstone (5kg)');
  sandstone_ten_count := Inventory.CountItem('Sandstone (10kg)');

  Result := (sandstone_one_count * 1) + (sandstone_two_count * 2) + (sandstone_five_count * 4) + (sandstone_ten_count * 8);
end;
function TQuarryMiner.ShouldDeposit(): Boolean;
begin
  if Self.InventoryFullThreshold < 1 then
    Self.InventoryFullThreshold := SRL.TruncatedGauss(28, 1); // Mean: 28, StdDev: 1

  Result := Inventory.Count >= Self.InventoryFullThreshold;
end;
function TQuarryMiner.Deposit: Boolean;
var
  current_inv_buckets: Int32;
begin
  current_inv_buckets := Self.InvToBuckets(); // Converts sandstone inventory to buckets
  if UseV2 then
  begin

    Result := Self.Sandstorm.Click or Self.Sandstorm.WalkClick;
    if Result then
      if WaitUntil(not Inventory.ContainsAny(Self.SandstoneList), 400, 4200) then
      begin
        Self.CurrentSandGrinderCount += current_inv_buckets;
        Self.InventoryFullThreshold := SRL.TruncatedGauss(28, 1);
        //Writeln(Chat.GetMessage(7, [Int32(CHAT_COLOR_BLACK)]));
      end;

    Self.DropItems;
    TotalActions += 1;
  end;

  if not UseV2 then
  begin
    Result := RSGrind.Click or RSGrind.WalkClick;
    if Result then
      if WaitUntil(not Inventory.ContainsAny(Self.SandstoneList), 400, 4200) then
      begin
        Self.CurrentSandGrinderCount += current_inv_buckets;
        Self.InventoryFullThreshold := SRL.TruncatedGauss(28, 1);
        //Writeln(Chat.GetMessage(7, [Int32(CHAT_COLOR_BLACK)]));
      end;

    Self.DropItems;
    TotalActions += 1;
  end;

end;

function TQuarryMiner.Mine: Boolean;
begin
  if UseV2 then
  begin
    Result := Mining := Self.SandstoneRock.Click or Self.SandstoneRock.WalkClick;
    if Result then
    begin
      Minimap.WaitPlayerMoving(300, 8000);
      Wait(1000, 1500);
    end;
  end;

  if not UseV2 then
  begin
    Result := Mining := RSRock.Click or RSRock.WalkClick;
    if Result then
    begin
      Minimap.WaitPlayerMoving(300, 8000);
      Wait(1000, 1500);
    end;
  end;
end;

function TQuarryMiner.RefillWaterskins: Boolean;
begin
  if Magic.IsSpellBook(ERSSpellBook.LUNAR) then
  begin
    Writeln('Refilling');
    if Magic.CastSpell(ERSSpell.HUMIDIFY) then
    begin
      Wait(1500, 2500);
      Result := True;
    end; //else

                          /// Removed fail safe because it was causing problems
                          // TODO ADD LATER
  //Logout.ClickLogout(24);
  //TerminateScript('No Lunar Spellbook, failsafe triggerd avoiding dying!');
  //end else
  //begin
  //Logout.ClickLogout(24);
  //TerminateScript('No Lunar Spellbook, failsafe triggerd avoiding dying!');
  end;
end;

procedure TQuarryMiner.GetSandstormCount();
begin
  Writeln('Getting Sandstorm Amount!');

  if Self.Drew.WalkSelectOption(['heck']) then
  begin
    Minimap.WaitMoving();
  end;

  if WaitUntil(Chat.GetChatTitle = 'Drew', 250, 5000) then
  begin
    Self.GotSandGrinderCount := True;
    Self.CurrentSandGrinderCount := StrToInt(Chat.GetChat().Between('for ', ' buckets').Replace(',', ''));
    //Writeln(Chat.GetChat().Between('for ', ' buckets').Replace(',', ''));
  end;
end;

function TQuarryMiner.EndScript: Boolean;
begin
  if Logout.ClickLogout() then
    TerminateScript('Ending Script! Shutdown');
end;

function TQuarryMiner.GetState: EState;
begin
  if WL.Activity.IsFinished then
    Exit(EState.END_SCRIPT);

  if Mining then
    Exit(EState.WAIT_MINING);

  if Chat.LeveledUp then
  begin
    Mining := False;
    Exit(EState.LEVEL_UP);
  end;

  if Self.UseLimit then
  begin
    if not Self.GotSandGrinderCount then
      Exit(EState.GET_SAND_COUNT);

    if CurrentSandGrinderCount >= Self.SandstoneMaxLimit then
      Exit(EState.END_SCRIPT);
  end;

  if Inventory.IsFull() or Self.ShouldDeposit() then
  begin
    Mining := False;
    Exit(EState.DEPOSIT_SANDSTONE);
  end;

  if Minimap.IsSpecWeapon and (Minimap.GetSpecLevel = 100) then
    Exit(EState.USE_SPEC);

  Exit(EState.MINE_SANDSTONE);

end;

procedure TQuarryMiner.Run(MaxActions: Int32; MaxTime: Int64);
begin
  ClearDebug;
  Self.Init(MaxActions, MaxTime);

  repeat

    //Self.GetSandstormCount();
    Self.State := Self.GetState();
    Self.SetAction(ToStr(Self.State));

    Self.InvCount := Inventory.Count();
    Self.PlayerHP := Minimap.GetHPLevel();


    if Self.InvCount <> Self.PrevInvCount then
      WL.Activity.Restart();


    case Self.State of
      EState.WAIT_MINING: Self.WaitMining();
      EState.LEVEL_UP: Chat.HandleLevelUp();
      EState.GET_SAND_COUNT: Self.GetSandstormCount();
      EState.USE_SPEC: Minimap.EnableSpec(100);
      //EState.WALK_SPOT:
      //EState.MINE_ROCK
      //EState.DROP_ITEMS
      EState.MINE_SANDSTONE: Self.Mine();
      EState.DEPOSIT_SANDSTONE: Self.Deposit();
      EState.END_SCRIPT: Break;
    end;

    //Writeln(IntToStr(PlayerHP) + '  : ' + IntToStr(PrevHP));

    if Self.PlayerHP < PrevHP then
      Self.RefillWaterskins;

    Self.PrevHP := Self.PlayerHP;
    Self.PrevInvCount := Self.InvCount;
    Self.DoAntiban;
  until Self.ShouldStop;
end;

var
  QuarryMiner: TQuarryMiner;

{$IFDEF SCRIPT_GUI}
type
  TQuarryMinerConfig = record(TScriptForm)
    Selector: TLabeledCombobox;
    SandLimitBox: TCheckBox;
    SandLimitEdit: TLabeledEdit;

    Config: TConfigJSON;
  end;

procedure TQuarryMinerConfig.SandLimitBoxChanged(Sender: TObject);
begin
  Self.SandLimitEdit.SetVisible(Self.SandLimitBox.IsChecked());
end;

procedure TQuarryMinerConfig.StartScript(Sender: TObject); override;
begin
  CurrentTask := ETask(Selector.Combobox.getItemIndex);
  UseSandBucketLimit := SandLimitBox.IsChecked();
  SandBucketLimit := StrToInt(SandLimitEdit.getText());

  Self.Config.Put('task', Ord(CurrentTask));
  Self.Config.Put('use_limit', UseSandBucketLimit);
  Self.Config.Put('limit', SandBucketLimit);
  inherited;
end;

procedure TQuarryMinerConfig.Run(); override;
var
  tab: TTabSheet;
begin
  Self.Config.Setup('god-quarry-miner');
  Self.Setup('God Quarry Miner');
  Self.Start.setOnClick(@Self.StartScript);

  Self.AddTab('Script Settings');
  tab := Self.Tabs[High(Self.Tabs)];

  Self.CreateAccountManager(tab);

  with Selector do
  begin
    Create(tab);
    SetCaption('Mining Style:');
    SetLeft(TControl.AdjustToDPI(40));
    SetTop(TControl.AdjustToDPI(170));
    SetStyle(csDropDownList);

    AddItemArray(['Mine (Circlet Of Water)', 'Mine (Humidify)', 'Mine (Buy Waterskins)', 'Granite Power Mine', '3-Tick Granite Power Mine']);
    SetItemIndex(Ord(CurrentTask));
  end;

  with SandLimitBox do
  begin
    Create(tab);
    setCaption('Enable Sand Collecting Limit');
    SetLeft(TControl.AdjustToDPI(40));
    SetTop(Self.Selector.GetBottom() + TControl.AdjustToDPI(10));

    if Self.Config.Has('use_limit') then
      SetChecked(Self.Config.GetBoolean('use_limit'))
    else
      SetChecked(UseSandBucketLimit);
    setOnChange(@Self.SandLimitBoxChanged);
  end;

  with SandLimitEdit do
  begin
    Create(tab);
    SetCaption('Buckets Of Sand Limit:');
    SetLeft(TControl.AdjustToDPI(40));
    SetTop(Self.SandLimitBox.GetBottom() + TControl.AdjustToDPI(10));

    SetToolTip('Shutdown After Collecting This Much Sand');

    if Self.Config.Has('limit') then
      SetText(ToStr(Self.Config.GetInt('limit')))
    else
      SetText(ToStr(SandBucketLimit));

    SetVisible(Self.SandLimitBox.IsChecked());
  end;

  Self.CreateVersionPanel(tab);

  Self.CreateAntibanManager();
  Self.CreateBankSettings();
  Self.CreateWaspLibSettings();
  Self.CreateAPISettings();

  inherited;
end;

var
  Config: TQuarryMinerConfig;
{$ENDIF}

begin
  {$IFDEF SCRIPT_GUI}
  Config.Run();
  {$ENDIF}
  QuarryMiner.Run(WLSettings.MaxActions(), WLSettings.MaxTime());
end.
