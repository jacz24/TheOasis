program MasterFarmerPicker_V1_2;
{$DEFINE SRL_USE_REMOTEINPUT}
{$I SRL/OSR.simba}

Type
  TInitForm = record
    Form: TForm;
    tPic: TPicture;
    FBGImg: TImage;
    FStartButton: TButton;
    TimeLabel,NameLabel,PassLabel,AccountLabel,PinLabel,BreakLabel,BreakLabel2,
    BreakALabel,BreakFLabel,SettingsLabel,FoodLabel,HealLabel,WalkLabel,
    ReportLabel: TLabel;
    RunInput,NameInput,PassInput,PinInput,BreakAfterInput,BreakForInput,HealInput: TEdit;
    FFoodBox: TComboBox;
    BreaksButton,WalkButton,ReportButton: TCheckBox;
  end;

  TScript = record
    FoodType: String;
    TakeBreaks,MSWalk,
    ScreenReport: Boolean;
    StartXP,PickCount,FailCount,
    HealPercent,BreakAfter,BreakFor,
    MaxRunTime: Int32;
    ShutdownTime,PrevXP: Int64;
    ReportTimer: TCountdown;

    BankTile,MarketTile,FarmerPnt, ArdyTile: TPoint;
    BankTiles: TPointArray;
    DropSlots: TIntegerArray;

    StunColor,ExcludeColor,
    BankColor,FarmerColor: TCTS2Color;
  end;

Var
  Bot: TScript;
  RSW: TRSWalker;
  GUI: TInitForm;
  LOCATION := "ARDY"; // ARDY, DRAYNOR
  FOOD := "NONE";

procedure TScript.WriteMsg(Message: String);
begin
  WriteLn('[Bot]: '+Message);
end;

procedure DownloadToFile(const URL, Filename: string);
var
  Client: Int32;
begin
  Client := InitializeHTTPClient(False);
  try
    GetHTTPPageEx(Client, URL, Filename);
  finally
    FreeHTTPClient(Client);
  end;
end;

procedure TInitForm.doStart(Sender: TObject);
begin
  Self.Form.Close();
  Bot.WriteMsg('Starting script');

  Login.AddPlayer(Self.NameInput.GetText(), Self.PassInput.GetText(), Self.PinInput.GetText(), []);
  Bot.FoodType := Self.FFoodBox.GetText();
  if Bot.FoodType = 'Wine' then Bot.FoodType := 'Jug of wine';
  Bot.HealPercent := StrToInt(Self.HealInput.GetText());
  Antiban.AddBreak(ONE_MINUTE*StrToInt(Self.BreakAfterInput.GetText()),
                   ONE_MINUTE*StrToInt(Self.BreakForInput.GetText()), 0.2, 1.0);

  Bot.MaxRunTime := StrToInt(Self.RunInput.GetText());
  Bot.ScreenReport := (Self.ReportButton.GetState = cbChecked);
  Bot.TakeBreaks := (Self.BreaksButton.GetState = cbChecked);
  RSW.ScreenWalk := (Self.WalkButton.GetState = cbChecked);

  Bot.ShutdownTime := (Bot.MaxRunTime*60000)+Random(-(Bot.MaxRunTime*6000),(Bot.MaxRunTime*6000));
end;

procedure TInitForm.Run;
begin
  Self.Form.Init(nil);
  with Self.Form do
  begin
    SetCaption('MasterFarmer Pickpocketer');
    SetHeight(357);
    SetWidth(626);
    SetPosition(poScreenCenter);
    SetColor(0);
  end;

  tPic.init();
  tPic.LoadFromFile(AppPath+'\Resources\BGCanvas_MF.png');

  FBGImg.Init(Self.Form);
  with FBGImg do
  begin
    SetParent(Self.Form);
    SetBounds(0,0,Self.Form.getWidth,Self.Form.getHeight);
    SetPicture(tPic);
  end;

  AccountLabel.Init(Self.Form);
  with AccountLabel do
  begin
    SetParent(Self.Form);
    SetCaption('Player settings');
    SetLeft(0);
    SetTop(0);
    GetFont().SetName('Bahnschrift');
    GetFont().SetColor(65280);
    GetFont().SetSize(14);
  end;

  NameLabel.Init(Self.Form);
  with NameLabel do
  begin
    SetParent(Self.Form);
    SetCaption('Name');
    SetLeft(30);
    SetTop(33);
    GetFont().SetName('Bahnschrift');
    GetFont().SetColor(12632256);
    GetFont().SetSize(12);
  end;

  PassLabel.Init(Self.Form);
  with PassLabel do
  begin
    SetParent(Self.Form);
    SetCaption('Pass');
    SetLeft(33);
    SetTop(90);
    GetFont().SetName('Bahnschrift');
    GetFont().SetColor(12632256);
    GetFont().SetSize(12);
  end;

  PinLabel.Init(Self.Form);
  with PinLabel do
  begin
    SetParent(Self.Form);
    SetCaption('Pin');
    SetLeft(39);
    SetTop(144);
    GetFont().SetName('Bahnschrift');
    GetFont().SetColor(12632256);
    GetFont().SetSize(12);
  end;

  BreakLabel.Init(Self.Form);
  with BreakLabel do
  begin
    SetParent(Self.Form);
    SetLeft(222);
    SetTop(0);
    SetCaption('Break settings');
    GetFont().SetName('Bahnschrift');
    GetFont().SetColor(65280);
    GetFont().SetSize(14);
  end;

  TimeLabel.Init(Self.Form);
  with TimeLabel do
  begin
    SetParent(Self.Form);
    SetLeft(223);
    SetTop(33);
    SetCaption('Max run time');
    GetFont().SetName('Bahnschrift');
    GetFont().SetColor(12632256);
    GetFont().SetSize(12);
  end;

  BreakALabel.Init(Self.Form);
  with BreakALabel do
  begin
    SetParent(Self.Form);
    SetLeft(226);
    SetTop(138);
    SetCaption('Break after');
    GetFont().SetName('Bahnschrift');
    GetFont().SetColor(12632256);
    GetFont().SetSize(12);
  end;

  BreakFLabel.Init(Self.Form);
  with BreakFLabel do
  begin
    SetParent(Self.Form);
    SetLeft(234);
    SetTop(213);
    SetCaption('Break for');
    GetFont().SetName('Bahnschrift');
    GetFont().SetColor(12632256);
    GetFont().SetSize(12);
  end;

  SettingsLabel.Init(Self.Form);
  with SettingsLabel do
  begin
    SetParent(Self.Form);
    SetLeft(447);
    SetTop(0);
    SetCaption('Script settings');
    GetFont().SetName('Bahnschrift');
    GetFont().SetColor(65280);
    GetFont().SetSize(14);
  end;

  FoodLabel.Init(Self.Form);
  with FoodLabel do
  begin
    SetParent(Self.Form);
    SetLeft(462);
    SetTop(32);
    SetCaption('Food type');
    GetFont().SetName('Bahnschrift');
    GetFont().SetColor(12632256);
    GetFont().SetSize(12);
  end;

  FFoodBox.Init(Self.Form);
  with FFoodBox do
  begin
    SetParent(Self.Form);
    SetBounds(458,62,100,23);
    SetReadOnly(True);
    SetSelText('Lobster');
    GetItems().Add('Wine');
    GetItems().Add('Cake');
    GetItems().Add('Trout');
    GetItems().Add('Salmon');
    GetItems().Add('Tuna');
    GetItems().Add('Lobster');
    GetItems().Add('Bass');
    GetItems().Add('Swordfish');
    GetItems().Add('Monkfish');
    GetItems().Add('Shark');
  end;

  HealLabel.Init(Self.Form);
  with HealLabel do
  begin
    SetParent(Self.Form);
    SetLeft(454);
    SetTop(100);
    SetCaption('Heal percent');
    GetFont().SetName('Bahnschrift');
    GetFont().SetColor(12632256);
    GetFont().SetSize(12);
  end;

  NameInput.Init(Self.Form);
  with NameInput do
  begin
    SetParent(Self.Form);
    SetBounds(15,62,80,23);
  end;

  PassInput.Init(Self.Form);
  with PassInput do
  begin
    SetParent(Self.Form);
    SetBounds(15,119,80,23);
  end;

  PinInput.Init(Self.Form);
  with PinInput do
  begin
    SetParent(Self.Form);
    SetBounds(15,172,80,23);
  end;

  RunInput.Init(Self.Form);
  with RunInput do
  begin
    SetParent(Self.Form);
    SetText('240');
    SetBounds(240,62,80,23);
  end;

  BreakAfterInput.Init(Self.Form);
  with BreakAfterInput do
  begin
    SetParent(Self.Form);
    SetText('115');
    SetBounds(239,173,80,23);
    GetFont().SetName('');
    GetFont().SetColor(0);
    GetFont().SetSize(9);
  end;

  BreakForInput.Init(Self.Form);
  with BreakForInput do
  begin
    SetParent(Self.Form);
    SetText('25');
    SetBounds(240,242,80,23);
  end;

  HealInput.Init(Self.Form);
  with HealInput do
  begin
    SetParent(Self.Form);
    SetText('55');
    SetBounds(470,132,80,23);
  end;

  BreakLabel2.Init(Self.Form);
  with BreakLabel2 do
  begin
    SetParent(Self.Form);
    SetLeft(241);
    SetTop(99);
    SetCaption('Take breaks');
    GetFont().SetName('Bahnschrift');
    GetFont().SetColor(12632256);
    GetFont().SetSize(12);
  end;

  BreaksButton.Init(Self.Form);
  with BreaksButton do
  begin
    SetParent(Self.Form);
    SetCaption('');
    SetLeft(215);
    SetTop(101);
  end;

  WalkLabel.Init(Self.Form);
  with WalkLabel do
  begin
    SetParent(Self.Form);
    SetLeft(480);
    SetTop(164);
    SetCaption('MS walking');
    GetFont().SetName('Bahnschrift');
    GetFont().SetColor(12632256);
    GetFont().SetSize(12);
  end;

  WalkButton.Init(Self.Form);
  with WalkButton do
  begin
    SetParent(Self.Form);
    SetCaption('');
    SetLeft(452);
    SetTop(166);
  end;

  ReportLabel.Init(Self.Form);
  with ReportLabel do
  begin
    SetParent(Self.Form);
    SetLeft(27);
    SetTop(220);
    SetCaption('Screen report');
    GetFont().SetName('Bahnschrift');
    GetFont().SetColor(12632256);
    GetFont().SetSize(12);
  end;

  ReportButton.Init(Self.Form);
  with ReportButton do
  begin
    SetParent(Self.Form);
    SetCaption('');
    SetBounds(4,222,25,19);
  end;

  FStartButton.Init(Self.Form);
  with FStartButton do
  begin
    SetParent(Self.Form);
    SetCaption('Start!');
    SetBounds(235,295,116,47);
    GetFont().SetName('Bahnschrift');
    GetFont().SetSize(14);
    SetOnClick(@Self.doStart);
  end;

  try
    Self.Form.ShowModal();
    Self.Form.Free();
  except
    Bot.WriteMsg('Encountered an exception while loading the GUI');
  end;
end;

procedure TScript.DrawReport(const Location: TPoint; Color: Integer; ScriptName: String;
                             VarNames: TStringArray; VarValues: TVariantArray);
var
  i: Int32;
  txtArr: TStringArray;
begin
    if VarNames.Len <> Length(VarValues) then
    begin
      Writeln('VarNames and VarValues must be the same length');
      exit;
    end;

    RSClient.Image.Clear();
    setLength(txtArr, Length(VarNames)+1);
    txtArr[0] := ScriptName;
    for i:=0 to high(VarNames) do
      txtArr[i+1] := VarNames[i]+': '+toStr(VarValues[i]);
    for i:=0 to high(txtArr) do
      RSClient.Image.DrawText(txtArr[i], [Location.X, Location.Y+(i*16)], Color);
end;

procedure TScript.Report();
var
  XpGained:Int32;
  PickPercent: Double;
begin
  XpGained := Max(1,(XPBar.Read()-Self.StartXP));
  PickPercent := (Self.PickCount/(Self.PickCount+Self.FailCount));
  ClearDebug();
  WriteLn('+---| STATS |----------------------------------------');
  WriteLn('|- Script Runtime : ', SRL.MsToTime(GetTimeRunning, Time_Short));
  WriteLn('|- Exp gained     : ', Round(XpGained,2),'(', Round(XpGained / (GetTimeRunning()/1000/60/60)),' / hr)');
  WriteLn('|- Success rate   : ', Round(PickPercent*100), '%');
  if Self.TakeBreaks then
    WriteLn('|- Until break    : ', Antiban.TimeUntilBreak(Antiban.Breaks[0]));
  WriteLn('|- Until shutdown : ', SRL.MsToTime(Self.ShutdownTime-GetTimeRunning, Time_Short));
  WriteLn('+----------------------------------------------------');

  if Self.ScreenReport then
  begin
    RSClient.Image.Clear();
    if Self.TakeBreaks then
      Self.DrawReport([10,24], 14255626, 'MasterFarmer Picker',
                        ['Runtime','XP gained','Success rate','Until break','Shutdown'],
                        [SRL.MsToTime(GetTimeRunning, Time_Short),toStr(Round(XpGained,2))+'('+toStr(Round(XpGained / (GetTimeRunning()/1000/60/60)))+' / hr)',
                        toStr(Round(PickPercent*100))+'%', Antiban.TimeUntilBreak(Antiban.Breaks[0]), SRL.MsToTime(Self.ShutdownTime-GetTimeRunning, Time_Short)]) else

      Self.DrawReport([10,24], 14255626, 'MasterFarmer Picker',
                        ['Runtime','XP gained','Success rate','Shutdown'],
                        [SRL.MsToTime(GetTimeRunning, Time_Short),toStr(Round(XpGained,2))+'('+toStr(Round(XpGained / (GetTimeRunning()/1000/60/60)))+' / hr)',
                        toStr(Round(PickPercent*100))+'%', SRL.MsToTime(Self.ShutdownTime-GetTimeRunning, Time_Short)]);
  end;
end;

procedure TMouse.RandomMovement();
var
  S: Int32;
begin
  S := Self.Speed;
  Self.Speed := 4;
  Self.Move(Box(Mouse.Position, 75, 75), True, );
  Self.Speed := S;
end;

procedure TScript.BankAntiban(Percent: Double);
var
  randP: Double;
begin
  if Random() <= (Percent/100) then
  begin
    Antiban.DebugLn('Bank screen antiban');
    randP := Random();
    if randP < 0.33 then
      Mouse.RandomMovement()
    else if (randP >= 0.33) and (randP < 0.66) then
      wait(2800, 4000)
    else if randP > 0.66 then
    begin
      // Copied version of 'random right click' antiban, minus the additional debug msg
      Mouse.Move(GetClientBounds(), True, MOUSE_DISTRIBUTION_RANDOM);

      if ChooseOption.Open() then
      begin
        if Random() < 0.50 then
          Mouse.Move(ChooseOption.Bounds);

        Wait(0, 8000, wdLeft);

        ChooseOption.Close();
      end;
    end;

  end;
end;

procedure TScript.DoSkillHover();
begin
  Antiban.HoverSkill(ERSSKILL.THIEVING, random(1700, 3200), True)
end;

procedure TAntiBan.HoverMSTile(DotType: ERSMinimapDot; RightClick: Boolean = False);
var
  Tries: Int32;
  msBox: TBox;
  tpa,cTPA: TPointArray;
  cArr: TIntegerArray;
begin
  tpa := Minimap.GetDots(DotType);
  if tpa.Len() < 1 then Exit;

  repeat
    inc(Tries);
    msBox := Minimap.PointToMsBox(tpa[random(low(tpa),high(tpa))]);
    if MainScreen.Bounds.Contains(msBox) then
    begin
      msBox := msBox.Expand(5);
      if (not MainScreen.Bounds.Contains(msBox)) then Continue;
      Self.DebugLn('Hovering random ' + toStr(DotType));
      // Get all colors on the tile
      // Extract the rarest
      // Gather points
      // Mouse to random point
      cArr := getColors(tpaFromBox(msBox));
      if (SRL.FindColors(cTPA, cArr.Min, msBox) > 0) then
      begin
        Mouse.Move(cTPA.Mean());
        if RightClick then
          Mouse.Click(MOUSE_RIGHT);

        wait(1500, 2700);
        if RightClick then
          ChooseOption.Close();
      end;
      exit;
    end;
  until(Tries > 10);
end;

procedure TAntiban.HoverMSItems();
begin
  Self.HoverMSTile(ERSMinimapDot.ITEM);
end;

procedure TAntiban.HoverMSNPCs();
begin
  Self.HoverMSTile(ERSMinimapDot.NPC);
end;

procedure TAntiban.HoverMSPlayers();
begin
  Self.HoverMSTile(ERSMinimapDot.PLAYER);
end;

procedure TScript.SetupAntiban();
begin
  Antiban.AddTask(ONE_SECOND*10, @Mouse.RandomMovement);
  Antiban.AddTask(ONE_MINUTE*3,  @Antiban.RandomRotate);
  Antiban.AddTask(ONE_MINUTE*4,  @Antiban.HoverMSItems);
  Antiban.AddTask(ONE_MINUTE*4,  @Antiban.HoverMSNPCs);
  Antiban.AddTask(ONE_MINUTE*4,  @Antiban.HoverMSPlayers);
  Antiban.AddTask(ONE_MINUTE*8,  @Self.DoSkillHover);
  Antiban.AddBreak(ONE_MINUTE*18, ONE_SECOND*40, 0.2, 0.0);
end;

procedure TScript.DoAB();
begin
  Antiban.DismissRandom();
  if Antiban.DoAntiban() then
    if (not RSClient.IsLoggedIn) then
      Login.LoginPlayer();
end;

function TRSInventory.GetRandomUsedSlot(): Int32;
var
  i: Int32;
  slots: TIntegerArray;
begin
  for i:=0 to 27 do
    if Self.IsSlotUsed(i) then
      slots += i;

  if slots.Len > 0 then
    Result := Random(slots[low(slots)], slots[high(slots)]);
end;

procedure TRSInventory.QuickShiftDrop(Slots: TIntegerArray);
var
  Boxes: TBoxArray;
  I: Int32;
  Circle: TCircle;
begin
  if (Length(Slots) = 0) then
    Exit();

  IsKeyDown(VK_SHIFT); // Clear cache

  Boxes := Self.GetSlotBoxes();

  try
    if not IsKeyDown(VK_SHIFT) then
      KeyDown(VK_SHIFT);
    for i:=0 to high(Slots) do
    begin
      if Self.IsSlotUsed(Slots[I]) then
      begin
        Mouse.Click(Self.GetSlotBox(Slots[I]), MOUSE_LEFT);

        // Spam click a little
        for 1 to SRL.TruncatedGauss(0, 3) do
        begin
          Circle.X := Mouse.Position().X;
          Circle.Y := Mouse.Position().Y;
          Circle.Radius := 5;

          Mouse.Click(Circle, MOUSE_LEFT, True);
        end;

        Wait(10, 40);
      end;
    end;
  finally
    if IsKeyDown(VK_SHIFT) then
      KeyUp(VK_SHIFT);
  end;
end;

function TScript.DropJunkSeeds(): Boolean;
var
  i: Int32;
  fSlots,dSlots: TIntegerArray;
begin
  dSlots := [0,1,2,3,4,5,6,7,8,9,10,11];
  //if (not Inventory.FindItem(Self.FoodType, fSlots)) then
  //begin
  //  Self.DoBanking();
  //  Exit(True);
  //end;
  Self.WriteMsg('Dropping Seeds');
  if Self.FoodType = 'Cake' then
    if (not Inventory.FindItems(['Slice of cake','2/3 cake','Cake'], fSlots)) then
    begin
      Self.DoBanking();
      Exit(True);
    end;

  //fSlots.ClearDuplicates();
  wait(45,85);

  for i:=0 to high(fSlots) do
    dSlots.Remove(fSlots[i]);

  Inventory.QuickShiftDrop(Inventory.ErrorPattern(dSlots));
  Wait(175,350);
  Result := True;
  if Keyboard.IsKeyDown(VK_SHIFT) then
    Keyboard.KeyUp(VK_SHIFT);
end;

function TScript.FindBank(): TPoint;
var
  i: Int32;
  TPA: TPointArray;
  ATPA: T2DPointArray;
  Finder: TRSObjectFinder;
begin
  Finder.ColorClusters += [
      CTS2(6120041, 4, 1.11, 1.12), // Grey
      CTS2(1069929, 2, 0.15, 1.05), // Brown
      3];
  Finder.Grow := 2;
  Finder.ClusterDistance := 4;
  ATPA := MainScreen.FindObject(Finder);
  ATPA.SortByMiddle(Mainscreen.Center);

  for TPA in ATPA do
  begin
    Mouse.Move(TPA.Mean());
    if MainScreen.IsUpText(['Bank Bank', 'Bank booth']) then
      Exit(Mouse.Position);
  end;
end;

procedure TScript.DoBanking();
  function OpenBank(): Boolean;
  begin
    if BankPin.IsOpen() then
      BankPin.Enter(Login.GetPlayer.Pin);
    Result := Bank.Open(Self.FindBank());
  end;

var
  i,s: Int32;
  Food: String;
  fSlots: TIntegerArray;
  T: TCountdown;
begin
  if RSW.GetMyPos().DistanceTo(BankTile) >= 7 then
  begin
    Self.WriteMsg('Walking to the bank');
    RSW.WebWalk(Self.BankTile);
    if RSW.GetMyPos().DistanceTo(BankTile) >= 10 then Exit;
  end;

  if (not Bank.IsOpen()) then
    if (not OpenBank()) then
    begin
      Logout.ClickLogout();
      TerminateScript('Failed to open bank');
      Exit;
    end;

  Wait(175,350);
  Self.BankAntiban(20);

  Self.WriteMsg('Withdrawing food');
  for i:=12 to 27 do
    if Inventory.IsSlotUsed(i) then
      Bank.DepositSlot([i, BANK_DEPOSIT_ALL], False);

  Wait(175,350);

  if (not Bank.IsOpen()) then Exit;
  Food := Self.FoodType;
  if Food = 'Wine' then Food := 'Jug of wine';

  for i:=1 to 3 do
  begin
    s := Bank.CountItemStack(Food);
    if s >= 8 then break;
    Wait(175,350);
  end;

  if s < 8 then
  begin
    Bank.Close();
    Logout.ClickLogout();
    TerminateScript('Out of food');
    exit;
  end;

  Bank.WithdrawItem([Food, BANK_WITHDRAW_ALL_BUT_ONE], False);
  Wait(175,350);

  T.Init(SRL.NormalRange(4500,5500));
  while (not T.IsFinished) do
  begin
    if Inventory.FindItem(Food, fSlots) then
      break;
    Self.BankAntiban(10);
    wait(35, 75);
  end;

  if (not Inventory.FindItem(Food, fSlots)) then
  begin
    Self.WriteMsg('Timed out while withdrawing food');
    if Bank.IsOpen() then
      Bank.Close();
    wait(random(2700,4100));
    Exit;
  end;

  Self.BankAntiban(20);

  Bank.DepositSlot([random(fSlots[0],fSlots[high(fSlots)]), 5], False);
  T.Init(5000);
  while (not T.IsFinished) do
  begin
    if (not Inventory.IsFull()) then
      break;
    Self.BankAntiban(10);
    Wait(175,350);
  end;

  fSlots := [];
  if Random() < 0.86 then
  begin
    if Inventory.FindItem(Food, fSlots) then
    begin
      Bank.DepositSlot([random(fSlots[0],fSlots[high(fSlots)]), 1], False);
      Self.BankAntiban(20);
      if Random() < 0.41 then
      begin
        fSlots := [];
        if Inventory.FindItem(Food, fSlots) then
          Bank.DepositSlot([random(fSlots[0],fSlots[high(fSlots)]), 1], False);
      end;
    end;
  end;

  Self.BankAntiban(20);
  T.Init(srl.NormalRange(4500,5500));
  while (not T.IsFinished) do
  begin
    if (not Bank.IsOpen()) then
      break;
    Bank.Close();
    Wait(175,350);
  end;

  Self.WriteMsg('Finished banking, walking back to the market');

  RSW.WebWalk(Self.MarketTile);
  Wait(175,350);
end;

procedure TScript.ConfigInv();
var
  i: Int32;
  Slots : TIntegerArray = [0..27];
  fSlots: TIntegerArray;
begin
  for i:=0 to high(Slots) do
    if (not Inventory.IsSlotUsed(Slots[i])) then
      Self.DropSlots += Slots[i];

  i:=0;
  //for i:=0 to high(fSlots) do
    //Self.DropSlots += fSlots[i];

  if Self.FoodType = 'Cake' then
  begin
    fSlots := [];
    if Inventory.FindItems(['Slice of cake','2/3 cake','Cake'], fSlots) then
      for i:=0 to high(fSlots) do
        Self.DropSlots += fSlots[i];
  end;

  Self.DropSlots.ClearDuplicates();
end;

function TScript.Heal(): Boolean;
var
  S,i: Int32;
  Foods: TStringArray;
  T: TCountDown;
begin
  if (Minimap.GetHPPercent() > SRL.NormalRange((Self.HealPercent*0.85),(Self.HealPercent*1.15))) then
    Exit;
  Result := True;
  Foods := [Self.FoodType];
  if Self.FoodType = 'Wine' then Foods := ['Jug of wine'];
  if Self.FoodType = 'Cake' then Foods := ['Slice of cake','2/3 cake','Cake'];

  for i:=0 to high(Foods) do
  begin
    if Inventory.FindItem(Foods[i], S) then
    begin
      Inventory.ClickItem(Foods[i]);
      break;
    end;

    if (i=high(Foods)) then
      if (not Inventory.FindItem(Foods[i], S)) then
      begin
        Self.DoBanking();
        Exit;
      end;
  end;

  T.Init(srl.NormalRange(2000,3100));
  while (not T.IsFinished) do
  begin
    if (Minimap.GetHPPercent() > Self.HealPercent) then Exit;
    wait(45,85);
  end;
end;

procedure TScript.CheckForCombat();
var
  S: String;
begin
  S := Chat.GetMessage(7, CHAT_MESSAGE_COLORS);
  if S.Pos('during combat') > 0 then
  begin
    Self.WriteMsg('Player in combat, running to bank');
    RSW.WebWalk(BankTile);
    Self.DropJunkSeeds();
    Inventory.ClickSlot(Inventory.GetRandomUsedSlot(), 'Examine');
    Self.Heal();
    Bank.Close();
    RSW.WebWalk(MarketTile);
    while Chat.GetMessage(7, CHAT_MESSAGE_COLORS).Pos('during combat') > 0 do
    begin
      Inventory.ClickSlot(Inventory.GetRandomUsedSlot(), 'Examine');
      wait(2600, 3500);
    end;
  end;
end;

function TScript.GetFarmer(): TPoint;
var
  pt: TPoint;
  h,i: Int32;
  found: Boolean;
  ATPA,ETPA: T2DPointArray;
  Finder,Exclude: TRSObjectFinder;
begin
  Finder.Colors += Self.FarmerColor;
  Finder.Erode := 1;
  Finder.ClusterDistance := 4;

  ATPA := MainScreen.FindObject(Finder);
  if ATPA.Len < 1 then Exit;

  ATPA.SortByMiddle(Mainscreen.Center);
  Result := ATPA[0].Mean;

  Exclude.Colors += Self.ExcludeColor;
  Exclude.ClusterDistance := 5;

  ETPA := MainScreen.FindObject(Exclude);
  if ETPA.Len > 0 then
  begin
    ETPA.SortByMiddle(Mainscreen.Center);
    for h:=0 to high(ATPA) do
    begin
      pt := ATPA[h].Mean;
      for i:=0 to high(ETPA) do
      begin
        if ETPA[i].Mean.DistanceTo(pt) < 20 then
        begin
          Found := False;
          break;
        end else
          Found := True;
      end;

      if (not Found) then Continue;

      Exit(pt);
    end;
  end;
end;

function TScript.FindFarmer(SearchTime: Int32): Boolean;
var
  Range,S: Int32;
  mPt: TPoint;
  T: TCountdown;
  Miss: Double;
  Temp: Double := Mouse.MissChance;
begin
  if MainScreen.IsUpText(['Pickp','ocket Master','Pickpocket Mast','et M','r Far']) then
  begin
    wait(10,90);
    if Random() < 0.26 then
      Mouse.Move(Mouse.Position(), 5, True);
    Exit(True);
  end;
  T.Init(SearchTime);
  while (not T.IsFinished) do
  begin
    Self.FarmerPnt := Self.GetFarmer();
    if Self.FarmerPnt.X > 0 then
      break;
    case Random() < 0.51 of
      True:  Minimap.SetCompassAngle(Minimap.GetCompassAngle() - random(20, 70));
      False: Minimap.SetCompassAngle(Minimap.GetCompassAngle() + random(20, 70));
    end;
    wait(15,25);
  end;

  Self.FarmerPnt := Self.GetFarmer();
  if Self.FarmerPnt.X < 1 then
  begin
    if LOCATION = "DRAYNOR" then
    begin
    Bank.Close();
    Self.WriteMsg('Master farmer not found, walking to market center');
    RSW.WebWalk(MarketTile);
    case Random() < 0.51 of
      True:  Minimap.SetCompassAngle(Minimap.GetCompassAngle() - random(20, 70));
      False: Minimap.SetCompassAngle(Minimap.GetCompassAngle() + random(20, 70));
    end;
    end;
    if LOCATION = "ARDY" then
    begin
    Bank.Close();
    Self.WriteMsg('Master farmer not found, walking to market center');
    RSW.WebWalk(ArdyTile);
    case Random() < 0.51 of
      True:  Minimap.SetCompassAngle(Minimap.GetCompassAngle() - random(20, 70));
      False: Minimap.SetCompassAngle(Minimap.GetCompassAngle() + random(20, 70));
    end;
    end;
    Exit;
  end;

  S := Mouse.Speed;
  Range := Trunc(Power(Mouse.Position().DistanceTo(Self.FarmerPnt), 0.80)); // how much possible range to miss
  Miss := SRL.SkewedRand(0.9, 0.1, 1.5); // Where miss will happen. 1 = destination (P).

  mPt.X := Trunc((1-Miss)*Mouse.Position().X + Miss*Self.FarmerPnt.X);
  mPt.Y := Trunc((1-Miss)*Mouse.Position().Y + Miss*Self.FarmerPnt.Y);

  mPt.X += SRL.NormalRange(-Range, Range);
  mPt.Y += SRL.NormalRange(-Range, Range);

  Mouse.Move(mPt);
  Mouse.Speed := round(S*0.85);

  ASyncMouse.Move(Self.FarmerPnt);

  while ASyncMouse.IsMoving() do
  begin
    Self.FarmerPnt := Self.GetFarmer();
    if Self.FarmerPnt.X > 0 then
      ASyncMouse.ChangeDestination(Self.FarmerPnt);

    if MainScreen.IsUpText(['Pickp','ocket Master','Pickpocket Mast','et M','r Far']) then
    begin
      Mouse.Speed := S;
      Mouse.MissChance := Temp;
      Exit(true);
    end;

    Wait(30);
  end;

  Result := MainScreen.IsUpText(['Pickp','ocket Master','Pickpocket Mast','et M','r Far']);
  Mouse.Speed := S;
  Mouse.MissChance := Temp;

  if MainScreen.IsUpText(['Martin']) then
  begin
    Self.WriteMsg('Only Martin found, walking to market center');
    RSW.WebWalk(MarketTile);
    Wait(45,115);
    Exit;
  end;
  if MainScreen.IsUpText(['Richard']) then
  begin
    Self.WriteMsg('Only Richard found, walking to market center');
    RSW.WebWalk(Self.ArdyTile);
    Wait(45,115);
    Exit;
  end;
end;

procedure TScript.DoPickpocketing();
  function isStunned(): Boolean;
  var
    tpa: TPointArray;
  begin
    Result := (SRL.FindColors(tpa, Self.StunColor, Mainscreen.GetPlayerBox) > 0);
  end;
begin
  Self.WriteMsg('Pickpocketing');
  Self.checkForCombat();

  if isStunned() then
  begin
    Inc(Self.FailCount);
    Self.DropJunkSeeds();
    Self.Heal();
    while isStunned() do
    begin
      Self.DoAB();
      wait(75,110);
    end;
  end;

  if Inventory.IsFull() then
  begin
    if Self.DropJunkSeeds() then Exit;
    wait(35,70);
  end;

  if XPBar.Read() > Self.PrevXP then
  begin
    Inc(Self.PickCount);
    Self.PrevXP := XPBar.Read();
  end;

  if (not isStunned()) then
    if Self.FindFarmer(3100) then
    begin
      Mouse.Click(MOUSE_LEFT);
      if (not MainScreen.DidRedClick) then Exit;
    end;
  Self.DoAB();
end;

procedure TScript.WritePosition();
begin
  Self.WriteMsg('{X = ' + IntToStr(RSW.GetMyPos().X) + ', Y = ' + IntToStr(RSW.GetMyPos().Y) + '}');
end;

procedure TScript.Free();
begin
  RSClient.Image.Clear();
end;

procedure TScript.Init();
begin
  RSClient.Image.Clear();
  Self.SetupAntiban();
  Self.ReportTimer.Init(ONE_MINUTE*1);

  RSClient.Image.SetFontName('Bahnschrift');
  RSClient.Image.SetFontSize(15);
  RSClient.Image.SetFontAntialiasing(False);

  RSW.Setup('world');

  Mouse.Speed       := Random(16, 19);
  ASyncMouse.Speed  := Mouse.Speed;
  MM2MS.ZoomLevel   := Options.GetZoomLevel();
  Self.StartXP      := XPBar.Read();
  Self.PrevXP       := Self.StartXP;
  Self.ConfigInv();

  Self.BankTile     := [4181, 3471];
  Self.MarketTile   := [4130, 3449];
  Self.ArdyTile     := [2374,3000];

  Self.BankColor    := CTS2(606294, 2, 0.09, 1.12);
  Self.BankTiles    := [[4172, 3466], [4172, 3470], [4172, 3474], [4172, 3478], [4172, 3481]];

  Self.FarmerColor  := CTS2(5271659, 13, 0.07, 0.08);
  Self.ExcludeColor := CTS2(1924630, 10, 0.21, 4.12);
  Self.StunColor    := CTS2(2677992, 3, 0.03, 3.53);

  AddOnTerminate(@Self.Free);
end;

procedure TMouse.HumanMove(Point: TPoint);
var
  mPt: TPoint;
  S: Int32;
  Miss: Double;
  Range: Int64;
begin
  S := Self.Speed;
  Range := Trunc(Power(Self.Position().DistanceTo(Point), 0.80)); // how much possible range to miss
  Miss := SRL.SkewedRand(0.9, 0.1, 1.5); // Where miss will happen. 1 = destination (P).

  mPt.X := Trunc((1-Miss)*Self.Position().X + Miss*Point.X);
  mPt.Y := Trunc((1-Miss)*Self.Position().Y + Miss*Point.Y);

  mPt.X += SRL.NormalRange(-Range, Range);
  mPt.Y += SRL.NormalRange(-Range, Range);

  Self.Move(mPt);
  Self.Speed := round(S*0.85);
  Self.Move(Point);
  Self.Speed := S;
end;

function TScript.FarmerInTrap(): Boolean;
begin
  if MainScreen.IsVisible(RSW.GetTileMS([2373, 2988]).mean) then if RSW.GetTileMS([2373, 2988]).Contains(Self.GetFarmer) then
  begin
    Self.WriteMsg('Farmer in Trap!');
    Exit(True);
  end;
  //Antiban.RandomRotate();
  Exit(False);
end;

procedure TScript.WalkInToPos();
begin
  Self.WritePosition();
  Self.WriteMsg('Walking to exact pos');

  if Self.AtTile([2373, 2996],0) then Exit();

  if SRL.Dice(24) then // Occasionally change screenwalk
  begin
    if (MSWalk) then
    begin
      RSW.ScreenWalk     := False;
    end else
      RSW.ScreenWalk     := True;
  end;

  Mouse.HumanMove(RSW.GetTileMS([2373, 2996]).Mean);
  if MainScreen.IsUpText(['Farmer']) then
  begin
    Self.WriteMsg('something under exact pos, right click walk');
    ChooseOption.Select('Walk here');
  end else Mouse.Click(MOUSE_LEFT);;
  WaitUntil(Self.AtTile([2373, 2996],0),75,4200);
  RSW.ScreenWalk     := MSWalk;
end;

function TScript.AtTile(Tile: TPoint; Distance: Int32 = 15): Boolean;
begin
  Result := RSW.GetMyPos.DistanceTo(Tile) <= Distance;
end;

procedure TScript.Run();
var
  TrapTime         : TStopwatch;
  slot             : Int32;
  TotalTrapTime    : Int64;
begin
  if (not RSClient.IsLoggedIn) then
    if Login.Players[0].Password <> '' then
      Login.LoginPlayer
    else
    begin
      Self.WriteMsg('No player credentials');
      Exit;
    end;

  if Inventory.FindItem(Self.FoodType, slot) then
    if RSW.GetMyPos().DistanceTo(Self.BankTile) < 10 then
      RSW.WebWalk(Self.MarketTile);

  TrapTime.Start;
  TotalTrapTime := 240000;

  while (getTimeRunning() < Self.ShutdownTime) do
  begin
    Self.WritePosition();
    //Self.WriteMsg(IntToStr(TrapTime.ElapsedTime));
    if RSW.GetMyPos().DistanceTo(Self.ArdyTile) < 128 then
    begin
      Self.DoPickpocketing();
    end else
      TerminateScript('Error: 69');

    if Self.FarmerInTrap() then
    begin
      while (TrapTime.ElapsedTime < TotalTrapTime) do
      begin
        //Self.WriteMsg(IntToStr(TrapTime.ElapsedTime));
        if RSW.GetMyPos().DistanceTo(Self.ArdyTile) < 128 then
        begin
          Self.DoPickpocketing();
        end else
          TerminateScript('Error: 69');
        Self.DoAB();
        wait(40, 115);
      end;
      Self.WalkInToPos();
      if SRL.Dice(24) then Wait(24000,32000) else Antiban.LoseFocus(RandomRange(16000, 24000));
      TotalTrapTime := RandomRange(206969, 226969);
      TrapTime.Reset;
    end;
    Self.DoAB();
  end;
  TerminateScript('End');

  (*
  begin
    Self.WriteMsg('Looping!');
    if (not RSClient.IsLoggedIn) then
    begin
      if Login.Players[0].Password <> '' then
        Login.LoginPlayer
      else
      begin
        Logout.ClickLogout();
        TerminateScript('Not logged in');
      end;
    end;
    Self.checkForCombat();
    if RSW.GetMyPos().DistanceTo(Self.ArdyTile) < 128 then //if Inventory.FindItem(Self.FoodType, slot) then
      Self.DoPickpocketing()
    else
      TerminateScript('Error: 69');
      //Self.DoBanking();

    if Self.ReportTimer.IsFinished() then
    begin
      Self.Report();
      Self.ReportTimer.Restart();
    end;

    Self.DoAB();
    wait(40, 115);
  end;
  *)
  Logout.ClickLogout();
  TerminateScript('Time to shutdown');
end;

begin
  //RSW.Setup('world');
  //Bot.writemsg(IntToStr(RSW.GetMyPos.X) + " : " + IntToStr(RSW.GetMyPos.Y));
  //TerminateScript('Test');

  if (not DirectoryExists(AppPath+'\Resources\')) then
    CreateDirectory(AppPath+'\Resources');

  if (not FileExists(AppPath+'\Resources\BGCanvas_MF.png')) then
  begin
    Writeln('Downloading GUI assets');
    DownloadToFile('https://i.imgur.com/wahxSDL.png', AppPath+'\Resources\BGCanvas_MF.png');
  end;

  Sync(@GUI.Run);


  if RSClient.IsLoggedIn() then
    Bot.Init();

  Bot.FindBank();
  Bot.Run();
end.
