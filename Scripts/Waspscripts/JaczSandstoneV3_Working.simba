{$DEFINE SRL_USE_REMOTEINPUT}
{$IFDEF WINDOWS}{$DEFINE SCRIPT_GUI}{$ENDIF}
{$I SRL/osr.simba}
{$I WaspLib/osr.simba}

begin
  Login.PlayerIndex     := 0;
  AntibanEnabled        := True; //Enables Most Antiban
  BreaksEnabled         := True; //Enables Short Breaks
  SleepEnabled          := True; //Enables Sleep Breaks
  RemoteInputEnabled    := True; //Enables Remote Input
  ProgressReportEnabled := True; //Enables Graphical Progress Report
  ScriptDebugEnabled    := False; //Enables Script Debugging
end;

type
  ETask = (
    MINE_HUMIDIFY,
    MINE_NO_HUMIDIFY
  );

var
  CurrentTask: ETask := ETask.MINE_HUMIDIFY;

type
  EState = (
    WAIT_STATE,

    //Mining States
    MINE_SANDSTONE,
    USE_SPEC,
    USE_HUMIDIFY,
    DEPOSIT_SANDSTONE,

    LEVEL_UP,
    END_SCRIPT
  );

  TScript = record(TBaseWalkerScript)
    State: EState;
    Mining: Boolean;

    PlayerHP: Int32;
    PrevHP: Int32;
    InvCount: Int32;
    PrevInvCount: Int32;

    RSRock: PRSObject;
    RSGrind: PRSObject;
    SandstoneOre: TRSObject;
    RSGrinder: TRSObject;

    DropList: TRSItemArray;
  end;

procedure TAntiban.Setup; override;
begin
  inherited;

  Antiban.Skills := [ERSSkill.MINING, ERSSkill.TOTAL];
  Antiban.MinZoom := 30;
  Antiban.MaxZoom := 60;
end;

function TScript.IsMining: Boolean;
begin
  Result := SRL.IsAnimating(MainScreen.GetPlayerBox, MainScreen.ConvertDistance(450), 350, 3);
end;
function TScript.WaitMining(t: UInt32 = 2000): Boolean;
var
  GotXP: Boolean;
begin
  if Inventory.Count <> PrevInvCount then
  begin
    Mining := False;
    Exit(False);
  end;

  Result := WaitUntil((Mining := Self.IsMining) or (GotXP := XPBar.EarnedXP), 100, t);
  if GotXP then
    Result := Mining := False;
end;

procedure TScript.Init(MaxActions: Int32; MaxTime: Int64); override;
begin
  Name := 'SandstoneMiner';

  inherited;

  RSW.Setup('x4310y4725');
  // [154, 83], [141, 78], CTS2(2582916, 16, 0.04, 0.22)
  //[[150, 83], [150, 83], [154, 83], [154, 83], [141, 78], [142, 80]]
  if not RSClient.IsLoggedIn then
    Login.LoginPlayer;

  Options.SetZoomLevel(40);

  if Antiban.BioDice then
    Options.SetNPCAttackOption(ERSAttackOption.HIDDEN)
  else
    Options.SetNPCAttackOption(ERSAttackOption.ALWAYS_RIGHT_CLICK);

  RSGrinder.SetupCommon(2, 7, [[4390, 4865], [4390, 4869], [4389, 4874],[4387, 4869]]);//
  RSGrinder.UpText := ['rinder'];
  RSGrinder.Finder.ColorClusters += [CTS2(4346725, 19, 0.17, 0.32),
                                  CTS2(8634567, 18, 0.11, 0.88),50];
  RSGrinder.Finder.ClusterDistance := 3;
  RSGrinder.Finder.Erode := 5;

  SandstoneOre.SetupCommon;
  SandstoneOre.UpText := ['ine Roc'];
  SandstoneOre.Finder.Colors += CTS2(2253179, 17, 0.04, 0.35);//CTS2(2582916, 16, 0.04, 0.22);
  SandstoneOre.Finder.MinShortSide := 20;

  SandstoneOre.Filter.UpText := False;
  SandstoneOre.SetupCommon(2,1,
    [[4454, 4856],[4454, 4852], [4450, 4852], [4442, 4848], [4442, 4844], [4438, 4844]]
    );

  RSGrind := @RSGrinder;
  RSRock  := @SandstoneOre;

  DropList := ['Granite (500g)', 'Granite (2kg)', 'Granite (5kg)'];
  if ETask.MINE_NO_HUMIDIFY then
    DropList := ['Waterskin(0)','Granite (500g)', 'Granite (2kg)', 'Granite (5kg)'];
  if ScriptDebugEnabled then
  begin
    DebugObjectArray += RSRock;
    DebugObjectArray += RSGrind;
  end;
end;

function TScript.DropItems: Boolean;
var
  InvCount: Int32 := 28;
begin
  Result := Inventory.ShiftDrop(DropList, Inventory.RandomPattern);
end;

function TScript.Deposit: Boolean;
begin
  Result := RSGrinder.Click or RSGrinder.WalkClick;
  if Result then
    WaitUntil(not Inventory.IsFull, 400, 4200);

  RSRock^.Click or RSRock^.WalkClick;
  Self.DropItems;
  TotalActions += 1;
end;

function TScript.Mine: Boolean;
begin
  Result := Mining := RSRock^.Click or RSRock^.WalkClick;
  if Result then
  begin
    Minimap.WaitPlayerMoving(300, 8000);
    Wait(1000, 1500);
  end;
end;

function TScript.RefillWaterskins: Boolean;
begin
  Writeln('Refilling');
  if Magic.CastSpell(ERSSpell.HUMIDIFY) then
  begin
    Wait(1500, 2500);
    Result := True;
  end else Magic.CastSpell(ERSSpell.HUMIDIFY);
end;

function TScript.EndScript: Boolean;
begin
  if Logout.ClickLogout() then
    TerminateScript('Ending Script! Shutdown');
end;

function TScript.GetState: EState;
begin
  if WL.Activity.IsFinished then
    Exit(EState.END_SCRIPT);

  if Mining then
    Exit(EState.WAIT_STATE);

  if Chat.LeveledUp then
  begin
    Mining := False;
    Exit(EState.LEVEL_UP);
  end;

  if Inventory.IsFull then
  begin
    Mining := False;
    Exit(EState.DEPOSIT_SANDSTONE);
  end;


  Exit(EState.MINE_SANDSTONE);

end;

procedure TScript.Run(MaxActions: Int32; MaxTime: Int64);
begin
  ClearDebug;
  Self.Init(MaxActions, MaxTime);

  while not Self.ShouldStop do
  begin
    State := Self.GetState;
    Action := ToStr(State);
    Self.ProcessWhileWaiting;

    InvCount := Inventory.Count;
    PlayerHP := Minimap.GetHPLevel;


    if InvCount <> PrevInvCount then
      WL.Activity.Restart;


    case State of
      EState.WAIT_STATE: Self.WaitMining;
      EState.LEVEL_UP: Chat.HandleLevelUp;

      EState.MINE_SANDSTONE: Self.Mine;
      Estate.DEPOSIT_SANDSTONE: Self.Deposit;
      EState.END_SCRIPT: Self.EndScript;
    end;

    //Writeln(IntToStr(PlayerHP) + '  : ' + IntToStr(PrevHP));

    if PlayerHP < PrevHP then
      Self.RefillWaterskins;

    PrevHP := PlayerHP;
    PrevInvCount := InvCount;
    Self.DoAntiban;
  end;
end;

var
  Script: TScript;

type
  TConfig = record(TScriptConfig)
    Selector: TLabeledCombobox;
  end;

procedure TConfig.StartScript(Sender: TObject);
begin
  Self.Init(Sender);

  CurrentTask := ETask(Selector.Combobox.getItemIndex);

  MaxActions := StrToInt(Self.ActionLimit.GetText);
  MaxTime    := StrToInt64(Self.TimeLimit.GetText);
end;

procedure TConfig.Setup; override;
begin
  inherited;

  with Selector do
  begin
    Init(ScriptSettingsPanel);
    SetCaption('Mining Style:');
    SetLeft(ScriptSettingsLabel.getLeft + 5);
    SetTop(ScriptSettingsLabel.getTop + ScriptSettingsLabel.getHeight + 5);
    SetWidth(200);
    Combobox.setStyle(csDropDownList);
    Combobox.getItems.Add('Mine (Humidify)');
    Combobox.getItems.Add('Mine (No Humidify)');
    Combobox.setItemIndex(Ord(CurrentTask));
  end;

  StartButton.setOnClick(@Self.StartScript);
end;

procedure TConfig.Run; override;
begin
  Self.Setup;

  inherited;
end;

var
  Config: TConfig;

begin
  {$IFDEF SCRIPT_GUI}
  Sync(@Config.Run);
  {$ENDIF}
  Script.Run(MaxActions, MaxTime);
end.
