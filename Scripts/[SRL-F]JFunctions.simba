// TO KEEP EVERYTHING TOGETHER
{$IFNDEF SRL_OSR}
{$I SRL-F/OSR.simba}
{$ENDIF}
const
  VERSIONURL            = 'https://raw.githubusercontent.com/jacz24/TheOasis/main/Version';
  JUPDATEURL            = 'https://raw.githubusercontent.com/jacz24/TheOasis/main/Scripts/%5BSRL-F%5DJFunctions.simba';
  COOKERUPDATEURL       = 'https://raw.githubusercontent.com/jacz24/TheOasis/main/Scripts/JAIOCooker.simba';
  JVERSION              = 'JVERSION';
type
  TScriptColor = record
    RSObject                                                  : TRSObjectFinder;
    FilterSize                                                : Int32;
    RadiusExpand                                              : Double;
  end;

  TAntiBanEnergy = record
    BioHash, Endurance, Patience, BoxPTRad: Double;
  end;

  TMSObject = record
    WorldLoc    : TPointArray; //loctions on the world map
    TObj        : TRSObjectFinder;
  end;

  TScript = record
    Status, StopReason, BotType                               : String;
    MouseLooksForUpText                                       : TStringArray;
    Running, DidLogin, Debug, Drawing, Reporting, AllowBreaks, UpdateOn : Boolean;
    BaseMouseSpeed, HPAmount, ReportRate, DrawRate, SleepRate,
    MaxTiredMouseSpeed, FastMouseAdd, LastPosTime,
    ScriptVersion, LocalBotVersion, RemoteJVersion, RemoteBotVersion  : Int32;
    Activity: record
      XP                                                      : Int32;
      Countdown                                               : TCountDown;
    end;
    ShutdownTime                                              : Int64;
    TrueRunTime                                               : TStopwatch;
    DrawCounter, ReportCounter                                : TCountdown;
    AntiBan                                                   : TAntiban;
    AntiBanEnergy                                             : TAntiBanEnergy;
    LastPos                                                   : TPoint;
  end;

var
  Script: TScript;

procedure DownloadToFile(const URL, Filename: string);
var
  Client: Int32;
begin
  Script.WriteMsg('Downloading Functions');
  Client := InitializeHTTPClient(False);
  try
    GetHTTPPageEx(Client, URL, Filename);
  finally
    FreeHTTPClient(Client);
  end;
end;

function TScript.AttemptToFindObject(ObjFinder: TRSObjectFinder; TotalAttempts: Int32): Boolean;
var
  ATPA: T2DPointArray;
  Attempts: Int32;
begin
  for Attempts:=0 to TotalAttempts do
  begin
    self.WriteMsg('Attempt: ' + IntToStr(Attempts));
    Antiban.RandomRotate();
    //Wait(50,250);
    ATPA := MainScreen.FindObject(ObjFinder);
    if ATPA.Len < 1 then
    begin
      Attempts += 1;
    end else
      Self.WriteMsg('Found!');
      Exit(True);
  end;
end;

function TScript.UpCaseFirstChar(const S: string): string;
begin
  Result := S;

  if Length(Result) > 0 then
    Result[1] := UpCase(Result[1]);
end;


procedure TScript.BankAntiban(Percent: Double);
var
  randP: Double;
begin
  if Random() <= (Percent/100) then
  begin
    Antiban.DebugLn('Bank screen antiban');
    randP := Random();
    if randP < 0.33 then
      Mouse.RandomMovement()
    else if (randP >= 0.33) and (randP < 0.66) then
      wait(2800, 4000)
    else if randP > 0.66 then
    begin
      // Copied version of 'random right click' antiban, minus the additional debug msg
      Mouse.Move(GetClientBounds(), True, MOUSE_DISTRIBUTION_RANDOM);

      if ChooseOption.Open() then
      begin
        if Random() < 0.50 then
          Mouse.Move(ChooseOption.Bounds);

        Wait(0, 8000, wdLeft);

        ChooseOption.Close();
      end;
    end;

  end;
end;

// Combination of miss mouse + slowing near the target destination
procedure TMouse.HumanMove(Point: TPoint);
var
  mPt: TPoint;
  S: Int32;
  Miss: Double;
  Range: Int64;
begin
  S := Self.Speed;
  Range := Trunc(Power(Self.Position().DistanceTo(Point), 0.80)); // how much possible range to miss
  Miss := SRL.SkewedRand(0.9, 0.1, 1.5); // Where miss will happen. 1 = destination (P).

  mPt.X := Trunc((1-Miss)*Self.Position().X + Miss*Point.X);
  mPt.Y := Trunc((1-Miss)*Self.Position().Y + Miss*Point.Y);

  mPt.X += SRL.NormalRange(-Range, Range);
  mPt.Y += SRL.NormalRange(-Range, Range);

  Self.Move(mPt);
  Self.Speed := round(S*0.85);
  Self.Move(Point);
  Self.Speed := S;
end;

procedure TMouse.RandomMovement();
var
  S: Int32;
begin
  S := Self.Speed;
  Self.Speed := 4;
  Self.Move(Box(Mouse.Position, 75, 75), True, );
  Self.Speed := S;
end;

procedure TScript.DoLoseFocus();
Var T: Int32;
begin
  T := SRL.NormalRange(1700,8000);
  Antiban.DebugLn('Losing focus for '+SRL.MsToTime(T, Time_Short));
  Antiban.LoseFocus(T);
end;

procedure TScript.WriteMsg(Message: String);
begin
  WriteLn('[Bot]: ', Message);
end;


function TScript.IsJUpdated(): Boolean; // Compare the versions return true if match
begin
  if (RemoteJVersion = Script.ScriptVersion) then
  begin
    Exit(True);
  end else Exit(False);
end;
function TScript.IsBUpdated(): Boolean; // Compare the versions return true if match
begin
  if (RemoteBotVersion = Script.LocalBotVersion) then
  begin
    Exit(True);
  end else Exit(False);
end;
function TScript.DownloadScript(): Boolean; // Lets Install If We Find No File
var
  VerPage, JVersion, BotVersion: string;
begin
  if (not DirectoryExists(AppPath+'\Resources\')) then
    CreateDirectory(AppPath+'\Resources');
  if (not FileExists(AppPath+'\Resources\[SRL-F]JFunctions.simba')) then
    DownloadToFile(JUPDATEURL,AppPath+'\Resources\[SRL-F]JFunctions.simba');

  VerPage := GetPage(VERSIONURL);

  JVersion := VerPage.After(JVERSION+': ');
  JVersion := JVersion.Before(',');
  BotVersion := VerPage.After(Self.BotType+': ');
  BotVersion := BotVersion.Before(',');
  RemoteJVersion := JVersion.ExtractNumber();
  RemoteBotVersion := BotVersion.ExtractNumber();
  Script.WriteMsg('Local JFunction Version: '+IntToStr(Script.ScriptVersion)+' | '+'Local Bot Version: '+IntToStr(Script.LocalBotVersion));
  Script.WriteMsg('Remote JFunction Version: '+IntToStr(RemoteJVersion)+' | ' +'Remote Bot Version: '+IntToStr(RemoteBotVersion));

  if (not IsJUpdated()) then
  begin
    Script.WriteMsg('JFunctions Not Updated! Updating Script...');
    DownloadToFile(JUPDATEURL,AppPath+'\Resources\[SRL-F]JFunctions.simba');
  end else Script.WriteMsg('JFunctions Already Latest Version!');
  if (BotType = '') then
  begin
    Script.WriteMsg('Not BotType Specified Assuming Only JFuncs');
    Exit(True);
  end else
  if (not IsBUpdated()) then
  begin
    Script.WriteMsg(BotType + ' Not Updated! Updating Script...');
    if (BotType = 'COOKERVERSION') then
      DownloadToFile(COOKERUPDATEURL,AppPath+'\Resources\JAIOCooker.simba');

    //TerminateScript('Error: 101');
  end else Exit(True);
end;
procedure TScript.ScriptUpdateHandler();
begin
  if (DownloadScript()) then
      Script.WriteMsg('Congrats You Are Running The Latest Version!');
end;
procedure TScript.Setup();
begin
  Script.WriteMsg('Setting Up JFunctions!');
  Script.ScriptVersion := 1; // Current Local JFunction Version

  if (Script.UpdateOn) then
  begin
  Script.WriteMsg('Update Enabled: ' + Script.BotType);
  ScriptUpdateHandler();
  end else Script.WriteMsg('Updating Is OFF, IDK WHY YOU WOULD WANT TO RUN THIS');
end;


